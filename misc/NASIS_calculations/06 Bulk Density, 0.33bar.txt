BASE TABLE chorizon.

EXEC SQL select coiidref, taxorder, taxsuborder, taxgrtgroup, taxsubgrp, hzdept_r, hzdepb_r, hzname, sandvc_r, sandco_r, 
	sandmed_r, sandfine_r, sandvf_r, sandtotal_r, silttotal_r, claytotal_r, om_r, ksat_r, gypsum_r, gypsum_l, gypsum_h,
	sandtotal_l, sandtotal_h, silttotal_l, silttotal_h, claytotal_l, claytotal_h, om_l, om_h, texture, codename(lieutex) as lieutex
FROM component
	INNER JOIN chorizon on component.coiid=chorizon.coiidref
	LEFT OUTER join chtexturegrp on chorizon.chiid=chtexturegrp.chiidref
	LEFT OUTER join chtexture ON chtexturegrp.chtgiid=chtexture.chtgiidref 
		and chtexturegrp.rvindicator=1;. #and dbthirdbar_r is null;.

EXEC SQL select resdept_r, reskind, resthk_r
FROM component
	INNER JOIN corestrictions on component.coiid=corestrictions.coiidref and coiidref = $coiidref;.

DEFINE order	CODENAME(taxorder).
DEFINE suborder	CODENAME(taxsuborder).
DEFINE grtgroup	CODENAME(taxgrtgroup).
DEFINE subgrp 	CODENAME(taxsubgrp).
DEFINE reskind1	CODENAME(reskind).

DEFINE oc_r		om_r/1.72.
DEFINE oc_l		om_l/1.72.
DEFINE oc_h		om_h/1.72.

# ASSIGNS A, B, & C hznames when "H" is present.
ASSIGN hzname	IF hzname matches "H1" THEN "A"
				ELSE IF hzname matches "H2" THEN "B"
				ELSE IF hzname matches "H3" THEN "B"
				ELSE IF hzname matches "H*" THEN "C"
				ELSE hzname.

# gets the 1st two characters of the horizon name.
DEFINE hzn2		hzname[0:2].

# gets the 1st three characters of the horizon name.
DEFINE hzn3		hzname[0:3].

# ANDIC SOIL PROPERTIES-------------------------------------------------------
# Read the table of bulk densities and other properties of soils that have andic soil properties.
INPUT texture_fam char, hzn_top numeric, hzn_bot numeric, hzn_desgn char, hzn_master char, 
	sand numeric, silt numeric, clay numeric, carbon numeric, w3cld numeric, w15l2 numeric, db_13b numeric
	FILE "bd_andic"
	AGGREGATE COLUMN texture_fam none, hzn_top none, hzn_bot none, hzn_desgn none, hzn_master none, 
	sand none, silt none, clay none, carbon none, w3cld none, w15l2 none, db_13b none.

ASSIGN texture_fam	IF texture_fam == "Ash" THEN "ashy" 
					ELSE IF texture_fam == "Fer" THEN "hydrous"
					ELSE IF texture_fam == "Hyd" THEN "hydrous" 
					ELSE IF texture_fam == "Med" THEN "medial"
					ELSE "other".

DEFINE texmod	IF texture matches "*ASHY*" AND NOT ISNULL(texture) THEN "ashy"
				ELSE IF texture matches "*MEDL*" AND NOT ISNULL(texture) THEN "medial"
				ELSE IF texture matches "*HYDR*" AND NOT ISNULL(texture) THEN "hydrous"
				ELSE "other". 

ASSIGN sand		IF texmod == "other" THEN sand ELSE LOOKUP(texmod == texture_fam, sand).
ASSIGN silt		IF texmod == "other" THEN silt ELSE LOOKUP(texmod == texture_fam, silt).
ASSIGN clay		IF texmod == "other" THEN clay ELSE LOOKUP(texmod == texture_fam, clay).
ASSIGN carbon	IF texmod == "other" THEN carbon ELSE LOOKUP(texmod == texture_fam, carbon).
ASSIGN db_13b	IF texmod == "other" THEN db_13b ELSE LOOKUP(texmod == texture_fam, db_13b).

# Determines the 'distance' of each soil from the target soil.
DEFINE distance7		SQRT(POW(oc_r - carbon,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_and		ARRAYMIN(distance7).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_and 		ARRAYPOSITION(distance7).
DEFINE pos1_and 	LOOKUP(minn1_and, distance7, pos_and).
DEFINE dist2_and	IF pos_and == pos1_and THEN distance7 + 1000 ELSE distance7.
DEFINE minn2_and	ARRAYMIN(dist2_and).
DEFINE pos2_and		LOOKUP(minn2_and, dist2_and, pos_and).
DEFINE dist3_and	IF pos_and == pos2_and THEN dist2_and + 1000 ELSE dist2_and.
DEFINE minn3_and	ARRAYMIN(dist3_and).
DEFINE pos3_and		LOOKUP(minn3_and, dist3_and, pos_and).
DEFINE dist4_and	IF pos_and == pos3_and THEN dist3_and + 1000 ELSE dist3_and.
DEFINE minn4_and	ARRAYMIN(dist4_and).
DEFINE pos4_and		LOOKUP(minn4_and, dist4_and, pos_and).
DEFINE dist5_and	IF pos_and == pos4_and THEN dist4_and + 1000 ELSE dist4_and.
DEFINE minn5_and	ARRAYMIN(dist5_and).
DEFINE pos5_and		LOOKUP(minn5_and, dist5_and, pos_and).
DEFINE dist6_and	IF pos_and == pos5_and THEN dist5_and + 1000 ELSE dist5_and.
DEFINE minn6_and	ARRAYMIN(dist6_and).
DEFINE pos6_and		LOOKUP(minn6_and, dist6_and, pos_and).
DEFINE dist7_and	IF pos_and == pos6_and THEN dist6_and + 1000 ELSE dist6_and.
DEFINE minn7_and	ARRAYMIN(dist7_and).
DEFINE pos7_and		LOOKUP(minn7_and, dist7_and, pos_and).
DEFINE dist8_and	IF pos_and == pos7_and THEN dist7_and + 1000 ELSE dist7_and.
DEFINE minn8_and	ARRAYMIN(dist8_and).
DEFINE pos8_and		LOOKUP(minn8_and, dist8_and, pos_and).
DEFINE dist9_and	IF pos_and == pos8_and THEN dist8_and + 1000 ELSE dist8_and.
DEFINE minn9_and	ARRAYMIN(dist9_and).
DEFINE pos9_and		LOOKUP(minn9_and, dist9_and, pos_and).
DEFINE dist10_and	IF pos_and == pos9_and THEN dist9_and + 1000 ELSE dist9_and.
DEFINE minn10_and	ARRAYMIN(dist10_and).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_and		LOOKUP(minn1_and, distance7, db_13b).
ASSIGN BD1_and		ARRAYMIN(BD1_and).
DEFINE BD2_and		LOOKUP(minn2_and, dist2_and, db_13b).
ASSIGN BD2_and		ARRAYMIN(BD2_and).
DEFINE BD3_and		LOOKUP(minn3_and, dist3_and, db_13b).
ASSIGN BD3_and		ARRAYMIN(BD3_and).
DEFINE BD4_and		LOOKUP(minn4_and, dist4_and, db_13b).
ASSIGN BD4_and		ARRAYMIN(BD4_and).
DEFINE BD5_and		LOOKUP(minn5_and, dist5_and, db_13b).
ASSIGN BD5_and		ARRAYMIN(BD5_and).
DEFINE BD6_and		LOOKUP(minn6_and, dist6_and, db_13b).
ASSIGN BD6_and		ARRAYMIN(BD6_and).
DEFINE BD7_and		LOOKUP(minn7_and, dist7_and, db_13b).
ASSIGN BD7_and		ARRAYMIN(BD7_and).
DEFINE BD8_and		LOOKUP(minn8_and, dist8_and, db_13b).
ASSIGN BD8_and		ARRAYMIN(BD8_and).
DEFINE BD9_and		LOOKUP(minn9_and, dist9_and, db_13b).
ASSIGN BD9_and		ARRAYMIN(BD9_and).
DEFINE BD10_and		LOOKUP(minn10_and, dist10_and, db_13b).
ASSIGN BD10_and		ARRAYMIN(BD10_and).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_and	IF minn1_and == 0 THEN 1 ELSE minn1_and.
ASSIGN minn2_and	IF minn2_and == 0 THEN 1 ELSE minn2_and.
ASSIGN minn3_and	IF minn3_and == 0 THEN 1 ELSE minn3_and.
ASSIGN minn4_and	IF minn4_and == 0 THEN 1 ELSE minn4_and.
ASSIGN minn5_and	IF minn5_and == 0 THEN 1 ELSE minn5_and.
ASSIGN minn6_and	IF minn6_and == 0 THEN 1 ELSE minn6_and.
ASSIGN minn7_and	IF minn7_and == 0 THEN 1 ELSE minn7_and.
ASSIGN minn8_and	IF minn8_and == 0 THEN 1 ELSE minn8_and.
ASSIGN minn9_and	IF minn9_and == 0 THEN 1 ELSE minn9_and.
ASSIGN minn10_and	IF minn10_and == 0 THEN 1 ELSE minn10_and.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_and		minn1_and + minn2_and + minn3_and + minn4_and + minn5_and + minn6_and + minn7_and + minn8_and + minn9_and + minn10_and.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_and	POW(sum_dist_and/minn1_and,1).
DEFINE rel_dist2_and	POW(sum_dist_and/minn2_and,1).
DEFINE rel_dist3_and	POW(sum_dist_and/minn3_and,1).
DEFINE rel_dist4_and	POW(sum_dist_and/minn4_and,1).
DEFINE rel_dist5_and	POW(sum_dist_and/minn5_and,1).
DEFINE rel_dist6_and	POW(sum_dist_and/minn6_and,1).
DEFINE rel_dist7_and	POW(sum_dist_and/minn7_and,1).
DEFINE rel_dist8_and	POW(sum_dist_and/minn8_and,1).
DEFINE rel_dist9_and	POW(sum_dist_and/minn9_and,1).
DEFINE rel_dist10_and	POW(sum_dist_and/minn10_and,1).

DEFINE sum_rel_dist_and		rel_dist1_and + rel_dist2_and + rel_dist3_and + rel_dist4_and + rel_dist5_and + rel_dist6_and + rel_dist7_and + rel_dist8_and + rel_dist9_and + rel_dist10_and.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_and	rel_dist1_and/sum_rel_dist_and.
DEFINE wt2_and	rel_dist2_and/sum_rel_dist_and.
DEFINE wt3_and	rel_dist3_and/sum_rel_dist_and.
DEFINE wt4_and	rel_dist4_and/sum_rel_dist_and.
DEFINE wt5_and	rel_dist5_and/sum_rel_dist_and.
DEFINE wt6_and	rel_dist6_and/sum_rel_dist_and.
DEFINE wt7_and	rel_dist7_and/sum_rel_dist_and.
DEFINE wt8_and	rel_dist8_and/sum_rel_dist_and.
DEFINE wt9_and	rel_dist9_and/sum_rel_dist_and.
DEFINE wt10_and	rel_dist10_and/sum_rel_dist_and.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_and	ROUND(BD1_and*wt1_and + BD2_and*wt2_and + BD3_and*wt3_and + BD4_and*wt4_and + BD5_and*wt5_and + BD6_and*wt6_and + BD7_and*wt7_and + BD8_and*wt8_and + BD9_and*wt9_and + BD10_and*wt10_and,2).

# The average bulk density of 15 nearest soils (to the target soil).
#DEFINE wt_BD_and_AVE	ROUND((BD1_and + BD2_and + BD3_and + BD4_and + BD5_and)/5,2).			

#-------------
# The following sections are to normalize the variables to avoid bias toward one attribute or the other.
# Calculates the mean and standard deviation of the variables in the reference data set (input file).
DEFINE ave_sand		ARRAYAVG(sand).
DEFINE std_sand		ARRAYSTDEV(sand).
DEFINE ave_silt		ARRAYAVG(silt).
DEFINE std_silt		ARRAYSTDEV(silt).
DEFINE ave_clay		ARRAYAVG(clay).
DEFINE std_clay		ARRAYSTDEV(clay).
DEFINE ave_carbon	ARRAYAVG(carbon).
DEFINE std_carbon	ARRAYSTDEV(carbon).

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_sand		((sand)-ave_sand)/std_sand.
DEFINE temp_silt		((silt)-ave_silt)/std_silt.
DEFINE temp_clay		((clay)-ave_clay)/std_clay.
DEFINE temp_carbon		((carbon)-ave_carbon)/std_carbon.

DEFINE temp_sandtotal_r_and	((sandtotal_r)-ave_sand)/std_sand.
DEFINE temp_silttotal_r_and	((silttotal_r)-ave_silt)/std_silt.
DEFINE temp_claytotal_r_and	((claytotal_r)-ave_clay)/std_clay.
DEFINE temp_oc_r_and		((oc_r)-ave_carbon)/std_carbon.

# Gets the minimum-maximum range of the temporary variables.
DEFINE range_sand		ARRAYMAX(temp_sand)-ARRAYMIN(temp_sand).
DEFINE range_silt		ARRAYMAX(temp_silt)-ARRAYMIN(temp_silt).
DEFINE range_clay		ARRAYMAX(temp_clay)-ARRAYMIN(temp_clay).
DEFINE range_carbon		ARRAYMAX(temp_carbon)-ARRAYMIN(temp_carbon).

# Puts the ranges of the variables into an array.
DEFINE cat_ranges_and	APPEND(range_sand,APPEND(range_silt,APPEND(range_clay, range_carbon))).

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_sand		temp_sand*ARRAYMAX(cat_ranges_and)/range_sand.
DEFINE trans_silt		temp_silt*ARRAYMAX(cat_ranges_and)/range_silt.
DEFINE trans_clay		temp_clay*ARRAYMAX(cat_ranges_and)/range_clay.
DEFINE trans_carbon		temp_carbon*ARRAYMAX(cat_ranges_and)/range_carbon.

DEFINE trans_sandtotal_r_and	temp_sandtotal_r_and*ARRAYMAX(cat_ranges_and)/range_sand.
DEFINE trans_silttotal_r_and	temp_silttotal_r_and*ARRAYMAX(cat_ranges_and)/range_silt.
DEFINE trans_claytotal_r_and	temp_claytotal_r_and*ARRAYMAX(cat_ranges_and)/range_clay.
DEFINE trans_oc_r_and			temp_oc_r_and*ARRAYMAX(cat_ranges_and)/range_carbon.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance8	SQRT(POW(trans_sandtotal_r_and - trans_sand,2)+POW(trans_silttotal_r_and - trans_silt,2)+
					POW(trans_claytotal_r_and - trans_clay,2)+POW(trans_oc_r_and - trans_carbon,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_and2	ARRAYMIN(distance8).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_and2 	ARRAYPOSITION(distance8).
DEFINE pos1_and2 	LOOKUP(minn1_and2, distance8, pos_and2).
DEFINE dist2_and2	IF pos_and2 == pos1_and2 THEN distance8 + 1000 ELSE distance8.
DEFINE minn2_and2	ARRAYMIN(dist2_and2).
DEFINE pos2_and2	LOOKUP(minn2_and2, dist2_and2, pos_and2).
DEFINE dist3_and2	IF pos_and2 == pos2_and2 THEN dist2_and2 + 1000 ELSE dist2_and2.
DEFINE minn3_and2	ARRAYMIN(dist3_and2).
DEFINE pos3_and2	LOOKUP(minn3_and2, dist3_and2, pos_and2).
DEFINE dist4_and2	IF pos_and2 == pos3_and2 THEN dist3_and2 + 1000 ELSE dist3_and2.
DEFINE minn4_and2	ARRAYMIN(dist4_and2).
DEFINE pos4_and2	LOOKUP(minn4_and2, dist4_and2, pos_and2).
DEFINE dist5_and2	IF pos_and2 == pos4_and2 THEN dist4_and2 + 1000 ELSE dist4_and2.
DEFINE minn5_and2	ARRAYMIN(dist5_and2).
DEFINE pos5_and2	LOOKUP(minn5_and2, dist5_and2, pos_and2).
DEFINE dist6_and2	IF pos_and2 == pos5_and2 THEN dist5_and2 + 1000 ELSE dist5_and2.
DEFINE minn6_and2	ARRAYMIN(dist6_and2).
DEFINE pos6_and2	LOOKUP(minn6_and2, dist6_and2, pos_and2).
DEFINE dist7_and2	IF pos_and2 == pos6_and2 THEN dist6_and2 + 1000 ELSE dist6_and2.
DEFINE minn7_and2	ARRAYMIN(dist7_and2).
DEFINE pos7_and2	LOOKUP(minn7_and2, dist7_and2, pos_and2).
DEFINE dist8_and2	IF pos_and2 == pos7_and2 THEN dist7_and2 + 1000 ELSE dist7_and2.
DEFINE minn8_and2	ARRAYMIN(dist8_and2).
DEFINE pos8_and2	LOOKUP(minn8_and2, dist8_and2, pos_and2).
DEFINE dist9_and2	IF pos_and2 == pos8_and2 THEN dist8_and2 + 1000 ELSE dist8_and2.
DEFINE minn9_and2	ARRAYMIN(dist9_and2).
DEFINE pos9_and2	LOOKUP(minn9_and2, dist9_and2, pos_and2).
DEFINE dist10_and2	IF pos_and2 == pos9_and2 THEN dist9_and2 + 1000 ELSE dist9_and2.
DEFINE minn10_and2	ARRAYMIN(dist10_and2).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_and2		LOOKUP(minn1_and2, distance8, db_13b).
ASSIGN BD1_and2		ARRAYMIN(BD1_and2).
DEFINE BD2_and2		LOOKUP(minn2_and2, dist2_and2, db_13b).
ASSIGN BD2_and2		ARRAYMIN(BD2_and2).
DEFINE BD3_and2		LOOKUP(minn3_and2, dist3_and2, db_13b).
ASSIGN BD3_and2		ARRAYMIN(BD3_and2).
DEFINE BD4_and2		LOOKUP(minn4_and2, dist4_and2, db_13b).
ASSIGN BD4_and2		ARRAYMIN(BD4_and2).
DEFINE BD5_and2		LOOKUP(minn5_and2, dist5_and2, db_13b).
ASSIGN BD5_and2		ARRAYMIN(BD5_and2).
DEFINE BD6_and2		LOOKUP(minn6_and2, dist6_and2, db_13b).
ASSIGN BD6_and2		ARRAYMIN(BD6_and2).
DEFINE BD7_and2		LOOKUP(minn7_and2, dist7_and2, db_13b).
ASSIGN BD7_and2		ARRAYMIN(BD7_and2).
DEFINE BD8_and2		LOOKUP(minn8_and2, dist8_and2, db_13b).
ASSIGN BD8_and2		ARRAYMIN(BD8_and2).
DEFINE BD9_and2		LOOKUP(minn9_and2, dist9_and2, db_13b).
ASSIGN BD9_and2		ARRAYMIN(BD9_and2).
DEFINE BD10_and2	LOOKUP(minn10_and2, dist10_and2, db_13b).
ASSIGN BD10_and2	ARRAYMIN(BD10_and2).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_and2	IF minn1_and2 == 0 THEN 1 ELSE minn1_and2.
ASSIGN minn2_and2	IF minn2_and2 == 0 THEN 1 ELSE minn2_and2.
ASSIGN minn3_and2	IF minn3_and2 == 0 THEN 1 ELSE minn3_and2.
ASSIGN minn4_and2	IF minn4_and2 == 0 THEN 1 ELSE minn4_and2.
ASSIGN minn5_and2	IF minn5_and2 == 0 THEN 1 ELSE minn5_and2.
ASSIGN minn6_and2	IF minn6_and2 == 0 THEN 1 ELSE minn6_and2.
ASSIGN minn7_and2	IF minn7_and2 == 0 THEN 1 ELSE minn7_and2.
ASSIGN minn8_and2	IF minn8_and2 == 0 THEN 1 ELSE minn8_and2.
ASSIGN minn9_and2	IF minn9_and2 == 0 THEN 1 ELSE minn9_and2.
ASSIGN minn10_and2	IF minn10_and2 == 0 THEN 1 ELSE minn10_and2.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_and2		minn1_and2 + minn2_and2 + minn3_and2 + minn4_and2 + minn5_and2 + minn6_and2 + minn7_and2 + minn8_and2 + minn9_and2 + minn10_and2.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship.
DEFINE rel_dist1_and2	POW(sum_dist_and2/minn1_and2,1).
DEFINE rel_dist2_and2	POW(sum_dist_and2/minn2_and2,1).
DEFINE rel_dist3_and2	POW(sum_dist_and2/minn3_and2,1).
DEFINE rel_dist4_and2	POW(sum_dist_and2/minn4_and2,1).
DEFINE rel_dist5_and2	POW(sum_dist_and2/minn5_and2,1).
DEFINE rel_dist6_and2	POW(sum_dist_and2/minn6_and2,1).
DEFINE rel_dist7_and2	POW(sum_dist_and2/minn7_and2,1).
DEFINE rel_dist8_and2	POW(sum_dist_and2/minn8_and2,1).
DEFINE rel_dist9_and2	POW(sum_dist_and2/minn9_and2,1).
DEFINE rel_dist10_and2	POW(sum_dist_and2/minn10_and2,1).

DEFINE sum_rel_dist_and2		rel_dist1_and2 + rel_dist2_and2 + rel_dist3_and2 + rel_dist4_and2 + rel_dist5_and2 + rel_dist6_and2 + rel_dist7_and2 + rel_dist8_and2 + rel_dist9_and2 + rel_dist10_and2.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_and2		rel_dist1_and2/sum_rel_dist_and2.
DEFINE wt2_and2		rel_dist2_and2/sum_rel_dist_and2.
DEFINE wt3_and2		rel_dist3_and2/sum_rel_dist_and2.
DEFINE wt4_and2		rel_dist4_and2/sum_rel_dist_and2.
DEFINE wt5_and2		rel_dist5_and2/sum_rel_dist_and2.
DEFINE wt6_and2		rel_dist6_and2/sum_rel_dist_and2.
DEFINE wt7_and2  	rel_dist7_and2/sum_rel_dist_and2.
DEFINE wt8_and2		rel_dist8_and2/sum_rel_dist_and2.
DEFINE wt9_and2		rel_dist9_and2/sum_rel_dist_and2.
DEFINE wt10_and2	rel_dist10_and2/sum_rel_dist_and2.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_and2	ROUND(BD1_and2*wt1_and2 + BD2_and2*wt2_and2 + BD3_and2*wt3_and2 + BD4_and2*wt4_and2 + BD5_and2*wt5_and2 + BD6_and2*wt6_and2 + BD7_and2*wt7_and2 + BD8_and2*wt8_and2 + + BD9_and2*wt9_and2 + BD10_and2*wt10_and2,2).			

DEFINE wt_BD_andic	IF isnull(claytotal_r) or isnull(silttotal_r) or isnull(sandtotal_r) THEN wt_BD_and ELSE wt_BD_and2.

# The average bulk density of 8 nearest soils (to the target soil).
#DEFINE wt_BD_and2_AVE	ROUND((BD1_and2 + BD2_and2 + BD3_and2 + BD4_and2 + BD5_and2 + BD6_and2 + BD7_and2 + BD8_and2)/8,2).			

#DEFINE wt_BD_andic_AVE	IF isnull(claytotal_r) or isnull(silttotal_r) or isnull(sandtotal_r) THEN wt_BD_and_AVE ELSE wt_BD_and2_AVE.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Andic BD %s" wt_BD_andic.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s" BD1_and, BD2_and, BD3_and, BD4_and, BD5_and.

# GYPSUM SOILS-------------------------------------------------------------
# Read the table of bulk densities and other properties of soils that have > 5% gypsum.
INPUT ghzn_top numeric, ghzn_bot numeric, ghzn_desgn char, ghzn_master char, gsand numeric, gsilt numeric, 
	gclay numeric, gcarbon numeric, g_db_13b numeric, c_gypl2 numeric, gw3cld numeric, gw15l2 numeric
	FILE "bd_gypsum"
	AGGREGATE COLUMN ghzn_top none, ghzn_bot none, ghzn_desgn none, ghzn_master none, gsand none, gsilt none, 
	gclay none, gcarbon none, g_db_13b none, c_gypl2 none, gw3cld none, gw15l2 none.

# Determines the 'distance' of each soil from the target soil.
DEFINE distance5		SQRT(POW(gypsum_r - c_gypl2,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_gyp40		ARRAYMIN(distance5).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_gyp40 	ARRAYPOSITION(distance5).
DEFINE pos1_gyp40 	LOOKUP(minn1_gyp40, distance5, pos_gyp40).
DEFINE dist2_gyp40	IF pos_gyp40 == pos1_gyp40 THEN distance5 + 1000 ELSE distance5.
DEFINE minn2_gyp40	ARRAYMIN(dist2_gyp40).
DEFINE pos2_gyp40	LOOKUP(minn2_gyp40, dist2_gyp40, pos_gyp40).
DEFINE dist3_gyp40	IF pos_gyp40 == pos2_gyp40 THEN dist2_gyp40 + 1000 ELSE dist2_gyp40.
DEFINE minn3_gyp40	ARRAYMIN(dist3_gyp40).
DEFINE pos3_gyp40	LOOKUP(minn3_gyp40, dist3_gyp40, pos_gyp40).
DEFINE dist4_gyp40	IF pos_gyp40 == pos3_gyp40 THEN dist3_gyp40 + 1000 ELSE dist3_gyp40.
DEFINE minn4_gyp40	ARRAYMIN(dist4_gyp40).
DEFINE pos4_gyp40	LOOKUP(minn4_gyp40, dist4_gyp40, pos_gyp40).
DEFINE dist5_gyp40	IF pos_gyp40 == pos4_gyp40 THEN dist4_gyp40 + 1000 ELSE dist4_gyp40.
DEFINE minn5_gyp40	ARRAYMIN(dist5_gyp40).
DEFINE pos5_gyp40	LOOKUP(minn5_gyp40, dist5_gyp40, pos_gyp40).
DEFINE dist6_gyp40	IF pos_gyp40 == pos5_gyp40 THEN dist5_gyp40 + 1000 ELSE dist5_gyp40.
DEFINE minn6_gyp40	ARRAYMIN(dist6_gyp40).
DEFINE pos6_gyp40	LOOKUP(minn6_gyp40, dist6_gyp40, pos_gyp40).
DEFINE dist7_gyp40	IF pos_gyp40 == pos6_gyp40 THEN dist6_gyp40 + 1000 ELSE dist6_gyp40.
DEFINE minn7_gyp40	ARRAYMIN(dist7_gyp40).
DEFINE pos7_gyp40	LOOKUP(minn7_gyp40, dist7_gyp40, pos_gyp40).
DEFINE dist8_gyp40	IF pos_gyp40 == pos7_gyp40 THEN dist7_gyp40 + 1000 ELSE dist7_gyp40.
DEFINE minn8_gyp40	ARRAYMIN(dist8_gyp40).
DEFINE pos8_gyp40	LOOKUP(minn8_gyp40, dist8_gyp40, pos_gyp40).
DEFINE dist9_gyp40	IF pos_gyp40 == pos8_gyp40 THEN dist8_gyp40 + 1000 ELSE dist8_gyp40.
DEFINE minn9_gyp40	ARRAYMIN(dist9_gyp40).
DEFINE pos9_gyp40	LOOKUP(minn9_gyp40, dist9_gyp40, pos_gyp40).
DEFINE dist10_gyp40	IF pos_gyp40 == pos9_gyp40 THEN dist9_gyp40 + 1000 ELSE dist9_gyp40.
DEFINE minn10_gyp40	ARRAYMIN(dist10_gyp40).
DEFINE pos10_gyp40	LOOKUP(minn10_gyp40, dist10_gyp40, pos_gyp40).


# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_gyp40		LOOKUP(minn1_gyp40, distance5, g_db_13b).
ASSIGN BD1_gyp40		ARRAYMIN(BD1_gyp40).
DEFINE BD2_gyp40		LOOKUP(minn2_gyp40, dist2_gyp40, g_db_13b).
ASSIGN BD2_gyp40		ARRAYMIN(BD2_gyp40).
DEFINE BD3_gyp40		LOOKUP(minn3_gyp40, dist3_gyp40, g_db_13b).
ASSIGN BD3_gyp40		ARRAYMIN(BD3_gyp40).
DEFINE BD4_gyp40		LOOKUP(minn4_gyp40, dist4_gyp40, g_db_13b).
ASSIGN BD4_gyp40		ARRAYMIN(BD4_gyp40).
DEFINE BD5_gyp40		LOOKUP(minn5_gyp40, dist5_gyp40, g_db_13b).
ASSIGN BD5_gyp40		ARRAYMIN(BD5_gyp40).
DEFINE BD6_gyp40		LOOKUP(minn6_gyp40, dist6_gyp40, g_db_13b).
ASSIGN BD6_gyp40		ARRAYMIN(BD6_gyp40).
DEFINE BD7_gyp40		LOOKUP(minn7_gyp40, dist7_gyp40, g_db_13b).
ASSIGN BD7_gyp40		ARRAYMIN(BD7_gyp40).
DEFINE BD8_gyp40		LOOKUP(minn8_gyp40, dist8_gyp40, g_db_13b).
ASSIGN BD8_gyp40		ARRAYMIN(BD8_gyp40).
DEFINE BD9_gyp40		LOOKUP(minn9_gyp40, dist9_gyp40, g_db_13b).
ASSIGN BD9_gyp40		ARRAYMIN(BD9_gyp40).
DEFINE BD10_gyp40		LOOKUP(minn10_gyp40, dist10_gyp40, g_db_13b).
ASSIGN BD10_gyp40		ARRAYMIN(BD10_gyp40).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_gyp40	IF minn1_gyp40 == 0 THEN 1 ELSE minn1_gyp40.
ASSIGN minn2_gyp40	IF minn2_gyp40 == 0 THEN 1 ELSE minn2_gyp40.
ASSIGN minn3_gyp40	IF minn3_gyp40 == 0 THEN 1 ELSE minn3_gyp40.
ASSIGN minn4_gyp40	IF minn4_gyp40 == 0 THEN 1 ELSE minn4_gyp40.
ASSIGN minn5_gyp40	IF minn5_gyp40 == 0 THEN 1 ELSE minn5_gyp40.
ASSIGN minn6_gyp40	IF minn6_gyp40 == 0 THEN 1 ELSE minn6_gyp40.
ASSIGN minn7_gyp40	IF minn7_gyp40 == 0 THEN 1 ELSE minn7_gyp40.
ASSIGN minn8_gyp40	IF minn8_gyp40 == 0 THEN 1 ELSE minn8_gyp40.
ASSIGN minn9_gyp40	IF minn9_gyp40 == 0 THEN 1 ELSE minn9_gyp40.
ASSIGN minn10_gyp40	IF minn10_gyp40 == 0 THEN 1 ELSE minn10_gyp40.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_gyp40		minn1_gyp40 + minn2_gyp40 + minn3_gyp40 + minn4_gyp40 + minn5_gyp40 + minn6_gyp40 + minn7_gyp40 + minn8_gyp40 + minn9_gyp40 + minn10_gyp40.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship.
DEFINE rel_dist1_gyp40	POW(sum_dist_gyp40/minn1_gyp40,1).
DEFINE rel_dist2_gyp40	POW(sum_dist_gyp40/minn2_gyp40,1).
DEFINE rel_dist3_gyp40	POW(sum_dist_gyp40/minn3_gyp40,1).
DEFINE rel_dist4_gyp40	POW(sum_dist_gyp40/minn4_gyp40,1).
DEFINE rel_dist5_gyp40	POW(sum_dist_gyp40/minn5_gyp40,1).
DEFINE rel_dist6_gyp40	POW(sum_dist_gyp40/minn6_gyp40,1).
DEFINE rel_dist7_gyp40	POW(sum_dist_gyp40/minn7_gyp40,1).
DEFINE rel_dist8_gyp40	POW(sum_dist_gyp40/minn8_gyp40,1).
DEFINE rel_dist9_gyp40	POW(sum_dist_gyp40/minn9_gyp40,1).
DEFINE rel_dist10_gyp40	POW(sum_dist_gyp40/minn10_gyp40,1).

DEFINE sum_rel_dist_gyp40		rel_dist1_gyp40 + rel_dist2_gyp40 + rel_dist3_gyp40 + rel_dist4_gyp40 + rel_dist5_gyp40 + rel_dist6_gyp40 + rel_dist7_gyp40 + rel_dist8_gyp40 + rel_dist9_gyp40 + rel_dist10_gyp40.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_gyp40	rel_dist1_gyp40/sum_rel_dist_gyp40.
DEFINE wt2_gyp40	rel_dist2_gyp40/sum_rel_dist_gyp40.
DEFINE wt3_gyp40	rel_dist3_gyp40/sum_rel_dist_gyp40.
DEFINE wt4_gyp40	rel_dist4_gyp40/sum_rel_dist_gyp40.
DEFINE wt5_gyp40	rel_dist5_gyp40/sum_rel_dist_gyp40.
DEFINE wt6_gyp40	rel_dist6_gyp40/sum_rel_dist_gyp40.
DEFINE wt7_gyp40	rel_dist7_gyp40/sum_rel_dist_gyp40.
DEFINE wt8_gyp40	rel_dist8_gyp40/sum_rel_dist_gyp40.
DEFINE wt9_gyp40	rel_dist9_gyp40/sum_rel_dist_gyp40.
DEFINE wt10_gyp40	rel_dist10_gyp40/sum_rel_dist_gyp40.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_gyp40	ROUND(BD1_gyp40*wt1_gyp40 + BD2_gyp40*wt2_gyp40 + BD3_gyp40*wt3_gyp40 + BD4_gyp40*wt4_gyp40 + BD5_gyp40*wt5_gyp40 + BD6_gyp40*wt6_gyp40 + BD7_gyp40*wt7_gyp40 + BD8_gyp40*wt8_gyp40 + BD9_gyp40*wt9_gyp40 + BD10_gyp40*wt10_gyp40,2).

# The average bulk density of 5 nearest soils (to the target soil).
#DEFINE wt_BD_gyp40_AVE	ROUND((BD1_gyp40 + BD2_gyp40 + BD3_gyp40 + BD4_gyp40 + BD5_gyp40)/5,2).

#-------------
# The following sections are to normalize the variables to avoid bias toward one attribute or the other.
# Calculates the mean and standard deviation of the variables in the reference data set (input file).
DEFINE ave_gsand		ARRAYAVG(gsand).
DEFINE std_gsand		ARRAYSTDEV(gsand).
DEFINE ave_gsilt		ARRAYAVG(gsilt).
DEFINE std_gsilt		ARRAYSTDEV(gsilt).
DEFINE ave_gclay		ARRAYAVG(gclay).
DEFINE std_gclay		ARRAYSTDEV(gclay).
DEFINE ave_gcarbon		ARRAYAVG(gcarbon).
DEFINE std_gcarbon		ARRAYSTDEV(gcarbon).
DEFINE ave_ggyp			ARRAYAVG(c_gypl2).
DEFINE std_ggyp			ARRAYSTDEV(c_gypl2).

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_gsand		((gsand)-ave_gsand)/std_gsand.
DEFINE temp_gsilt		((gsilt)-ave_gsilt)/std_gsilt.
DEFINE temp_gclay		((gclay)-ave_gclay)/std_gclay.
DEFINE temp_gcarbon		((gcarbon)-ave_gcarbon)/std_gcarbon.
DEFINE temp_ggyp		((c_gypl2)-ave_ggyp)/std_ggyp.

DEFINE temp_sandtotal_r_gyp	((sandtotal_r)-ave_gsand)/std_gsand.
DEFINE temp_silttotal_r_gyp	((silttotal_r)-ave_gsilt)/std_gsilt.
DEFINE temp_claytotal_r_gyp	((claytotal_r)-ave_gclay)/std_gclay.
DEFINE temp_oc_r_gyp		((oc_r)-ave_gcarbon)/std_gcarbon.
DEFINE temp_gypsum_r_gyp	((gypsum_r)-ave_ggyp)/std_ggyp.

# Gets the minimum-maximum range of the temporary variables.
DEFINE range_gsand		ARRAYMAX(temp_gsand)-ARRAYMIN(temp_gsand).
DEFINE range_gsilt		ARRAYMAX(temp_gsilt)-ARRAYMIN(temp_gsilt).
DEFINE range_gclay		ARRAYMAX(temp_gclay)-ARRAYMIN(temp_gclay).
DEFINE range_gcarbon	ARRAYMAX(temp_gcarbon)-ARRAYMIN(temp_gcarbon).
DEFINE range_ggyp		ARRAYMAX(temp_ggyp)-ARRAYMIN(temp_ggyp).

# Puts the ranges of the variables into an array.
DEFINE cat_ranges_gyp	APPEND(range_gsand,APPEND(range_gsilt,APPEND(range_gclay, APPEND(range_gcarbon,range_ggyp)))).

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_gsand		temp_gsand*ARRAYMAX(cat_ranges_gyp)/range_gsand.
DEFINE trans_gsilt		temp_gsilt*ARRAYMAX(cat_ranges_gyp)/range_gsilt.
DEFINE trans_gclay		temp_gclay*ARRAYMAX(cat_ranges_gyp)/range_gclay.
DEFINE trans_gcarbon	temp_gcarbon*ARRAYMAX(cat_ranges_gyp)/range_gcarbon.
DEFINE trans_ggyp		temp_ggyp*ARRAYMAX(cat_ranges_gyp)/range_ggyp.

DEFINE trans_sandtotal_r_gyp	temp_sandtotal_r_gyp*ARRAYMAX(cat_ranges_gyp)/range_gsand.
DEFINE trans_silttotal_r_gyp	temp_silttotal_r_gyp*ARRAYMAX(cat_ranges_gyp)/range_gsilt.
DEFINE trans_claytotal_r_gyp	temp_claytotal_r_gyp*ARRAYMAX(cat_ranges_gyp)/range_gclay.
DEFINE trans_oc_r_gyp			temp_oc_r_gyp*ARRAYMAX(cat_ranges_gyp)/range_gcarbon.
DEFINE trans_gypsum_r_gyp		temp_gypsum_r_gyp*ARRAYMAX(cat_ranges_gyp)/range_ggyp.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance6	SQRT(POW(trans_sandtotal_r_gyp - trans_gsand,2)+POW(trans_silttotal_r_gyp - trans_gsilt,2)+
					POW(trans_claytotal_r_gyp - trans_gclay,2)+POW(trans_oc_r_gyp - trans_gcarbon,2)+POW(trans_gypsum_r_gyp - trans_ggyp,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_gyp	ARRAYMIN(distance6).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_gyp 		ARRAYPOSITION(distance6).
DEFINE pos1_gyp 	LOOKUP(minn1_gyp, distance6, pos_gyp).
DEFINE dist2_gyp	IF pos_gyp == pos1_gyp THEN distance6 + 1000 ELSE distance6.
DEFINE minn2_gyp	ARRAYMIN(dist2_gyp).
DEFINE pos2_gyp		LOOKUP(minn2_gyp, dist2_gyp, pos_gyp).
DEFINE dist3_gyp	IF pos_gyp == pos2_gyp THEN dist2_gyp + 1000 ELSE dist2_gyp.
DEFINE minn3_gyp	ARRAYMIN(dist3_gyp).
DEFINE pos3_gyp		LOOKUP(minn3_gyp, dist3_gyp, pos_gyp).
DEFINE dist4_gyp	IF pos_gyp == pos3_gyp THEN dist3_gyp + 1000 ELSE dist3_gyp.
DEFINE minn4_gyp	ARRAYMIN(dist4_gyp).
DEFINE pos4_gyp		LOOKUP(minn4_gyp, dist4_gyp, pos_gyp).
DEFINE dist5_gyp	IF pos_gyp == pos4_gyp THEN dist4_gyp + 1000 ELSE dist4_gyp.
DEFINE minn5_gyp	ARRAYMIN(dist5_gyp).
DEFINE pos5_gyp		LOOKUP(minn5_gyp, dist5_gyp, pos_gyp).
DEFINE dist6_gyp	IF pos_gyp == pos5_gyp THEN dist5_gyp + 1000 ELSE dist5_gyp.
DEFINE minn6_gyp	ARRAYMIN(dist6_gyp).
DEFINE pos6_gyp		LOOKUP(minn6_gyp, dist6_gyp, pos_gyp).
DEFINE dist7_gyp	IF pos_gyp == pos6_gyp THEN dist6_gyp + 1000 ELSE dist6_gyp.
DEFINE minn7_gyp	ARRAYMIN(dist7_gyp).
DEFINE pos7_gyp		LOOKUP(minn7_gyp, dist7_gyp, pos_gyp).
DEFINE dist8_gyp	IF pos_gyp == pos7_gyp THEN dist7_gyp + 1000 ELSE dist7_gyp.
DEFINE minn8_gyp	ARRAYMIN(dist8_gyp).
DEFINE pos8_gyp		LOOKUP(minn8_gyp, dist8_gyp, pos_gyp).
DEFINE dist9_gyp	IF pos_gyp == pos8_gyp THEN dist8_gyp + 1000 ELSE dist8_gyp.
DEFINE minn9_gyp	ARRAYMIN(dist9_gyp).
DEFINE pos9_gyp		LOOKUP(minn9_gyp, dist9_gyp, pos_gyp).
DEFINE dist10_gyp	IF pos_gyp == pos9_gyp THEN dist9_gyp + 1000 ELSE dist9_gyp.
DEFINE minn10_gyp	ARRAYMIN(dist10_gyp).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_gyp		LOOKUP(minn1_gyp, distance6, g_db_13b).
ASSIGN BD1_gyp		ARRAYMIN(BD1_gyp).
DEFINE BD2_gyp		LOOKUP(minn2_gyp, dist2_gyp, g_db_13b).
ASSIGN BD2_gyp		ARRAYMIN(BD2_gyp).
DEFINE BD3_gyp		LOOKUP(minn3_gyp, dist3_gyp, g_db_13b).
ASSIGN BD3_gyp		ARRAYMIN(BD3_gyp).
DEFINE BD4_gyp		LOOKUP(minn4_gyp, dist4_gyp, g_db_13b).
ASSIGN BD4_gyp		ARRAYMIN(BD4_gyp).
DEFINE BD5_gyp		LOOKUP(minn5_gyp, dist5_gyp, g_db_13b).
ASSIGN BD5_gyp		ARRAYMIN(BD5_gyp).
DEFINE BD6_gyp		LOOKUP(minn6_gyp, dist6_gyp, g_db_13b).
ASSIGN BD6_gyp		ARRAYMIN(BD6_gyp).
DEFINE BD7_gyp		LOOKUP(minn7_gyp, dist7_gyp, g_db_13b).
ASSIGN BD7_gyp		ARRAYMIN(BD7_gyp).
DEFINE BD8_gyp		LOOKUP(minn8_gyp, dist8_gyp, g_db_13b).
ASSIGN BD8_gyp		ARRAYMIN(BD8_gyp).
DEFINE BD9_gyp		LOOKUP(minn9_gyp, dist9_gyp, g_db_13b).
ASSIGN BD9_gyp		ARRAYMIN(BD9_gyp).
DEFINE BD10_gyp		LOOKUP(minn10_gyp, dist10_gyp, g_db_13b).
ASSIGN BD10_gyp		ARRAYMIN(BD10_gyp).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_gyp	IF minn1_gyp == 0 THEN 1 ELSE minn1_gyp.
ASSIGN minn2_gyp	IF minn2_gyp == 0 THEN 1 ELSE minn2_gyp.
ASSIGN minn3_gyp	IF minn3_gyp == 0 THEN 1 ELSE minn3_gyp.
ASSIGN minn4_gyp	IF minn4_gyp == 0 THEN 1 ELSE minn4_gyp.
ASSIGN minn5_gyp	IF minn5_gyp == 0 THEN 1 ELSE minn5_gyp.
ASSIGN minn6_gyp	IF minn6_gyp == 0 THEN 1 ELSE minn6_gyp.
ASSIGN minn7_gyp	IF minn7_gyp == 0 THEN 1 ELSE minn7_gyp.
ASSIGN minn8_gyp	IF minn8_gyp == 0 THEN 1 ELSE minn8_gyp.
ASSIGN minn9_gyp	IF minn9_gyp == 0 THEN 1 ELSE minn9_gyp.
ASSIGN minn10_gyp	IF minn10_gyp == 0 THEN 1 ELSE minn10_gyp.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_gyp		minn1_gyp + minn2_gyp + minn3_gyp + minn4_gyp + minn5_gyp + minn6_gyp + minn7_gyp + minn8_gyp + minn9_gyp + minn10_gyp.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of  is used, which assumes a simple inverse relationship.
DEFINE rel_dist1_gyp	POW(sum_dist_gyp/minn1_gyp,1).
DEFINE rel_dist2_gyp	POW(sum_dist_gyp/minn2_gyp,1).
DEFINE rel_dist3_gyp	POW(sum_dist_gyp/minn3_gyp,1).
DEFINE rel_dist4_gyp	POW(sum_dist_gyp/minn4_gyp,1).
DEFINE rel_dist5_gyp	POW(sum_dist_gyp/minn5_gyp,1).
DEFINE rel_dist6_gyp	POW(sum_dist_gyp/minn6_gyp,1).
DEFINE rel_dist7_gyp	POW(sum_dist_gyp/minn7_gyp,1).
DEFINE rel_dist8_gyp	POW(sum_dist_gyp/minn8_gyp,1).
DEFINE rel_dist9_gyp	POW(sum_dist_gyp/minn9_gyp,1).
DEFINE rel_dist10_gyp	POW(sum_dist_gyp/minn10_gyp,1).

DEFINE sum_rel_dist_gyp		rel_dist1_gyp + rel_dist2_gyp + rel_dist3_gyp + rel_dist4_gyp + rel_dist5_gyp + rel_dist6_gyp + rel_dist7_gyp + rel_dist8_gyp + rel_dist9_gyp + rel_dist10_gyp.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_gyp	rel_dist1_gyp/sum_rel_dist_gyp.
DEFINE wt2_gyp	rel_dist2_gyp/sum_rel_dist_gyp.
DEFINE wt3_gyp	rel_dist3_gyp/sum_rel_dist_gyp.
DEFINE wt4_gyp	rel_dist4_gyp/sum_rel_dist_gyp.
DEFINE wt5_gyp	rel_dist5_gyp/sum_rel_dist_gyp.
DEFINE wt6_gyp	rel_dist6_gyp/sum_rel_dist_gyp.
DEFINE wt7_gyp  rel_dist7_gyp/sum_rel_dist_gyp.
DEFINE wt8_gyp	rel_dist8_gyp/sum_rel_dist_gyp.
DEFINE wt9_gyp	rel_dist9_gyp/sum_rel_dist_gyp.
DEFINE wt10_gyp	rel_dist10_gyp/sum_rel_dist_gyp.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_gyp	ROUND(BD1_gyp*wt1_gyp + BD2_gyp*wt2_gyp + BD3_gyp*wt3_gyp + BD4_gyp*wt4_gyp + BD5_gyp*wt5_gyp + BD6_gyp*wt6_gyp + BD7_gyp*wt7_gyp + BD8_gyp*wt8_gyp + BD9_gyp*wt9_gyp + BD10_gyp*wt10_gyp,2).			

DEFINE wt_BD_gypsum		IF gypsum_r > 40 THEN wt_BD_gyp40 ELSE wt_BD_gyp.

# The average bulk density of 8 nearest soils (to the target soil).
#DEFINE wt_BD_gyp_AVE	ROUND((BD1_gyp + BD2_gyp + BD3_gyp + BD4_gyp + BD5_gyp + BD6_gyp + BD7_gyp + BD8_gyp)/8,2).			
#DEFINE wt_BD_gypsum_AVE		IF gypsum_r > 40 THEN wt_BD_gyp40_AVE ELSE wt_BD_gyp_AVE.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "gypsum BD %s" wt_BD_gypsum.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s" BD1_gyp40, BD2_gyp40, BD3_gyp40, BD4_gyp40, BD5_gyp40.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s, %s, %s, %s" BD1_gyp, BD2_gyp, BD3_gyp, BD4_gyp, BD5_gyp, BD6_gyp, BD7_gyp, BD8_gyp.

# MINERAL SOILS-------------------------------------------------------------
# Read the table of bulk densities and other properties of soils that are mineral (<20% OC) and not sandy (<70% sand).
INPUT mhzn_top numeric, mhzn_bot numeric, mhzn_desgn char, mhzn_master char, msand numeric, msilt numeric, 
	mclay numeric, m_oc numeric, m_db_13b numeric, mw3cld numeric, mw15l2 numeric
	FILE "bd_mineral"
	AGGREGATE COLUMN mhzn_top none, mhzn_bot none, mhzn_desgn none, mhzn_master none, msand none, msilt none, 
	mclay none, m_oc none, m_db_13b none, mw3cld none, mw15l2 none.

# 811 rows of E horizon reference data was added to the bd_mineral input dataset. Added 11/13/2018
DEFINE mhzn_top2_E		5,6,48,4,15,3,7,6,3,7,4,28,3,11,10,0,5,4,39,3,6,5,5,17,17,6,0,8,33,33,3,5,16,3,0,4,0,17,14,0,5,20,3,3,5,6,0,19,6,20,29,29,0,1,12,8,10,17,0,23,7,10,21,20,33,4,18,25,3,8,13,5,22,3,0,8,8,0,8,9,8,18,14,18,10,17,0,37,12,0,30,0,0,5,5,46,10,13,32,2,12,8,5,50,14,3,5,13,5,8,19,5,0,2,44,10,2,46,5,4,4,20,31,10,8,7,5,26,3,13,48,0,0,27,15,10,0,8,15,20,18,10,0,15,20,15,13,8,14,20,25,46,5,11,5,24,20,0,13,11,15,17,5,7,6,5,22,133,25,7,0,10,0,15,19,13,0,7,12,24,5,10,7,17,10,7,5,10,58,9,18,18,6,13,18,0,25,9,6,0,14,7,18,13,18,7,0,8,13,5,30,28,0,10,17,5,0,28,8,3,5,9,10,9,19,0,30,38,7,8,18,20,3,45,12,0,5,10,22,18,5,8,15,32,10,3,55,18,23,15,4,22,3,13,30,15,13,5,10,0,28,9,22,36,8,22,10,15,25,8,43,3,15,25,10,22,29,18,20,8,18,3,7,15,0,30,13,14,25,7,10,5,15,5,55,20,15,7,13,20,8,23,18,5,9,8,3,10,22,56,7,35,14,63,7,15,23,6,3,11,50,11,0,18,5,19,13,20,8,8,20,42,9,14,8,50,10,48,35,14,48,15,43,9,43,16,41,13,51,22,5,0,16,8,11,27,41,10,19,8,5,12,41,25,13,19,3,30,8,10,14,8,23,30,18,3,17,8,5,11,27,61,43,8,9,19,11,43,9,36,25,15,5,13,10,23,27,8,9,8,13,20,5,10,48,25,12,23,24,15,70,13,6,15,38,44,8,12,41,18,18,11,61,26,20,9,30,27,20,20,9,8,18,20,7,20,13,22,35,9,58,16,8,15,14,24,38,23,5,25,20,40,30,20,14,20,15,41,15,27,17,29,15,66,15,30,12,46,13,54,20,13,6,15,33,13,38,20,30,42,9,22,7,26,17,8,53,15,70,13,18,30,20,79,15,38,22,49,29,13,47,16,9,10,20,28,84,23,24,38,46,16,8,23,76,8,31,14,21,34,18,20,15,23,8,28,22,23,20,51,33,23,20,25,30,20,10,15,25,82,33,31,59,36,104,18,33,19,59,64,71,33,23,40,48,69,18,53,12,22,25,20,28,19,32,43,70,45,34,12,12,53,28,33,43,25,33,5,28,29,10,44,15,13,46,5,30,48,29,53,46,25,51,97,61,25,18,24,19,18,32,39,23,10,33,47,57,32,43,56,20,23,8,53,34,20,33,71,61,27,55,17,50,16,28,25,15,23,37,10,23,36,41,42,20,127,37,13,19,25,91,31,39,5,24,16,4,25,41,45,26,84,24,37,50,29,20,42,61,14,26,82,20,26,33,41,20,115,17,45,51,70,66,46,31,38,58,34,46,68,35,46,10,43,29,69,74,71,9,35,44,12,35,48,45,41,19,66,71,30,17,88,25,41,96,96,13,64,22,36,18,30,100,64,19,41,54,48,17,43,55,16,47,28,58,100,33,26,164,43,77,56,53,73,48,9,23,55,83,145,51,50,46,64,107,68,78,192,48,24,53,43,51,46,65,43,25,48,56,101,34,40,53,9,47,81,0,79,63,47,48,68,40,73,20,63,27,79,107,99,94,142,158,89,119,99,81,56,147,46,146,69,86,125,39,147,176,168,142,115,91,149,142,58,153,55,165,61,105,98,134.
DEFINE mhzn_bot2_E		14,9,82,16,28,8,12,12,8,17,9,45,9,17,12,4,13,9,42,7,14,10,12,35,35,10,6,20,61,61,9,8,24,18,5,8,10,25,21,4,18,34,11,11,20,27,25,27,12,30,65,65,20,19,18,13,18,33,8,29,12,18,26,30,46,7,24,36,8,15,16,22,29,9,10,20,17,6,25,21,18,30,37,22,20,33,12,58,25,5,43,13,13,16,15,63,24,15,39,10,28,23,19,60,34,15,10,25,18,21,46,25,18,17,60,22,17,75,9,20,9,37,33,23,18,24,18,41,10,19,53,10,13,42,25,23,20,26,33,36,35,22,13,48,30,30,18,23,31,36,43,58,11,29,13,42,30,3,22,18,28,53,10,18,12,27,29,141,54,22,5,35,30,30,32,25,2,15,21,38,15,20,25,33,29,19,20,26,79,19,22,28,25,33,34,23,79,24,22,5,17,34,31,25,35,17,10,14,23,13,51,48,23,19,35,15,5,36,19,22,13,18,22,18,38,20,48,45,21,20,48,32,19,81,23,18,15,26,29,36,10,15,27,44,38,18,75,36,36,25,27,41,10,25,61,28,26,10,23,15,48,22,30,50,13,32,36,50,48,17,63,15,19,42,25,41,43,30,41,16,25,18,18,40,18,46,36,22,36,18,25,18,26,23,74,30,26,17,23,28,15,39,33,23,25,15,10,20,32,94,13,63,19,78,25,30,31,16,18,18,70,18,18,26,14,37,25,33,26,25,36,56,44,24,30,73,18,59,48,27,77,27,61,24,57,30,56,25,61,40,23,23,32,25,26,36,65,25,32,32,23,30,53,33,18,26,8,48,28,23,31,18,35,46,38,8,30,28,20,24,43,81,76,22,29,29,32,53,35,46,48,28,23,30,27,33,47,41,17,28,22,41,20,23,76,38,27,36,63,28,84,33,11,25,61,62,46,17,75,60,35,42,84,51,38,26,43,66,38,31,19,21,33,50,28,26,20,35,56,38,73,32,18,36,36,37,48,36,14,40,32,53,44,33,37,34,31,51,33,42,32,46,43,90,31,53,29,90,36,72,35,42,18,51,52,28,76,28,59,63,33,37,28,46,23,20,69,28,142,38,36,44,43,99,29,64,33,73,47,28,58,25,19,53,40,41,114,35,36,49,59,33,10,45,117,29,41,45,44,48,48,33,31,40,18,46,44,46,38,64,40,32,41,43,50,61,23,29,51,93,44,42,78,50,118,38,45,46,97,82,79,50,30,63,76,84,33,63,71,41,50,40,78,41,48,61,108,85,68,30,48,79,35,46,53,58,38,13,50,58,26,55,29,34,62,40,48,66,44,79,66,35,76,130,66,41,48,31,35,30,45,54,48,15,49,59,82,78,56,83,47,51,23,81,54,80,69,97,76,48,72,47,73,57,48,50,30,41,67,38,45,61,58,60,36,187,61,57,50,58,127,55,86,13,49,35,24,43,68,64,45,109,53,77,69,38,43,65,79,48,56,107,35,61,65,68,41,152,49,56,80,142,127,71,42,51,84,64,70,94,83,79,33,81,46,86,90,117,24,56,72,48,48,82,78,71,34,109,100,48,52,116,43,56,134,134,43,114,56,58,58,58,139,89,47,61,97,76,28,76,79,53,78,61,83,111,45,65,203,57,117,86,138,81,105,40,45,65,95,203,99,94,68,121,152,91,119,203,64,55,83,47,58,91,103,89,61,99,80,138,60,61,74,40,61,89,5,119,115,69,81,91,69,100,53,74,55,123,117,145,137,164,203,142,150,159,108,101,180,71,203,98,131,187,102,203,203,200,168,142,105,176,180,112,212,71,200,117,118,124,142.
DEFINE mhzn_desgn2_E	"E/Bs","EB","E/Bs","E","E2","E","E","E","E","E","E","E/B","E","E","E","E","E","E","E","E1","E","E","E / B","E","E","E","E","E1","Eg","Eg","E","E","E","E","E","E","E","EB","E","EB","E","E","E","E","E","E","E","E","E","E2","Eg","Eg","E","E","E","E","E","E","E1","E","E2","E","Eb/Bsh","EB","E2","E","E","E","E","E2","E","E","EA","E","E","E","E","E","E1","E/A","E1","E","E","E","E","E","E","E","E","E1","EB","E1","E","E / A","E","E","E","E","E / B","E","E","E","E","E","E","E","E","E","EB","E","E1","E","E","E","E","Eg","E","E2","E","E","E","E","E","E","E","E","E","E","E","E","Eb","E","E","E / B","E/B","E","E","E","E","E/B","E","E","E","E3","E","E","E","EBw","EBt","E","E","E","E","E","E","EB","E & Bt","E","E","E","E","E/Bt","E","E","E","E","EA","E","E2","E","E1","EBt (E part)","E","E","E","E","E","E","EA","EB","E2","E","E","E","Eg","E","E2","E","EB","E","E","E","Eg","E1","E2","E1","E","EB","E","E","E","E","E","E/B","E","E","E","E","EB","E","E","E","E","E","E","E","E","E","E","EB","E","E","E","E","E2","E","Eg","E","E","E","E1","E","E","E1","E1","E1","E","E","EA","E","E","E","E","Eg","E","E","E","E / B","E","E/B1","E","E","E","E / A","EB","E","E1","Eg","E / Bt","E","E","E","E","E1","E","E","E/B","E","EB","E","E2","E/B","E","E","E","EBg","E","Eg1","EB","E2","E","E","E","E","E","E","E2","EB","E","E","E","E","E","E","EB","E","E","E","E","E/B","E","EB","E","E","E","E","E2","Eg1","E","E / Bt","E","E","E","E/Bx","E","E / B","E","E1","E1","E","E2","Ep","E","E","E","Eg","E","E","E","E","E","Ek","E/Bt","E","E","EBt","E","E / Bt","E/Bt","E","EBg","E","EBtc","E","EB1","EB","E","E","E","E/A","E","E","E","E","E","E","E","E / B","E","Eg","E","E","EB","E/B2","Eg","E","Ey","Eg2","E","E","E","E","E2","E","EC","E","E","EB","E","E","Eg","E / B","E","Eg","E","EBt","E","E","E","E","EBt","E","E","E","E","Eg","E","E","E","E","E","E","E","E","E/B","E / B","E","E2","E","E","E1","E","E","E","E","E","E","Eg","E/Bt","E","E","E","E","E2","E","E","E / B","E","E","E","E","E","Ex","Ep","E","E","EA","E","E3","EBg","E","E","E","E","E","EB","E","E / B","E","E / B","EG1","E","EB","E / Bt","E","EA","EBt","EC","E","E / B","EB","E1","E/B","E/Bt","E","E","E","E/B","E","E / B","E1","E","E","E","E","Eg","E / B","E","Eg","E","E","Eg","E","E1","Eg","E","E","Eg","E/Bt","E","EBt","E","E / Bt1","E","E","E/B","EBg","E","E","E","E","E2","E1","E","E","E","E / B","E","E","E","E","E","E2","E / B","E/2Bbsst1","E","EB","E1","E/B","E","E / B","Eg2","E","E2","E","E / Bt","E/Btg","E/Bt","E/B","E3","E","Eg","E1","E1","E2","E/B","E","E","E / B","E5","EG2","E","EA","E/Bt","E/Bt","E1","EG3","EBg","E/Bg","E4","E","EB","E","E1","E2","E/Bt","E2","E / Bt","Ep","Eg","E","E","E&Bt","E1","EB","E/Bt","E/Btx","E/Bt","E2","E","E","E/Bx","E","E / B","E","E","E","E","E1","E1","E","E","E","E","E2","E","E","E","EB","E / Bt","E / Bt","E/Bt","EB","E part","E","E","E1","E","E","E2","Eg","EG3","E1","E","E","E","E2","E/Btg","E/Bt","EB","E1","E / B","E","E / Bx","E1","E/Bt","E","E","E/Bt (E)","E","E","E1","E2","E","E / Bt","E","E1","E / B","E","E","E","E/Bt (B)","EBtg","E","E","E/B","E","E1","E/Btg","E","E / Bt3","E/Bt1","E/Bt","E","E","E","E","E/B","E2","E/Bt","E","E2","E / Bt","E/Bt1","E","E","E1","E","E/B","E","E","E/Bt2","E","EB","E","E2","E","E / Btv","E","E2","E","E&Bt","E/Bx","E/Bw1","Eg","E2","Eb","E/Bt1","E2","E3","E / Bt1","EB","E","E/Bx","EB","E/Bt","E3","E/Bw2","E","E","EB","E","E2","E/Bt1","E&Bt1","E/Bt1","E1","E/B","E/Bt2","E2","E","E/B","Eg","E / B","E/Btx","E/Btx","E1","E/B","E1","Eg","E1","E / Bt1","E/Bt2","E&B","E1","E","E2","E/Bt","EB","E/B","E/Bt2","E","E2","E","E2","E4","EB","E1","E/Bt","E2","E/Bt2","E2","E& Bt","E","E2","E1","E","Ex","E/Bt","E&Bt","E1","E&Bt1","E1","E/Bt2","E / Bt2","E3","E&Bt1","E&Bt2","E2","E","E","E2","E","E","E2","E/Bt1","E1","E/Bt1","E","E3","E2","E2","E2","E","E2","E","Eg","E/Bt3","E1","E2","E3","E2","E","E3","E1","E2","E1","E / Bt","Eb","E2","E&Bt2","E3","E","E/Bt2","E&Bt2","E/Bt2","E4","E2","E/B","E/B","E&Bt3","E3","EB","E/Bt","E1","E&Bt3","EB2","E/Bt4","E/Bt3","E2","E4","EB1","E/B","E2","E/Bt","E2","E/Bt","E / B1","E","E4","E".
DEFINE mhzn_master2_E	"E/B","EB","E","E","E","E","E","E","E","E","E","E/B","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","EB","E","EB","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","EB","E","E","E","E","E","E","E","E","EA","E","E","E","E","E","E","E/A","E","E","E","E","E","E","E","E","E","E","EB","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","EB","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E/B","E","E","E","E","E/B","E","E","E","E","E","E","E","EB","E","E","E","E","E","E","E","EB","E","E","E","E","E","E","E","E","E","E","EA","E","E","E","E","EB","E","E","E","E","E","E","EA","EB","E","E","E","E","E","E","E","E","EB","E","E","E","E","E","E","E","E","EB","E","E","E","E","E","E/B","E","E","E","E","EB","E","E","E","E","E","E","E","E","E","E","EB","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","EA","E","E","E","E","E","E","E","E","E","E","E/B","E","E","E","E","EB","E","E","E","E","E","E","E","E","E","E","E","E/B","E","EB","E","E","E/B","E","E","E","EB","E","E","EB","E","E","E","E","E","E","E","E","EB","E","E","E","E","E","E","EB","E","E","E","E","E/B","E","EB","E","E","E","E","E","E","E","E","E","E","E","E/B","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E/B","E","E","EB","E","E","E/B","E","EB","E","EB","E","EB","EB","E","E","E","E/A","E","E","E","E","E","E","E","E","E","E","E","E","EB","E/B","E","E","E","E","E","E","E","E","E","E","EC","E","E","EB","E","E","E","E","E","E","E","EB","E","E","E","E","EB","E","E","E","E","E","E","E","E","E","E","E","E","E","E/B","E","E","E","E","E","E","E","E","E","E","E","E","E","E/B","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","EA","E","E","EB","E","E","E","E","E","EB","E","E","E","E","E","E","EB","E","E","EA","EB","EC","E","E","EB","E","E/B","E","E","E","E","E/B","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E/B","E","EB","E","E","E","E","E/B","EB","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E/B","E","EB","E","E/B","E","E","E","E","E","E","E","E","E/B","E/B","E","E","E","E","E","E","E/B","E","E","E","E","E","E","EA","E/B","E/B","E","E","EB","E/B","E","E","EB","E","E","E","E/B","E","E","E","E","E","E","E&B","E","EB","E/B","E","E","E","E","E","E/B","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E","EB","E","E","E/B","EB","E","E","E","E","E","E","E","E","E","E","E","E","E","E","E/B","E/B","EB","E","E","E","E","E","E/B","E","E","E/B","E","E","E","E","E","E","E","E","E","E","E","E","E/B","EB","E","E","E/B","E","E","E","E","E","E/B","E/B","E","E","E","E","E/B","E","E/B","E","E","E","E/B","E","E","E","E","E","E","E","E/B","E","EB","E","E","E","E","E","E","E","E&B","E/B","E","E","E","E","E/B","E","E","E","E","E","E/B","EB","E","E","E","E","E","EB","E","E","E/B","E&B","E/B","E","E/B","E/B","E","E","E/B","E","E","E/B","E/B","E","E/B","E","E","E","E","E/B","E&B","E","E","E","E","EB","E/B","E/B","E","E","E","E","E","EB","E","E/B","E","E/B","E","E","E","E","E","E","E","E/B","E","E","E&B","E","E/B","E","E","E&B","E&B","E","E","E","E","E","E","E","E/B","E","E/B","E","E","E","E","E","E","E","E","E","E/B","E","E","E","E","E","E","E","E","E","E","E","E","E&B","E","E","E/B","E&B","E/B","E","E","E/B","E/B","E&B","E","EB","E","E","E&B","EB","E/B","E/B","E","E","EB","E/B","E","E","E","E/B","E","E","E","E".
DEFINE msand2_E		22.3,31.1,45.2,83.2,25.4,14.9,30.4,23.3,35.4,11.1,54,27.6,23.6,14.7,65.6,8,39.5,17.3,73,88.3,60,53.7,31,57.1,56.5,57.4,17.4,30.3,1.4,0.6,84.5,68.7,74.3,32.4,50.6,42.1,9.5,11.5,16.3,37.2,7.8,75.3,78.1,77.6,33.9,54.5,24.3,37.2,52.9,27.5,3.7,2.8,53.4,31.2,69,28.5,62.9,19.3,16.4,4.6,92.7,46.1,33.6,18.7,6.7,34.9,73,71.6,65.6,15.5,87.6,52.4,7.4,24.7,47,13.9,78.3,15.7,54.8,41.8,17.9,13.8,26.4,32,53.3,18.6,50,10.5,58.9,31.8,18.5,53.4,38.4,35.9,53.1,52.6,57.8,69.1,56.4,7.8,52.4,41.5,9.9,4.9,29.8,16.3,61.4,61.2,9.5,57.3,46.1,15.1,45.9,53.6,30.4,15.4,72.2,46.8,31,20.1,95.1,21.5,4.4,35.3,36.1,29.9,41.2,20.5,34.1,69.7,67,59.4,43.2,16.6,34.1,58.8,65.4,46.6,28.3,1.1,3.7,20.5,31.4,15.7,10.2,1.7,84.5,35,12.4,6.6,0.9,50.9,19.9,2.6,1.2,39.1,7.5,69.4,13.8,91.2,20.3,30.4,49.6,40.9,37.5,45.1,7.9,3.5,56.8,48.5,25.6,8.2,24.7,5.8,6.7,24.3,76.2,74.1,35.3,25,24.8,79.2,47.1,27.2,5.6,43.6,27.3,8.7,7.6,62.5,53.2,4.9,6.1,4.2,18.2,73.8,36.7,28.2,26.8,66.3,83,33,27.4,19.9,11.4,79.1,45.9,37.5,35.7,26.3,20.8,53.5,62.8,56.3,3.1,14.6,26.5,18.8,12.4,5.9,87.9,55.9,40.1,6.4,67.1,52.1,25.1,19.6,18.2,11.2,51.6,7.4,2.7,45.3,11.2,53.8,45.1,38.7,7,4.9,1.7,33.7,23.2,22.7,20.3,1.6,83.4,48.6,46.5,38.5,8.5,0.8,41.2,37.2,32.9,22.1,9.4,78.6,47.2,61.9,14.6,44.7,36.8,20.5,60.1,8.1,2.7,66.6,57,45.3,32.6,18.7,79.3,55,48.8,16.3,11.3,9.9,9.7,96.1,27.9,4.3,1.5,83.8,74.6,62.9,59,53.3,39.5,29.5,15.1,3.7,70.9,47.6,32.6,20.1,76.4,63.6,50.5,24.3,21.3,27.6,25.3,81.9,63.4,35.7,22.9,29.2,14.6,76.6,60.8,30.9,71.3,59.1,51.3,39.9,16,3.4,54.7,33.2,19.2,9.4,73.2,62.4,56.5,10.7,6.9,3.9,36.6,13,85.3,63.7,60.6,46.7,17.3,13,30.4,21.2,10,64.2,44.5,25.1,4.8,63.8,53.8,44.9,7.6,61.4,11.8,8.4,4.2,90.9,39.2,91.4,80.7,65.9,19.1,5,1.3,33.5,63.4,54.7,28.5,28.1,24.6,73.2,66.5,9.2,69.8,68.6,64.9,58,12.8,8.8,3.5,54.6,16.9,7,73.6,65.5,60,53.4,33,26.1,54.1,43.4,43.3,41.2,29.2,19.9,12.5,76.1,75.9,51.6,34.4,14.5,8,41.8,83.8,65.4,50.8,49.8,42.9,35.4,28,12.9,81.2,76.8,55.8,21.9,91.9,54.8,44.9,42.1,31,22.2,51.6,47.4,38.3,35.7,19.6,61,40.9,10.6,62.4,56.9,50,47.7,2.7,1.1,68.7,59.4,53.1,49.5,46.1,44.2,35.7,21.5,12.1,11.3,6.8,4.4,85.1,73.1,73,68.2,66.3,58.9,44.4,42.5,17.1,8,72.7,65.1,53,49.2,46.9,8.6,75.2,74.6,74,66.1,64.9,49.3,48.5,42.2,42,30,20.1,9.8,92.4,77.8,70.4,64.2,63.7,52.6,44.1,36.2,12.4,7.1,6.6,92.6,91.9,83.7,82.8,71.9,59.9,47.1,42.7,33.9,25,7,92,82,69.5,54.9,49.4,42.8,42.5,32.9,8.7,2.8,69.6,67.8,60.7,53.7,36.2,13.3,0.6,74.1,51.2,51.2,50.3,8.9,5.1,74.8,60.8,59.9,45.8,37.7,24.7,24.6,82.3,62.8,56.5,26.5,22.6,21.5,11.8,10,4.9,92,85.1,82,65.9,64.2,58.2,37.4,16.4,9.1,7.3,79.4,69.9,69.3,59.9,39.8,19.6,16.1,11.3,9.2,4,2.6,77.6,75,71.1,66,61.2,44.7,41.2,18.7,74.3,73,64.2,58.2,42.8,13.8,9.9,6.7,93.6,90.6,85.9,83.4,73.5,72.7,67.7,61.7,6.3,88,84.2,80.7,80.6,73.8,67.4,65.6,65,62,57.6,50.9,50.6,36.5,27.4,22.7,11.4,11,3.8,2.9,90.4,67,43.7,20,16.6,16.4,86.4,83.2,68.4,60.3,46.7,28.3,20.4,10.6,91,86.6,79.7,75.4,67.6,60.2,59.5,58.2,31.3,31,89.3,87,86.1,79.8,68.6,67.1,64.2,64.1,63.3,57.5,38.6,26.3,16.6,85.9,82.1,64.4,59.6,46.9,30.1,94.8,94.3,93,84.2,81.1,76.6,71.3,67.2,57.7,56.8,36,93.5,92.7,92.4,90.1,82.2,79.2,64.9,61.6,55.5,91.1,88.2,85.7,82.3,80.5,79.7,78.5,77.2,70.4,66.6,63.7,62.2,55.5,54.1,51.2,42.3,37.4,94.4,91.1,80.7,74.8,71.4,67.1,64.9,63.9,63,58.2,52.9,46.8,45.3,20.7,95.8,94.4,92.3,92.3,92.3,91.1,91.1,90.7,88,62,57.8,53.1,51.8,27.1,18.6,18.1,96.1,91.5,90.4,90.1,90,89.9,85.7,80.8,79.5,73.2,69.3,58.3,54,0.6,95.3,88.4,84.8,83.7,82.4,80.6,61.2,96.5,95.2,94.9,91.3,89.9,89.4,88.2,84,82.8,80.4,78.1,70.4,42.2,98.3,96.4,96,94.5,93.9,93.6,92.8,91.3,91.2,88.6,75.2,61.1,15.4,95.3,95.2,94.3,93.4,93.1,91,90.8,89.4,86.9,84,81.5,77.2,75.6,35.6,95.5,95.4,90.9,89.9,89.8,88.8,86.6,83.2,75,74.4,62.4,54.3,98.2,96.2,95.9,95.7,95.3,95.3,93.5,92,90.9,89.9,0.7,93.9,92.4,92.3,91.9,91.7,91.2,83.2,97,95.7,95.6,94,93.5,92.2,91.2,90.3,73,94.1,93.3,83.5,92.6,78.
DEFINE msilt2_E		70.5,56.1,49.8,15.2,57.6,75.4,58,74.7,55.7,75.8,41.9,69.5,54.5,79.2,31.2,66.5,48.8,80.3,23.4,12.3,36.3,44.1,44.4,37.7,37.2,31.4,50.9,61.1,68.8,63.9,14.8,27.6,22.8,57.5,47.4,50.6,63.7,56.1,75.1,35,23.2,23.1,20.5,20.5,43.2,30.7,49.8,60,33.7,63,53.6,55.2,31.9,50.4,30.2,65.5,29.4,63.2,69.5,66.5,7.7,37.7,60.9,50.7,71.5,58.1,24.9,24.6,31.1,69.5,11.5,36.5,71.4,55.3,43,61,19.4,61.6,30.4,39.2,61,49.5,61.5,63.5,32.4,62.7,37.6,67.6,33.7,45.9,48.6,36.6,51.2,55.5,24.1,41.7,38.5,28.9,31.6,59.4,38.5,47,79,56.8,50.1,55,35,29.5,79,32.8,39,60.9,41.7,37.2,41,53.2,24,38,65.3,52.9,3.5,51.5,65.2,57.7,42.3,58.6,47.4,57.9,51,27.1,19.6,32.5,43.5,45.2,27.6,36.8,25.7,37.4,51.1,84.4,79.5,66,60.9,70.1,64.7,79.2,14.6,52.7,38.7,72.4,71.7,30.8,57.5,76.2,59.4,45.4,62.1,27.4,41,8.5,66,51.5,48.9,49.6,57.6,41.3,72.1,71,28.6,42.6,61.1,76.2,61.9,68.9,69.8,71.5,22.9,24,51.5,44.6,61.4,16.1,33.5,59.8,85.2,48.9,54,76.8,74.9,28,43.5,72,84.4,70.1,59.8,21.3,51.5,48.4,61.6,32.1,16.5,29,41.4,25.1,77.2,8.2,42.3,45.8,33.2,60.5,67.3,26,28.4,43.2,69.3,62.1,53.4,52.4,73,81.1,10.5,40.9,35.6,77.2,24.5,37.9,8.8,73.2,70.6,73.6,43.3,72.9,76.9,41.7,76.8,39,40.1,48.4,68,76.9,85.9,53.1,66.5,56,70.8,84,9.1,40.4,42.1,41.6,77.1,75.6,48.5,52.1,51.1,70.6,77,16,37.7,34.2,62.4,45.9,50.5,48.1,38.4,65.1,82.8,32.9,26.6,47.4,48.7,60.8,19.9,37.3,40.6,54.2,64.5,68,74.9,3.7,65.7,81,86,8,22.2,30.3,31.4,33.8,45.8,60.9,71.4,81.7,19.7,42.6,42.6,60.2,19.8,32.5,32.6,50.8,71.2,50.1,63.4,15.9,30.3,53.5,68.6,58.3,59.6,23.2,32.5,50.6,27.1,37.9,43.6,36.5,56.3,85.3,38.8,51.3,47.9,69.4,21.7,36,23.6,66.3,77,75.8,52.6,74.4,10.6,21.8,28.6,46.7,70.5,72,62.9,54.6,65.6,24.9,13.5,68.5,74.2,34.6,30.4,45,66,31.3,75.1,82.4,83.2,8,54.7,6.4,15.7,17.4,60.4,83.1,80.4,55.6,31.8,38.5,48.6,35,61.5,23.4,10.4,67.1,23.8,21.5,27.8,35.8,75.4,66.8,77.1,39.7,64.9,75.3,25.3,25.1,26.4,38.4,54.4,60.6,39.8,45,50.2,47.9,61.9,59,71.6,8.2,20.3,44.9,52.4,63.1,68.5,41.8,14.8,27.9,41.6,38,45.4,53.7,45.9,64.3,17.4,13.8,36,67.5,8.1,38.8,52.4,43.6,46.1,63.3,38.6,45,39.2,44,72.6,35.2,47.6,76.3,28.8,37.8,37.6,44.2,64.4,83,26.9,32.2,30.6,39.4,49.3,50.4,39.7,54.3,75.8,72.1,28.9,76.7,14.1,23.7,21.1,22.4,26,24.6,50.8,47.4,62.7,77.5,19.7,25.8,43.2,44.7,37.2,77.3,20.3,19.1,15.7,28.5,29.9,40.8,34.9,45.6,44.3,52.6,69.3,69.4,4.4,17.4,24.8,30.4,28.1,36.2,46.1,45.7,68.4,67.5,63.5,6.8,6.9,13.5,16.3,21.6,27,42.5,28.2,60.2,64.7,69.6,6.8,11.3,23.8,40.9,40.8,35.7,49.5,59.9,73.9,81.5,20.8,27,16.1,38.3,47.6,69.9,73.3,20.2,39.9,39.9,35.8,80.3,53.6,17.9,25.9,35.7,35.3,46.5,63.7,56.3,11,33,38.4,59.5,55.6,72,68.3,75.7,76.8,8,4.6,16.9,29.3,24.5,35.9,58.8,67,72.3,61.3,14.4,27.6,21.5,32.3,53.4,56.3,63,65.6,72.9,81.1,73,18.8,21.9,25.5,9.6,29.5,41,49.9,61.2,18.9,21.3,22.9,38.8,42.8,59,57.3,66,5.9,8,10.2,14.3,21,20.7,23.9,31.6,89.6,10.9,11.1,12.4,17.4,18.9,27.4,30.9,28.8,33.3,35.7,44.5,40.3,42.3,55,71.8,72.3,66.7,75.9,69.5,7.9,28.5,46.5,73.6,60.5,57.1,8.5,10.8,23.7,36.7,47.5,50.9,69.1,73.7,7.6,9.5,18.5,19.1,26.1,26.1,35.1,36.6,56.8,63.2,5.8,9.5,10.6,16.9,22.9,26.4,30.3,28.4,25.6,37,51.2,63.8,56.3,9.6,14.9,27.7,31.4,48.7,55.5,2.4,4.3,2.5,10.2,10.4,14.8,25.2,27.6,37.4,39.6,51.3,2.9,7.3,2.4,4.9,11.2,15.3,32.2,31.5,29.2,7.1,9,9.8,11.5,16.5,11.9,7.4,17.4,12.5,30.2,33,30.5,31.6,37.1,43.2,46.7,50.6,4.4,4.9,15.5,9.2,25.2,24.6,33.4,30.8,30.8,35.8,44.6,46.3,49.3,73.5,2.8,1.3,4.5,4.3,1.8,2.9,8.2,9.3,4.4,32.3,37.4,43.1,39.4,62.4,67.5,61.9,0.4,6,7.2,7.4,8.3,8.1,6,15,17.3,23.2,25.6,37.3,36.7,83.8,0.8,10.3,11.9,15.8,10.6,12.3,35.5,2.6,2.8,1.5,3.2,7.8,9.4,7.8,8.9,14.8,15.4,10.8,19.2,56,1.7,0.5,3.6,3,1.7,5.1,1.9,2.8,6.9,7.9,23.2,35,64.9,3.3,2.9,4.2,5,4.6,5,6.7,9.9,10.9,13.2,15.5,18.7,16.1,46.5,1.4,2.4,8.4,6.2,6.3,10.1,11.2,14.9,23.2,24.6,32.5,32.2,1.8,2.6,2.7,2,2.6,1,4.1,5.1,7.1,3.3,83.8,2.9,6.8,3.7,4.2,8,4.8,5.9,1.5,2.7,3.4,4.8,1.4,5.2,7.4,2.7,26,4.5,6.7,10.6,6.8,15.6.
DEFINE mclay2_E		7.2,12.8,5,1.6,17,9.7,11.6,2,8.9,13.1,4.1,2.9,21.9,6.1,3.2,25.5,11.7,2.4,3.6,-0.5,3.7,2.2,24.6,5.2,6.3,11.2,31.7,8.6,29.8,35.5,0.7,3.7,2.9,10.1,2,7.3,26.8,32.4,8.6,27.8,69,1.6,1.4,1.9,22.9,14.8,25.9,2.8,13.4,9.5,42.7,42,14.7,18.4,0.8,6,7.7,17.5,14.1,28.9,-0.3,16.2,5.5,30.6,21.8,7,2.1,3.8,3.3,15,0.9,11.1,21.2,20,10,25.1,2.3,22.7,14.8,19,21.1,36.7,12.1,4.5,14.3,18.7,12.4,21.9,7.4,22.3,32.9,10,10.4,8.6,22.8,5.7,3.7,2,12,32.8,9.1,11.5,11.1,38.3,20.1,28.7,3.6,9.3,11.5,9.9,14.9,24,12.4,9.2,28.6,31.4,3.8,15.2,3.7,27,1.4,27,30.4,7,21.6,11.5,11.4,21.6,14.9,3.2,13.4,8.1,13.3,38.2,38.3,4.4,8.9,16,20.6,14.5,16.8,13.5,7.7,14.2,25.1,19.1,0.9,12.3,48.9,21,27.4,18.3,22.6,21.2,39.4,15.5,30.4,3.2,45.2,0.3,13.7,18.1,1.5,9.5,4.9,13.6,20,25.5,14.6,8.9,13.3,15.6,13.4,25.3,23.5,4.2,0.8,1.9,13.2,30.4,13.8,4.7,19.4,13,9.2,7.5,18.7,14.5,17.5,9.5,3.3,23.1,9.5,25.7,22,4.9,11.8,23.4,11.6,1.6,0.5,38,31.2,55,11.4,12.7,11.8,16.7,31.1,13.2,11.9,20.5,8.8,0.5,27.6,23.3,20.1,28.8,14.6,13,1.6,3.2,24.3,16.4,8.4,10,66.1,7.2,11.2,15.2,5.1,19.7,20.4,13,12,7.2,14.8,12.9,25,18.2,12.4,13.2,10.3,21.3,8.9,14.4,7.5,11,11.4,19.9,14.4,23.6,10.3,10.7,16,7.3,13.6,5.4,15.1,3.9,23,9.4,12.7,31.4,1.5,26.8,14.5,0.5,16.4,7.3,18.7,20.5,0.8,7.7,10.6,29.5,24.2,22.1,15.4,0.2,6.4,14.7,12.5,8.2,3.2,6.8,9.6,12.9,14.7,9.6,13.5,14.6,9.4,9.8,24.8,19.7,3.8,3.9,16.9,24.9,7.5,22.3,11.3,2.2,6.3,10.8,8.5,12.5,25.8,0.2,6.7,18.5,1.6,3,5.1,23.6,27.7,11.3,6.5,15.5,32.9,21.2,5.1,1.6,19.9,23,16.1,20.3,10.8,12.6,4.1,14.5,10.8,6.6,12.2,15,6.7,24.2,24.4,10.9,42,6.4,21,1.6,15.8,10.1,26.4,7.3,13.1,9.2,12.6,1.1,6.1,2.2,3.6,16.7,20.5,11.9,18.3,10.9,4.8,6.8,22.9,36.9,13.9,3.4,23.1,23.7,6.4,9.9,7.3,6.2,11.8,24.4,19.4,5.7,18.2,17.7,1.1,9.4,13.6,8.2,12.6,13.3,6.1,11.6,6.5,10.9,8.9,21.1,15.9,15.7,3.8,3.5,13.2,22.4,23.5,16.4,1.4,6.7,7.6,12.2,11.7,10.9,26.1,22.8,1.4,9.4,8.2,10.6,0,6.4,2.7,14.3,22.9,14.5,9.8,7.6,22.5,20.3,7.8,3.8,11.5,13.1,8.8,5.3,12.4,8.1,32.9,15.9,4.4,8.4,16.3,11.1,4.6,5.4,24.6,24.2,12.1,16.6,64.3,18.9,0.8,3.2,5.9,9.4,7.7,16.5,4.8,10.1,20.2,14.5,7.6,9.1,3.8,6.1,15.9,14.1,4.5,6.3,10.3,5.4,5.2,9.9,16.6,12.2,13.7,17.4,10.6,20.8,3.2,4.8,4.8,5.4,8.2,11.2,9.8,18.1,19.2,25.4,29.9,0.6,1.2,2.8,0.9,6.5,13.1,10.4,29.1,5.9,10.3,23.4,1.2,6.7,6.7,4.2,9.8,21.5,8,7.2,17.4,15.7,9.6,5.2,23.2,8,16.2,16.8,26.1,5.7,8.9,8.9,13.9,10.8,41.3,7.3,13.3,4.4,18.9,15.8,11.6,19.1,6.7,4.2,5.1,14,21.8,6.5,19.9,14.3,18.3,0,10.3,1.1,4.8,11.3,5.9,3.8,16.6,18.6,31.4,6.2,2.5,9.2,7.8,6.8,24.1,20.9,23.1,17.9,14.9,24.4,3.6,3.1,3.4,24.4,9.3,14.3,8.9,20.1,6.8,5.7,12.9,3,14.4,27.2,32.8,27.3,0.5,1.4,3.9,2.3,5.5,6.6,8.4,6.7,4.1,1.1,4.7,6.9,2,7.3,5.2,3.5,6.2,4.7,6.7,4.6,9.1,21.2,17.6,5.5,16.3,22.3,20.3,27.6,1.7,4.5,9.8,6.4,22.9,26.5,5.1,6,7.9,3,5.8,20.8,10.5,15.7,1.4,3.9,1.8,5.5,6.3,13.7,5.4,5.2,11.9,5.8,4.9,3.5,3.3,3.3,8.5,6.5,5.5,7.5,11.1,5.5,10.2,9.9,27.1,4.5,3,7.9,9,4.4,14.4,2.8,1.4,4.5,5.6,8.5,8.6,3.5,5.2,4.9,3.6,12.7,3.6,0,5.2,5,6.6,5.5,2.9,6.9,15.3,1.8,2.8,4.5,6.2,3,8.4,14.1,5.4,17.1,3.2,3.3,7.3,12.9,8.8,5.6,11,12,1.2,4,3.8,16,3.4,8.3,1.7,5.3,6.2,6,2.5,6.9,5.4,5.8,1.4,4.3,3.2,3.4,5.9,6,0.7,0,7.6,5.7,4.8,3.8,8.8,10.5,13.9,20,3.5,2.5,2.4,2.5,1.7,2,8.3,4.2,3.2,3.6,5.1,4.4,9.3,15.6,3.9,1.3,3.3,0.5,7,7.1,3.3,0.9,2,3.6,5.5,2.3,1.2,4,7.1,2.4,4.2,11.1,10.4,1.8,0,3.1,0.4,2.5,4.4,1.3,5.3,5.9,1.9,3.5,1.6,3.9,19.7,1.4,1.9,1.5,1.6,2.3,4,2.5,0.7,2.2,2.8,3,4.1,8.3,17.9,3.1,2.2,0.7,3.9,3.9,1.1,2.2,1.9,1.8,1,5.1,13.5,0,1.2,1.4,2.3,2.1,3.7,2.4,2.9,2,6.8,15.5,3.2,0.8,4,3.9,0.3,4,10.9,1.5,1.6,1,1.2,5.1,2.6,1.4,7,1,1.4,0,5.9,0.6,6.4.
DEFINE m_oc2_E		9.1,8.64,7.67,7.4,7.07,7.07,6.25,6.22,6.1,4.98,4.96,4.94,4.88,4.66,4.58,4.46,4.43,4.41,4.4,4.36,4.29,4.15,4.15,4.13,4.13,4.04,3.97,3.8,3.76,3.76,3.75,3.75,3.52,3.5,3.36,3.26,3.12,3.08,3.07,3.05,3.04,3.03,3.01,3.01,2.96,2.9,2.88,2.85,2.81,2.79,2.76,2.76,2.73,2.66,2.63,2.56,2.55,2.52,2.52,2.52,2.5,2.49,2.46,2.44,2.42,2.36,2.31,2.24,2.21,2.18,2.17,2.16,2.15,2.14,2.12,2.1,2.08,2.05,2.04,2.03,2.03,2.03,2.02,1.99,1.96,1.95,1.93,1.89,1.85,1.84,1.84,1.82,1.81,1.81,1.78,1.76,1.74,1.71,1.71,1.71,1.69,1.67,1.67,1.66,1.64,1.64,1.63,1.61,1.61,1.58,1.58,1.55,1.53,1.51,1.45,1.43,1.41,1.4,1.4,1.4,1.39,1.38,1.37,1.35,1.34,1.34,1.32,1.32,1.3,1.28,1.28,1.28,1.28,1.27,1.26,1.25,1.23,1.23,1.23,1.23,1.22,1.21,1.2,1.2,1.2,1.2,1.19,1.19,1.19,1.19,1.19,1.18,1.18,1.18,1.17,1.16,1.16,1.13,1.13,1.12,1.12,1.11,1.1,1.1,1.1,1.09,1.09,1.09,1.08,1.08,1.08,1.08,1.07,1.07,1.06,1.05,1.04,1.04,1.04,1.04,1.04,1.03,1.03,1.03,1.03,1.02,1.02,1.02,1.02,1.01,1.01,1.01,1,1,0.99,0.98,0.98,0.98,0.98,0.97,0.96,0.96,0.96,0.96,0.95,0.94,0.94,0.94,0.94,0.94,0.94,0.93,0.92,0.92,0.92,0.91,0.9,0.9,0.9,0.9,0.89,0.89,0.88,0.88,0.86,0.86,0.86,0.86,0.85,0.85,0.84,0.84,0.84,0.83,0.83,0.82,0.82,0.82,0.82,0.82,0.82,0.8,0.8,0.8,0.8,0.8,0.79,0.79,0.79,0.79,0.79,0.79,0.78,0.78,0.78,0.78,0.78,0.77,0.77,0.76,0.76,0.75,0.75,0.75,0.74,0.74,0.74,0.73,0.73,0.73,0.73,0.73,0.72,0.72,0.72,0.72,0.72,0.72,0.72,0.71,0.71,0.71,0.71,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.69,0.69,0.69,0.69,0.68,0.68,0.68,0.68,0.68,0.67,0.67,0.66,0.66,0.66,0.66,0.65,0.65,0.64,0.64,0.64,0.63,0.63,0.63,0.63,0.63,0.63,0.62,0.62,0.62,0.62,0.61,0.61,0.61,0.61,0.61,0.61,0.6,0.6,0.59,0.59,0.59,0.59,0.59,0.59,0.58,0.58,0.58,0.57,0.57,0.57,0.57,0.56,0.56,0.56,0.56,0.55,0.55,0.55,0.55,0.54,0.54,0.53,0.53,0.53,0.53,0.53,0.53,0.52,0.51,0.51,0.51,0.51,0.51,0.5,0.5,0.5,0.49,0.49,0.49,0.49,0.49,0.49,0.49,0.48,0.48,0.48,0.47,0.47,0.47,0.47,0.47,0.47,0.46,0.46,0.46,0.46,0.46,0.46,0.46,0.45,0.45,0.45,0.45,0.45,0.45,0.44,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.43,0.42,0.42,0.42,0.42,0.41,0.41,0.41,0.41,0.41,0.41,0.4,0.4,0.4,0.4,0.4,0.39,0.39,0.39,0.38,0.38,0.38,0.38,0.38,0.38,0.37,0.37,0.37,0.37,0.37,0.37,0.37,0.37,0.37,0.37,0.37,0.37,0.36,0.36,0.36,0.36,0.36,0.36,0.36,0.36,0.36,0.36,0.35,0.35,0.35,0.35,0.35,0.35,0.34,0.34,0.34,0.34,0.34,0.34,0.34,0.34,0.34,0.34,0.34,0.34,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.33,0.32,0.32,0.32,0.32,0.32,0.32,0.32,0.32,0.32,0.32,0.32,0.31,0.31,0.31,0.31,0.31,0.31,0.31,0.31,0.31,0.31,0.3,0.3,0.3,0.3,0.3,0.3,0.3,0.29,0.29,0.29,0.29,0.29,0.29,0.28,0.28,0.28,0.28,0.28,0.28,0.28,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.27,0.26,0.26,0.26,0.26,0.26,0.26,0.26,0.26,0.26,0.26,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.25,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.24,0.23,0.23,0.23,0.23,0.23,0.23,0.23,0.23,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.22,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.21,0.2,0.2,0.2,0.2,0.2,0.2,0.19,0.19,0.19,0.19,0.19,0.19,0.19,0.19,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.18,0.17,0.17,0.17,0.17,0.17,0.17,0.17,0.17,0.17,0.17,0.17,0.17,0.17,0.16,0.16,0.16,0.16,0.16,0.16,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.15,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.14,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.13,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.12,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.11,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.1,0.09,0.09,0.09,0.09,0.09,0.09,0.09,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.08,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.07,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.06,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.04,0.03,0.03,0.03,0.03,0.03,0.03,0.03,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.02,0.01,0.01,0.01,0,0.
DEFINE m_db_13b2_E	0.79,1.02,0.67,0.75,0.98,0.59,0.82,0.72,0.49,0.84,0.83,1.01,0.93,0.8,1.05,1.03,1.06,0.81,0.8,0.78,1.15,0.92,0.94,1.05,1.05,1.25,0.96,1.1,0.55,0.55,0.98,1.13,1.42,0.44,0.66,1.53,1.2,0.95,0.78,1.11,1.37,0.85,0.74,0.74,1.2,1.05,0.87,0.67,1.14,1.35,0.66,0.66,1.16,1.02,1.41,1.06,0.91,1.25,1.28,1.29,0.93,1.48,0.85,1.49,1.41,1.34,1.32,1.7,1.25,1.12,1.31,1.01,1.27,1.07,1.58,1.31,1.12,1.3,1.23,1.52,1.32,1.21,1.38,0.96,1.18,1.39,1.05,1.48,1.38,1.46,1.22,1.35,0.96,1.24,1.1,1.31,0.86,1.15,1.73,1.18,1.63,1.38,1.55,1.28,1.16,1.39,1.02,1.71,1.33,1.09,0.98,1.41,1.23,1.31,1.26,1.42,1.18,0.95,1.22,1.53,1.22,1.39,1.19,1.21,1.23,1.05,1.69,1.49,1.42,1.52,1.23,1.54,1.41,1.28,1.44,1.08,1.51,1.18,1.15,1.41,1.35,1.36,1.3,1.18,1.22,1.23,1.16,1.12,1.4,1.49,1.49,1.56,1.48,1.44,1.38,1.04,1.41,1.59,1.46,1.14,1.48,1.33,1.5,1.03,1.1,1.34,1.42,1.36,1.18,1.41,1.35,1.23,0.95,1.18,1.27,1.11,0.99,1.56,1.52,1.33,1.33,1.28,1.55,1.41,1.44,1.49,1.56,1.36,1.07,1.47,1.35,1.29,1.43,1.39,1.53,1.2,1.24,1.16,1.49,1.23,1.32,1.34,1.1,1.22,1.4,1.51,1.38,1.4,1.26,1.62,1.29,1.5,0.87,1.4,1.34,1.38,1.54,1.38,1.48,1.36,1.48,1.59,1.55,1.49,1.55,1.54,1.29,1.02,1.4,1.3,1.14,1.49,1.52,1.38,1.54,1.54,1.58,1.71,1.49,1.37,1.23,1.57,1.39,1.46,1.34,1.36,1.56,0.62,1.44,1.72,1.32,1.43,1.55,1.72,1.53,0.95,1.43,1.51,1.75,1.39,1.45,1.5,1.45,1.46,1.61,1.5,1.48,1.5,1.53,1.4,1.11,1.38,1.52,1.35,1.52,1.52,1.49,1.45,1.36,1.07,1.56,1.5,1.51,1.52,1.31,1.84,1.35,1.34,1.19,1.41,1.43,1.4,1.66,1.67,1.41,1.26,1.63,1.3,1.46,1.63,1.25,1.57,1.67,1.28,1.53,1.6,1.22,1.73,1.59,1.51,1.49,1.55,1.39,1.57,1.6,1.54,1.44,1.47,1.58,1.22,1.51,1.61,1.15,1.3,1.51,1.54,1.45,1.52,1.47,1.53,1.54,1.4,1.18,1.58,1.36,1.28,1.34,1.11,1.62,1.47,1.29,1.54,1.45,1.46,1.46,1.7,1.38,1.75,1.54,1.2,1.44,1.4,1.62,1.79,1.74,1.49,1.55,1.45,1.4,1.68,1.54,1.69,1.38,1.64,1.84,1.5,1.38,1.52,1.46,1.52,1.44,1.58,1.5,1.43,1.43,1.63,1.63,1.4,1.6,1.69,1.28,1.47,1.58,1.48,1.65,1.68,1.86,1.66,1.51,1.38,1.62,1.89,1.33,1.6,1.6,1.48,1.51,1.71,1.41,1.65,1.61,1.47,1.56,1.7,1.23,1.49,1.54,1.66,1.33,1.64,1.62,1.6,1.37,1.54,1.41,1.66,1.47,1.66,1.54,1.39,1.51,1.57,1.34,1.32,1.73,1.59,1.32,1.51,1.51,1.47,1.53,1.57,1.67,1.81,1.61,1.57,1.31,1.54,1.47,1.45,1.23,1.51,1.5,1.53,1.67,1.47,1.78,1.58,1.7,1.89,1.42,1.28,1.9,1.6,1.63,1.57,1.33,1.51,1.94,1.59,1.4,1.51,1.47,1.44,1.55,1.64,1.45,1.51,1.73,1.44,1.67,1.72,1.68,1.68,1.6,1.29,1.5,1.56,1.47,1.48,1.85,1.78,1.35,1.62,1.44,1.39,1.29,1.83,0.49,1.69,1.6,1.44,1.45,1.52,1.54,1.78,1.55,1.69,1.49,1.51,1.46,1.45,1.66,1.63,1.61,1.61,1.78,1.51,1.43,1.71,1.63,1.64,1.72,1.67,1.34,1.82,1.52,1.79,1.4,1.55,1.84,1.75,1.62,1.7,1.57,1.63,1.64,1.58,1.61,1.42,1.47,1.46,1.58,1.69,1.52,1.72,1.58,1.68,1.64,1.42,1.31,1.68,1.55,1.67,1.63,1.61,1.52,1.7,1.46,1.46,1.51,1.48,1.49,1.63,1.5,1.55,1.59,1.57,1.55,1.55,1.7,1.72,1.75,1.4,1.66,1.48,1.46,1.51,1.54,1.79,1.61,1.79,1.62,1.62,1.8,1.51,1.64,1.53,1.64,1.52,1.6,1.65,1.95,1.62,1.55,1.82,1.72,1.65,1.59,1.74,1.53,1.46,1.48,1.45,1.5,1.58,1.75,1.53,1.71,1.55,1.47,1.52,1.65,1.68,1.76,1.52,1.53,1.57,1.58,1.52,1.69,1.4,1.58,1.89,1.65,1.57,1.69,1.56,1.58,1.67,1.44,1.55,1.58,1.68,1.44,1.11,1.79,1.64,1.66,1.6,1.74,1.67,1.5,1.6,1.77,1.58,1.7,1.41,1.63,1.53,1.44,1.61,1.56,1.62,1.48,1.56,1.56,1.88,1.49,1.67,1.69,1.7,1.61,1.63,1.7,1.73,1.69,1.64,1.73,1.62,1.8,1.58,1.8,1.81,1.71,1.55,1.71,1.52,1.68,1.68,1.56,0.4,1.8,1.67,1.78,1.62,1.79,1.54,1.66,1.5,1.72,1.73,1.5,1.66,1.69,1.71,1.75,1.61,1.67,1.44,1.59,1.53,1.71,1.53,1.63,1.64,1.68,1.74,1.51,1.71,1.72,1.87,1.81,1.74,1.3,1.3,1.51,1.76,1.57,1.81,1.47,1.53,1.57,1.68,1.66,2.05,1.73,1.61,1.86,1.51,1.64,1.54,1.61,1.82,1.64,1.65,1.58,1.52,1.77,1.53,1.7,1.63,1.47,1.87,1.67,1.6,1.82,1.85,1.79,1.5,1.63,1.6,1.69,1.66,1.57,1.58,1.58,1.64,1.82,1.71,1.78,1.7,1.47,1.62,1.55,1.58,1.74,1.56,1.61,1.64,1.68,1.89,1.66,1.8,1.64,1.6,1.61,1.63,1.91,1.61,1.78,1.55,1.7,1.62,1.75,1.77,1.67,1.79,1.58,1.65,1.59,1.55,1.7,1.57,1.65,1.57,1.88,1.58,1.59,1.52,1.72,1.72,1.59,1.56,1.58,1.75,1.72,1.6,1.5,1.88,1.58,1.73,1.67,1.48,1.75,1.75,1.66,1.8,1.61,1.72,1.62.
DEFINE mw3cld2_E	48.2,42.1,56.5,44.1,44.3,72.7,53.9,54.8,45.8,37.3,36.4,36.3,29.3,37.9,35.6,23.9,34.3,47.6,52,37.4,16.8,28.8,31.3,22.4,22.4,17,42,34.5,112.8,112.8,26.4,23.6,12.2,49.1,86.1,17.5,19.7,38.5,44.2,31,31.2,49.1,26.4,26.4,22.6,18.4,39.4,34.8,25.7,24.9,102.3,102.3,41,27.3,24.3,26.4,36.4,23.7,24.3,27.8,30.4,21,38.4,22.1,26.9,27.8,12.5,10,16.1,22.4,18.4,44.1,28.5,33.9,11.4,22.5,27.1,20.2,24.5,21.2,25.6,25.1,21.7,40.4,25.7,23.9,18.4,23.5,11.5,19,21.1,16,29.3,19.8,21.4,33.8,38.9,16.4,14.6,30.9,9.5,23.7,23,28.8,24.7,24.2,33.3,14.9,28.6,27.9,32.2,20.7,16.6,12,26.7,23.4,19.2,35,27,23.2,15.7,22.7,35.3,30.6,27.7,26.3,12.9,22.5,21.7,15.7,33.9,12.1,21.1,27.8,28.1,20.8,10.1,29.6,28.1,24.8,26.5,24.7,12.7,22.7,27.5,25.9,23.4,26.5,29.6,25.6,25,16.8,23.1,26.4,30.7,22.2,28.7,7.7,25.7,4.5,20,20,16.5,20.9,16.2,9,23.9,24.9,21.2,16.3,20.4,29,35.1,36.5,29.3,33.7,19.5,15,18.8,26,18.6,18.4,17.6,20,22.9,15.6,17.2,24,37.9,11.7,21.1,25.4,22.8,28.4,21.3,6.2,16.8,31.8,21.5,11.6,10.3,35.4,25.9,37.3,17.9,8.4,12.4,14.8,21.3,19.2,22.1,18.9,12.2,20.5,24.8,23.2,15.4,24,23.7,18.3,5.6,14.1,19.3,23.5,10.2,12.2,28.7,36,21.5,26,17.9,25.4,17.3,16.4,22.2,10.7,17,11.6,22.8,25,28.6,18.3,17.4,21.9,21.5,24,13.5,52.6,16.9,13.9,29.2,25.2,17.1,18,17.9,30.1,22.4,14.9,15.9,9.3,23.3,13.9,17.7,24.2,16.5,25.1,24.1,12.4,17.2,19.9,29,17.1,3.9,14.7,23.1,22.2,19.8,25.7,25.2,18.2,19.2,16.8,22.8,5.8,8,9.1,16.5,21.2,20.1,20,22.8,21.9,9.7,17.2,19.9,21.5,9.4,24.3,12.6,17.4,22.2,22.2,16.8,13.8,11.9,14.1,19.2,15.8,20.3,17.6,9,17.2,14.1,19.7,17.4,17.1,23.8,25.9,7.9,20.1,23.7,20,12.4,16.3,14,24.1,23.5,25.2,15.8,19.2,5.5,15.7,19.7,14.6,21.6,21.7,11.6,35.3,16.7,12.2,29.4,15.9,22.5,14,19.8,12.8,26.4,9.3,21,16.3,18.1,6.3,17.1,3.6,11.3,16,21.3,21.4,22.6,17.2,11.5,12.3,26.5,19.9,15.4,8.3,20.3,22.8,11.5,12.8,12.3,12.5,22.3,28.3,25.5,12.1,17.1,20.8,6.6,11.4,27,14.9,20,18.4,13.8,12.6,12,15,12.8,23.2,17.7,7.1,10.5,5.1,19.6,24.6,25.5,15.7,7.6,10.5,11.7,15.1,18.4,14.5,22.8,23,4.5,6.8,12.2,19.4,9.9,13.1,19.3,15.8,24.3,17.1,18.8,16,10.4,13.5,13.9,9.6,20.2,21.1,14.6,12.8,19.5,15.7,22.5,22.6,11,13.8,15,11.2,7,15.4,27.8,22.5,23.8,22.4,38.4,24.4,4.7,9.1,9.3,12.1,7.5,10.4,15.4,12.1,24.1,14.1,10.2,8.8,7.5,13.6,17,21.6,11.2,12.5,10.3,10.5,13.2,18.7,15.5,14.3,15.2,21.3,15.1,23.3,3,5.7,6.7,12.3,4,19.9,23.7,16.2,22.3,20.9,15.5,4.5,8.6,5,11.2,19.3,12.3,14.6,107.4,11.3,16.6,25.3,12.9,12.3,9.1,13.7,12.3,16,12.3,17.2,24.1,24.9,11.3,7.6,16.9,14.5,13.7,21.9,24.1,10.1,9.7,10.9,11,19,33.3,11.2,15,8.4,18.2,16,14.1,15.1,8.9,9.2,16.4,18.6,15.3,19.6,19.4,23.7,22.6,10.8,6.1,8.8,13.3,11.9,8.1,15.8,22.1,22.8,32.2,5.5,6.5,8.9,11.2,13.7,22.3,18.6,23.3,24,22.8,24.7,15.1,8.2,11.5,19.3,10.9,17,11,21.7,10.4,12.3,11.4,9.2,15.2,22.3,22.8,24.6,9.2,2.5,3.6,3.1,9.5,12.8,9.6,14.1,20.5,9.2,9.9,4.6,11.4,11.3,9,11.7,7.4,11.6,11.7,9.8,12.3,13.8,21.3,14.4,22.4,23.4,21.4,20.9,3.4,12.5,13.4,17.2,26.6,23.4,3.9,10.2,9,9,10.6,19.9,20.9,23.3,3.7,12.6,5.8,9.8,8.2,16,8.9,6.5,18.8,13.9,12.4,6.5,7.9,3.8,13,31.9,6.2,11.1,12,9.6,13.8,16.8,22.1,11.9,4,9.2,9.2,9.7,14.9,3.6,5.7,6.7,8,8.7,14.1,9.6,7.9,10.3,7.7,16.2,5.3,6.9,6.3,7.6,5.6,4.2,8.6,10.2,11.3,4,4.4,7.1,3.6,9.4,5.9,7,7.1,17.8,8.9,6,6.2,128.2,9.6,15,12.9,13.1,7.1,5.1,4.7,7,9.5,8,10,14.9,10.6,11.5,7.9,14.8,15.7,15.9,3,5.9,2,4.7,14,5,6.8,3,6.6,6.8,7.7,13.5,12.3,14.2,32.1,32.1,4.5,2.8,2.8,3.5,3.5,18.8,8.3,10.9,7,5.5,8.1,8.6,10.8,27.7,6.1,8.8,6.1,5.2,4.1,9.2,9.6,5.5,3.8,8.7,5.4,4.4,7.8,2,4,5.5,3.4,6.9,6.3,7.4,4.9,4.8,7.7,3.9,5.7,8.6,20,5.1,3,2.8,6.9,8.8,23.6,4.4,12,4,2.5,4.7,7.8,3.4,10.2,3.5,8,5,7.1,5.6,18.7,4.6,3.7,2.1,2.3,3.8,2.2,9.2,6.4,6.9,11.6,9.7,14.1,10,4.4,15.2,2.9,5.9,8.1,4.5,2.3,2.8,4.8,26.9,2.4,2,4.1,3.8,5.2,3.1,10.2,4.5,3.5,4.3,6.1,8.3,2.9,4.3,7.2,9.4,2.6,4,5.3,6.9,6.1.
DEFINE mw15l22_E	11.5,16.1,27.6,13.8,16.8,21,13.1,12.4,12,8.1,11.4,13.2,15.2,10,6.6,14.4,12.4,22.2,12.2,8.9,10.5,11.6,14.9,6.4,6.4,8,19.9,8.7,33.8,33.8,6,6.1,6.3,15.6,8.5,7.3,19.2,16.7,12.8,17,24.6,7,9.7,9.7,13.2,10.8,14.5,9.1,10.4,6.1,29.6,29.6,10.3,10.4,3.5,6.6,5.7,10.7,8.9,19.2,6.1,8,9.8,12.4,7.9,5,4.3,6.7,6,8.7,4.1,9.3,10.1,11.5,5.8,13.5,3.5,15.7,11.7,10.9,9.4,16.8,7.7,6.7,8.3,8.9,7.6,11,5,8.3,16.5,6.5,9.1,5.8,10,5.8,4.9,3.1,1.9,11.7,4.8,5.9,4.2,16.9,11.3,9.4,6.8,5.5,5.3,8.6,11.9,9,6.1,6.4,12.1,12.9,4.2,12.3,4.6,10.9,1.7,10.3,12,5.4,13.7,7,4.3,11.6,6,3.1,11.1,5,8,14.4,13.2,4.6,4.6,7.9,13.2,7.6,7.5,6.5,5.3,8.1,13.1,8.6,3.4,8.1,17.2,8.7,11.2,9.5,9.3,10.6,13.2,8.7,13.1,2.9,13.5,3.1,6.4,11.3,3.2,5.9,3.8,3.8,8.4,12.1,11.3,4.1,6.5,7.7,7.7,12.7,11.3,8.4,6.9,3.1,6.1,15.2,6.9,5.2,7,6,4.6,5,6.8,6.5,12.5,4.2,3.1,8.7,4.3,10.4,8.4,4.7,6.3,10.1,5.4,3.8,1.6,19,15.3,22.9,5.2,5,6,8.3,20,5.1,4.7,14,4.8,1.8,10.1,9.5,7.2,12.2,7.1,5.5,2.4,2.7,8.4,7.3,5.1,3.8,21.1,8.3,4.4,7.3,4,8.7,14.2,6.1,6,3.5,6.1,10.4,10.5,7.4,5.3,5.6,5.5,10.1,3.8,5.9,4.7,6.5,4.1,7,6.6,9.6,5.4,4.4,6.5,6.1,6.6,2.5,6.4,3.1,10.6,3.6,5.3,12.6,2.4,12.2,7.7,2.2,8.4,3.5,8.9,8.6,1.5,3.3,6.1,11.6,10.2,10.1,7.1,2.6,3.4,11.3,5.2,3.5,2.8,3.3,5.1,5.8,7.4,5,4.5,5.7,4.4,4.5,11.3,7.2,2.4,3,6.6,8.6,3.5,9.8,5.5,2.7,2.1,4.4,4.9,4.1,10.7,1.4,3.6,9.8,1.9,4.6,3.1,9.7,13.5,5.3,4.1,5.7,14.4,8.4,6.4,2.2,6.6,9.4,7.1,9.7,4.2,4.9,2.2,6.4,6.4,3.6,7.9,7.7,3.6,10.9,9.9,4.1,23.1,3,9.5,2.3,9.1,4.1,10.5,3.4,7,4.3,7.2,2.3,3.2,2,1.7,7.4,10.6,5.1,7.7,4.4,3.5,3.2,10.4,12.2,5,1.9,9.9,10.4,3.3,5,3.2,2.8,5.9,10.7,8.3,2,6.9,6.7,2.2,4.4,5.6,3.8,5.6,7.3,2.4,5.4,3.1,3.8,3.3,8.6,6.3,5.4,3.6,1.6,5.9,10,10.7,6.2,1.7,2.7,3.5,5.5,7.2,3.9,10.6,10.1,1.6,4.8,3.7,5.4,1.1,2,2.3,6.2,9.4,5.7,4.6,3.5,8.1,7.2,3.3,1.4,4.1,6.4,3.2,2.4,9.1,4.1,13,6.6,2.4,3.4,5.8,4.2,1.9,1.8,9.8,10.2,5.9,6.9,25.4,9.4,3.7,1.5,2.6,3.5,3.9,6.7,2.2,3.9,4,5.4,4,3.4,0.3,2.8,6.3,6.4,1.8,4.6,6,2.4,3.4,4.4,6.4,4,4.5,8,4.7,10,1.4,2.3,2.2,2.4,2.2,4.2,7.7,7.9,8.8,10.8,10.1,0.5,2.6,1.5,1.5,2.6,7.9,6.2,32.7,2.3,4.9,10.6,2.6,3.1,2.7,2.3,3.9,9.3,4.1,2.9,7.8,6.6,3.6,3.3,8.7,3.2,5.9,5.9,12.4,3.1,2.7,3.1,4.8,6.1,17.8,4.2,5.4,1.7,6.7,6.1,5.2,7.2,2.6,2.1,4.1,6.1,12.5,4.6,7.4,6.4,6.9,1.6,3.4,1.3,2.9,3.8,2.9,1.8,7.7,7.9,12.4,1.7,1,4.2,3.5,1.3,4,5.8,9.6,8.4,7.1,11,2.6,2.3,2.7,8.7,3.8,5.5,4.2,7.3,3.4,2.5,5.2,1.6,5.3,10.5,12.2,11.3,0.8,1.3,1.8,1.4,0.6,2.7,2.9,2.5,2.9,2.6,2.4,1.7,1.4,2.8,2.2,1.9,2.9,2.7,2.7,3.3,3.2,6.7,8.7,3,7.3,9.6,8.8,9.9,0.9,1.9,3.2,3.2,10.4,8.5,2.1,2.3,3.1,1.5,2.6,7.6,6.1,7.4,1,2.9,1.5,1.4,1.8,5,2,1.8,7.8,1.7,0.4,1.6,1.8,1.4,3.7,3.3,1.8,3.5,5,1.8,3.6,5.8,10.1,2.9,1.5,4.1,3.2,2.4,11.2,0.9,1.6,2.3,3.2,4,4.4,2.2,2.1,2.6,1.4,4.4,1.4,0.7,2.6,3.2,2.1,2.2,1.2,2.1,5.8,2.2,0.5,2.7,1.7,1,2.9,4.1,1.9,6.7,2.2,1.5,2.5,78.9,3.7,3,3.9,5.4,0.3,1.9,1.6,4.9,1.7,4.3,1.4,3.7,2.5,2,3.1,2.7,3.8,3.1,0.8,1.3,0.9,2.1,2.3,3.3,1.1,0.8,3.9,1.6,2,3.8,3.6,4.5,11.7,11.7,1,1,0.9,0.7,1,2.3,4.3,2.5,1,1.8,1.5,1.8,3.9,6.8,1.8,1,1.6,0.2,1.6,3.1,1.3,0.7,0.7,1.4,3.3,1.2,1,1.1,2.6,0.5,1.3,1.9,3.3,3.7,0.3,1.3,0.5,1.8,2,0.9,1.9,2.1,0.7,0.4,0.5,1.6,8,1,1,2,0.9,1.9,1.5,0.9,0.7,0.6,0.9,1.4,0.9,3.1,7.1,1.7,0.6,0.6,0.9,1,0.6,1.5,0.8,0.7,1.9,1.3,6.5,0.3,1.2,0.7,0.3,1.7,1.4,2.5,1,0.8,2.7,6.3,1.1,0.8,1.8,2.1,1.1,1.5,5.8,1.8,1.7,0.6,0.6,2.8,0.8,0.6,3.2,0.8,0.7,0.1,2.2,0.6,2.8.

ASSIGN mhzn_top		append(mhzn_top, mhzn_top2_E).
ASSIGN mhzn_bot		append(mhzn_bot, mhzn_bot2_E).
ASSIGN mhzn_desgn	append(mhzn_desgn, mhzn_desgn2_E).
ASSIGN mhzn_master	append(mhzn_master, mhzn_master2_E).
ASSIGN msand		append(msand, msand2_E).
ASSIGN msilt		append(msilt, msilt2_E).
ASSIGN mclay		append(mclay, mclay2_E).
ASSIGN m_oc			append(m_oc, m_oc2_E).
ASSIGN m_db_13b		append(m_db_13b, m_db_13b2_E).
ASSIGN mw3cld		append(mw3cld, mw3cld2_E).
ASSIGN mw15l2		append(mw15l2, mw15l22_E).
#******************************

ASSIGN mhzn_desgn	IF mhzn_desgn matches "*Ap*" THEN "Ap" 
					ELSE IF mhzn_desgn matches "*A*" and not mhzn_desgn matches "E*" and not mhzn_desgn matches "*BA*" THEN "A"
					ELSE IF mhzn_desgn matches "*Bt*" and not mhzn_desgn matches "E*" THEN "Bt"
					ELSE IF mhzn_desgn matches "*Bw*" and not mhzn_desgn matches "E*" THEN "Bw"
					ELSE IF mhzn_desgn matches "*B*" and not mhzn_desgn matches "E*" and not mhzn_desgn matches "2E*" and not mhzn_desgn matches "C*" THEN "B"
					ELSE IF mhzn_desgn matches "*E*" THEN "E"
					ELSE IF mhzn_desgn matches "*C*" THEN "C"
					ELSE "other".
# Gets the first master horizon.
DEFINE hrzn		IF hzname matches "*Ap*" THEN "Ap" 
				ELSE IF hzn2 matches "*A*" and hzn2 != "BA" and hzn2 != "EA" and hzn2 != "CA" THEN "A"
				ELSE IF hzn3 matches "*Bt*" THEN "Bt" 
				ELSE IF hzn3 matches "*Bw*" THEN "Bw"
				ELSE IF hzn2 matches "*B*" and hzn2 != "EB" and hzn2 != "CB" THEN "B"
				ELSE IF hzn2 matches "*E*" and hzn2 != "CE" THEN "E"
				ELSE IF hzn2 matches "*C*" THEN "C"
				ELSE "unknown".

ASSIGN msand	IF hrzn == "unknown" THEN msand ELSE LOOKUP(hrzn == mhzn_desgn, msand).
ASSIGN msilt	IF hrzn == "unknown" THEN msilt ELSE LOOKUP(hrzn == mhzn_desgn, msilt).
ASSIGN mclay	IF hrzn == "unknown" THEN mclay ELSE LOOKUP(hrzn == mhzn_desgn, mclay).
ASSIGN m_oc		IF hrzn == "unknown" THEN m_oc ELSE LOOKUP(hrzn == mhzn_desgn, m_oc).
ASSIGN m_db_13b	IF hrzn == "unknown" THEN m_db_13b ELSE LOOKUP(hrzn == mhzn_desgn, m_db_13b).

# The following sections are to normalize the variables to avoid bias toward one attribute or the other.
# Calculates the mean and standard deviation of the variables in the reference data set (input file).
DEFINE ave_msand		ARRAYAVG(msand).
DEFINE std_msand		ARRAYSTDEV(msand).
DEFINE ave_msilt		ARRAYAVG(msilt).
DEFINE std_msilt		ARRAYSTDEV(msilt).
DEFINE ave_mclay		ARRAYAVG(mclay).
DEFINE std_mclay		ARRAYSTDEV(mclay).
DEFINE ave_m_oc			ARRAYAVG(m_oc).
DEFINE std_m_oc			ARRAYSTDEV(m_oc).

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_msand		((msand)-ave_msand)/std_msand.
DEFINE temp_msilt		((msilt)-ave_msilt)/std_msilt.
DEFINE temp_mclay		((mclay)-ave_mclay)/std_mclay.
DEFINE temp_m_oc		((m_oc)-ave_m_oc)/std_m_oc.

DEFINE temp_sandtotal_r_min	((sandtotal_r)-ave_msand)/std_msand.
DEFINE temp_silttotal_r_min	((silttotal_r)-ave_msilt)/std_msilt.
DEFINE temp_claytotal_r_min	((claytotal_r)-ave_mclay)/std_mclay.
DEFINE temp_oc_r_min		((oc_r)-ave_m_oc)/std_m_oc.

# Gets the minimum-maximum range of the temporary variables.
DEFINE range_msand		ARRAYMAX(temp_msand)-ARRAYMIN(temp_msand).
DEFINE range_msilt		ARRAYMAX(temp_msilt)-ARRAYMIN(temp_msilt).
DEFINE range_mclay		ARRAYMAX(temp_mclay)-ARRAYMIN(temp_mclay).
DEFINE range_m_oc		ARRAYMAX(temp_m_oc)-ARRAYMIN(temp_m_oc).

# Puts the ranges of the variables into an array.
DEFINE cat_ranges_min	APPEND(range_msand,APPEND(range_msilt,APPEND(range_mclay, range_m_oc))).

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_msand		temp_msand*ARRAYMAX(cat_ranges_min)/range_msand.
DEFINE trans_msilt		temp_msilt*ARRAYMAX(cat_ranges_min)/range_msilt.
DEFINE trans_mclay		temp_mclay*ARRAYMAX(cat_ranges_min)/range_mclay.
DEFINE trans_m_oc		temp_m_oc*ARRAYMAX(cat_ranges_min)/range_m_oc.

DEFINE trans_sandtotal_r_min	temp_sandtotal_r_min*ARRAYMAX(cat_ranges_min)/range_msand.
DEFINE trans_silttotal_r_min	temp_silttotal_r_min*ARRAYMAX(cat_ranges_min)/range_msilt.
DEFINE trans_claytotal_r_min	temp_claytotal_r_min*ARRAYMAX(cat_ranges_min)/range_mclay.
DEFINE trans_oc_r_min			temp_oc_r_min*ARRAYMAX(cat_ranges_min)/range_m_oc.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance4	SQRT(POW(trans_sandtotal_r_min - trans_msand,2)+POW(trans_silttotal_r_min - trans_msilt,2)+
					POW(trans_claytotal_r_min - trans_mclay,2)+POW(trans_oc_r_min - trans_m_oc,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_min	ARRAYMIN(distance4).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_min 		ARRAYPOSITION(distance4).
DEFINE pos1_min 	LOOKUP(minn1_min, distance4, pos_min).
DEFINE dist2_min	IF pos_min == pos1_min THEN distance4 + 1000 ELSE distance4.
DEFINE minn2_min	ARRAYMIN(dist2_min).
DEFINE pos2_min		LOOKUP(minn2_min, dist2_min, pos_min).
DEFINE dist3_min	IF pos_min == pos2_min THEN dist2_min + 1000 ELSE dist2_min.
DEFINE minn3_min	ARRAYMIN(dist3_min).
DEFINE pos3_min		LOOKUP(minn3_min, dist3_min, pos_min).
DEFINE dist4_min	IF pos_min == pos3_min THEN dist3_min + 1000 ELSE dist3_min.
DEFINE minn4_min	ARRAYMIN(dist4_min).
DEFINE pos4_min		LOOKUP(minn4_min, dist4_min, pos_min).
DEFINE dist5_min	IF pos_min == pos4_min THEN dist4_min + 1000 ELSE dist4_min.
DEFINE minn5_min	ARRAYMIN(dist5_min).
DEFINE pos5_min		LOOKUP(minn5_min, dist5_min, pos_min).
DEFINE dist6_min	IF pos_min == pos5_min THEN dist5_min + 1000 ELSE dist5_min.
DEFINE minn6_min	ARRAYMIN(dist6_min).
DEFINE pos6_min		LOOKUP(minn6_min, dist6_min, pos_min).
DEFINE dist7_min	IF pos_min == pos6_min THEN dist6_min + 1000 ELSE dist6_min.
DEFINE minn7_min	ARRAYMIN(dist7_min).
DEFINE pos7_min		LOOKUP(minn7_min, dist7_min, pos_min).
DEFINE dist8_min	IF pos_min == pos7_min THEN dist7_min + 1000 ELSE dist7_min.
DEFINE minn8_min	ARRAYMIN(dist8_min).
DEFINE pos8_min		LOOKUP(minn8_min, dist8_min, pos_min).
DEFINE dist9_min	IF pos_min == pos8_min THEN dist8_min + 1000 ELSE dist8_min.
DEFINE minn9_min	ARRAYMIN(dist9_min).
DEFINE pos9_min		LOOKUP(minn9_min, dist9_min, pos_min).
DEFINE dist10_min	IF pos_min == pos9_min THEN dist9_min + 1000 ELSE dist9_min.
DEFINE minn10_min	ARRAYMIN(dist10_min).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_min		LOOKUP(minn1_min, distance4, m_db_13b).
ASSIGN BD1_min		ARRAYMIN(BD1_min).
DEFINE BD2_min		LOOKUP(minn2_min, dist2_min, m_db_13b).
ASSIGN BD2_min		ARRAYMIN(BD2_min).
DEFINE BD3_min		LOOKUP(minn3_min, dist3_min, m_db_13b).
ASSIGN BD3_min		ARRAYMIN(BD3_min).
DEFINE BD4_min		LOOKUP(minn4_min, dist4_min, m_db_13b).
ASSIGN BD4_min		ARRAYMIN(BD4_min).
DEFINE BD5_min		LOOKUP(minn5_min, dist5_min, m_db_13b).
ASSIGN BD5_min		ARRAYMIN(BD5_min).
DEFINE BD6_min		LOOKUP(minn6_min, dist6_min, m_db_13b).
ASSIGN BD6_min		ARRAYMIN(BD6_min).
DEFINE BD7_min		LOOKUP(minn7_min, dist7_min, m_db_13b).
ASSIGN BD7_min		ARRAYMIN(BD7_min).
DEFINE BD8_min		LOOKUP(minn8_min, dist8_min, m_db_13b).
ASSIGN BD8_min		ARRAYMIN(BD8_min).
DEFINE BD9_min		LOOKUP(minn9_min, dist9_min, m_db_13b).
ASSIGN BD9_min		ARRAYMIN(BD9_min).
DEFINE BD10_min		LOOKUP(minn10_min, dist10_min, m_db_13b).
ASSIGN BD10_min		ARRAYMIN(BD10_min).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_min	IF minn1_min == 0 THEN 1 ELSE minn1_min.
ASSIGN minn2_min	IF minn2_min == 0 THEN 1 ELSE minn2_min.
ASSIGN minn3_min	IF minn3_min == 0 THEN 1 ELSE minn3_min.
ASSIGN minn4_min	IF minn4_min == 0 THEN 1 ELSE minn4_min.
ASSIGN minn5_min	IF minn5_min == 0 THEN 1 ELSE minn5_min.
ASSIGN minn6_min	IF minn6_min == 0 THEN 1 ELSE minn6_min.
ASSIGN minn7_min	IF minn7_min == 0 THEN 1 ELSE minn7_min.
ASSIGN minn8_min	IF minn8_min == 0 THEN 1 ELSE minn8_min.
ASSIGN minn9_min	IF minn9_min == 0 THEN 1 ELSE minn9_min.
ASSIGN minn10_min	IF minn10_min == 0 THEN 1 ELSE minn10_min.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_min		minn1_min + minn2_min + minn3_min + minn4_min + minn5_min + minn6_min + minn7_min + minn8_min + minn9_min + minn10_min.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship.
DEFINE rel_dist1_min	POW(sum_dist_min/minn1_min,1).
DEFINE rel_dist2_min	POW(sum_dist_min/minn2_min,1).
DEFINE rel_dist3_min	POW(sum_dist_min/minn3_min,1).
DEFINE rel_dist4_min	POW(sum_dist_min/minn4_min,1).
DEFINE rel_dist5_min	POW(sum_dist_min/minn5_min,1).
DEFINE rel_dist6_min	POW(sum_dist_min/minn6_min,1).
DEFINE rel_dist7_min	POW(sum_dist_min/minn7_min,1).
DEFINE rel_dist8_min	POW(sum_dist_min/minn8_min,1).
DEFINE rel_dist9_min	POW(sum_dist_min/minn9_min,1).
DEFINE rel_dist10_min	POW(sum_dist_min/minn10_min,1).

DEFINE sum_rel_dist_min		rel_dist1_min + rel_dist2_min + rel_dist3_min + rel_dist4_min + rel_dist5_min + rel_dist6_min + rel_dist7_min + rel_dist8_min + rel_dist9_min + rel_dist10_min.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_min	rel_dist1_min/sum_rel_dist_min.
DEFINE wt2_min	rel_dist2_min/sum_rel_dist_min.
DEFINE wt3_min	rel_dist3_min/sum_rel_dist_min.
DEFINE wt4_min	rel_dist4_min/sum_rel_dist_min.
DEFINE wt5_min	rel_dist5_min/sum_rel_dist_min.
DEFINE wt6_min	rel_dist6_min/sum_rel_dist_min.
DEFINE wt7_min  rel_dist7_min/sum_rel_dist_min.
DEFINE wt8_min	rel_dist8_min/sum_rel_dist_min.
DEFINE wt9_min	rel_dist9_min/sum_rel_dist_min.
DEFINE wt10_min	rel_dist10_min/sum_rel_dist_min.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_min	ROUND(BD1_min*wt1_min + BD2_min*wt2_min + BD3_min*wt3_min + BD4_min*wt4_min + BD5_min*wt5_min + BD6_min*wt6_min + BD7_min*wt7_min + BD8_min*wt8_min + BD9_min*wt9_min + BD10_min*wt10_min,2).			

# The weighted average bulk density of 8 nearest soils (to the target soil).
#DEFINE wt_BD_min_AVE	ROUND((BD1_min + BD2_min + BD3_min + BD4_min + BD5_min + BD6_min + BD7_min + BD8_min)/8,2).			


#WHEN not ISNULL(hzdept_r)
#DISPLAY "Mineral BD %s" wt_BD_min.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s, %s, %s, %s" BD1_min, BD2_min, BD3_min, BD4_min, BD5_min, BD6_min, BD7_min, BD8_min.


# ORGANIC SOILS-------------------------------------------------------------
# Read the table of bulk densities and other properties of soils that are organic (>20% OC).
INPUT ohzn_top numeric, ohzn_bot numeric, otaxon char, ohzn_desgn char, ohzn_master char, c_tot numeric, 
	o_db_13b numeric, ow3cld numeric, ow15l2 numeric
	FILE "bd_organic"
	AGGREGATE COLUMN ohzn_top none, ohzn_bot none, otaxon none, ohzn_desgn none, ohzn_master none, c_tot none, 
	o_db_13b none, ow3cld none, ow15l2 none.

# Added new organic soil bulk density data (mostly compliant cavity determined). 6/12/2019
#DEFINE ohzn_top2	0,3,0,3,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,20,0,17,0,18,0,5,0,10,40,74,26,0,13,35,0,20,32,11,29,0,20,0,17,80,36,0,0,3,3,0,3,0,3,0,0,0,0,0,0,0,0,0,0,1,0,0,9,20,13,24,0,6,0,0,0,18,67,0,0,19,0,26,65,0,24,58,24,93,140,165,17,27,73,32,80,18,34,28,66,9,62,87,110,77,0,25,17,31,65,14,27,77,141,20,37,61,95,12,26,81,18,31,17,33,90,21,66,145,162,16,30,11,21,14,24,12,38,68,29,74,19,40,57,67,12,30,64,25,63,24,26,25,39,70,91,121,149,30,74,26,45,72,28,58,87,30,44,73,0,0,0,4,0,0,0,0,0,0,0,0,3,0,1,2,0,0,2,0,2,4,0,3,5,0,0,2,0,3,0,2,3,1,0,0,2,0,2,0,0,2,0,2,0,3,0,0,0,2,3,0,3,0,1,0,2,5,0,0,0,2,2,0,0,1,0,3,9,0,2,0,2,2,0,3,0,2,0,3,0,0,0,0,1,0,5,15,0,3,0,3,6,0,0,0,7,0,15,5,3,0,0,0,15,89,122,0,0,10,2,0,7,108,0,21,12,4,0,50,22,0,19,10,13,20,0,10,10,0,0,0,48,10,0,15,13,35,0,33,69,55,56,0,37,92,0,139,0,21,10,74,96,17,0,8,0,9,25,55,102,82,46,39,59,56,28,33,72,20,9,84,0,46,109,61,150,110,0,41,130,18,0,70,125,71,97,0,33,0,0,0,37,3,0,63,7,8,5,0,10,0,2,5,0,2,0,0,0,0,3,3,0,0,146,117,0,0,0,0,5,0,2,7,0,2,0,0,3,0.
#DEFINE ohzn_bot2	3,8,3,5,3,3,3,3,6,3,1,2,3,1,2,4,5,5,4,2,2,4,2,5,2,1,2,2,3,4,3,2,3,2,2,2,5,1,4,2,3,2,2,7,3,4,2,3,2,6,3,2,3,3,2,2,2,2,4,5,4,3,2,2,5,3,3,4,7,2,2,2,3,6,3,2,2,2,4,4,2,2,3,3,4,5,5,19,14,20,30,17,32,18,25,5,15,8,40,74,150,150,13,35,52,20,32,42,21,37,20,43,17,49,120,43,3,3,3,3,3,5,3,8,1,2,4,2,2,2,3,3,2,2,8,4,9,15,32,24,36,6,15,10,3,18,67,120,24,19,145,26,65,124,24,58,111,45,140,165,187,27,73,86,80,100,34,110,66,87,62,87,110,185,130,25,90,31,65,126,27,77,141,203,37,61,95,150,26,81,150,31,122,33,90,150,66,145,162,203,30,150,21,128,24,40,38,68,100,74,92,40,57,67,108,30,64,110,63,110,41,41,39,70,91,121,149,200,74,97,45,72,92,58,87,107,44,73,93,13,9,24,18,9,23,20,22,17,23,9,3,6,1,2,3,3,2,4,2,4,7,3,5,7,2,2,3,3,4,2,3,8,5,11,2,3,2,4,3,2,4,2,5,2,0,3,2,2,4,0,3,10,1,3,2,5,12,2,2,2,6,0,2,1,2,3,9,16,2,4,2,4,8,3,4,2,3,3,6,3,2,2,1,3,5,15,30,3,13,3,6,8,1,5,9,32,3,35,10,8,10,20,12,21,117,140,10,10,16,7,5,10,120,8,30,25,6,4,63,27,15,24,22,22,30,10,15,20,14,2,16,66,48,15,35,33,55,13,56,92,96,69,17,74,160,21,160,10,37,21,101,139,26,11,19,22,25,42,72,130,105,61,59,86,91,56,58,102,33,20,110,9,65,126,76,190,150,8,55,170,56,18,97,143,97,125,11,56,33,24,5,51,8,3,78,21,11,10,1,28,10,3,10,5,16,9,5,4,7,10,10,6,18,200,146,9,4,3,14,8,8,7,18,17,7,7,19,8,3.
DEFINE otaxon2		"alfisol","alfisol","alfisol","alfisol","alfisol","alfisol","alfisol","alfisol","alfisol","alfisol","alfisol","alfisol","alfisol","alfisol","alfisol","alfisol","alfisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","andisol","entisol","entisol","entisol","entisol","entisol","entisol","folists","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","hemist","hemist","hemist","hemist","hemist","hemist","hemist","histel","histel","histel","histel","histel","histel","histel","histel","histel","histel","histel","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","mollisol","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","spodosol","spodosol","spodosol","spodosol","spodosol","spodosol","spodosol","spodosol","spodosol","spodosol","spodosol","spodosol","spodosol","spodosol","spodosol","spodosol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","ultisol","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","unknown2","alfisol","andisol","andisol","andisol","andisol","andisol","andisol","entisol","entisol","entisol","entisol","entisol","entisol","entisol","entisol","entisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","gelisol","fibrist","folist","folist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","hemist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","saprist","wassist","wassist","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","inceptisol","mollisol","mollisol","mollisol","mollisol","mollisol","mollisol","mollisol","spodosol","spodosol","spodosol","spodosol","spodosol","ultisol","ultisol","ultisol","ultisol","spodosol","spodosol".
#DEFINE ohzn_desgn2	Oi,Oa,Oe,Oa,Oi,Oe,Oe,Oi,A,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oe,Oi,Oe,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oe,Oe,Au1,A1,Oi,OaA,Oa,Oi,Oe,Oe,Oa,Oi,Oa,Oe,Oa,Oi,Oa2,Oe,Oa,Oe,Oi,Oe,Oa,Oi,Oe,Oa,Oe1,Oa,Oi,Oa,Oe1,Oe2,Oaf1,Oa,Oi,Oi,Oa,Oa,Oi,Oa,Oi,Oe,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oi,Oe,Oe,Oe,Oa,Oa,Oa,Oa,Oi,Oe,Oe,Oi,Oa1,Oa2,Oa3,Oa1,Oa1,Oa2,Oa1,Oa2,Oa3,Oa1,Oa2,Oa3,Oa1,Oa3,Oa4,Oa5,Oa2,Oa3,Lma,Oa2,Oa3,Oa2,Oa3,Oa2,Oa3,Oa2,Oe,Oa1,Oa2,Oa3,Oa1,Oa2,Oa2,Oa3,Oa4,Oa2,Oa3,Oa4,Oa5,Oa2,Oa3,Oa4,Oa5,Oa2,Oa3,Oa4,Oa2,Oa3,Oa2,Oa3,Oa4,Oa1,Oa2,Oa3,Oa4,Oa2,Oa3,Oap2,Oa1,Oap2,Oa1,Oa2,Oa3,Oa4,Oa2,Oa3,Oa2,Oa3,Oa4,Oa5,Oa2,Oa3,Oa4,Oa2,Oa3,Oa,Oa,Oa1,Oa2,Oa3,Oa4,Lco,Lma,Oa1,Oa2,Oa,Oe,Oa1,Oa1,Oa2,Oa3,Oa1,Oa2,Oa3,Oa,Oa,Oa1,Oa,Oa,Oa,Oa,Oa,Oa,Oa,Oa,Oi,Oe,Oi,Oe,Oa,Oi,Oi,Oe,Oi,Oe,Oa,Oi,Oe,Oa,Oi,Oi,Oe,Oi,Oe,Oi1,Oi2,Oa,Oe,Oe,Oi2,Oe,Oi2,Oe,Oi2,Oi2,Oe,Oi2,Oa,Oi2,Oi2,Oe,Oi2,Oi2,Oe,Oi2,Oe,A,Oi2,Oe,Oi2,Oe,Oa,Oi2,Oi2,Oi2,Oe,Oi1,Oi2,Oi2,Oe,Oi2,Oe,Oa,Oi2,Oe,Oi2,Oe,Oe,Oi2,Oe,Oi2,Oe,Oi2,Oe,Oi2,Oi2,Oi,Oi,Oe,Oi,Oe,Oa,Oe,Oa,Oe,Oi,Oe,Oi,Oi,Oe,Oa,Oi,Oa2,A,Oa,A1,A,Ap1,A,Oa3,Oeb,Oe,Oi,Oe,Oa,Oa1,Oi2,Of,Oa,AO,OA,Oe,Oi,Oa,AO,Oa,A,Oa,Oe,Oa,Oi,Oa,Oe,Oe,Oi,Oi,Oa,Oe,Oap1,Oap2,Oa2,Oa,Oa1,Oe1,Oe3,Oe,Oe2,Oe,Oa1,Oe4,Oise,Oe1,Oe1,Oe3,Oe2,Oa2,Oi,Oi,Oi,Oe,Oap,Oap2,Oap3,Oa2,Oa4,Oa,Oa2,Oa1,Oa2,Oa2,Oa3,2Oa,Oa3,2Oe,Oa,Oa3,Oi,Oa,Oa2,Lco,Oe2,Oe1,Oa1,Lco,Oe,Oa1,Oe,Oi1,Oi3,Oe,Oi2,Oi,Oi2,Oi1,Oa,Oe,Ab,Oa,Oi,Oa,A1,AE,A,Oi,Oe,Oi,Oe,Oe,Oi,A1,Oi,Oe,Oe,Oi,Oe,Oe,Oe,A1,2Oab2,2Oab1,Oi,Oi,Oi,Oa,Oa,Oe,Oa,Oa,Oe,A,Oi,Oi,Oa,Oi.
#DEFINE ohzn_master2 O,O,O,O,O,O,O,O,A,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,A,A,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,L,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,L,L,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,A,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,A,O,A,A,A,A,O,O,O,O,O,O,O,O,O,O,A,O,O,O,O,A,O,A,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,O,L,O,O,O,L,O,O,O,O,O,O,O,O,O,O,O,O,A,O,O,O,A,AE,A,O,O,O,O,O,O,A,O,O,O,O,O,O,O,A,O,O,O,O,O,O,O,O,O,O,O,A,O,O,O,O.
DEFINE c_tot2		37.17,24.41,47.00,30.84,37.35,47.47,47.47,47.62,20.54,47.61,43.24,27.04,31.32,27.01,47.70,42.91,29.84,26.63,53.66,46.46,44.56,48.30,50.04,42.75,42.21,40.44,40.67,45.71,43.90,36.92,38.56,43.83,47.70,45.97,45.74,42.18,42.50,46.10,40.40,44.66,46.60,46.85,48.78,50.54,43.45,47.26,39.00,40.99,41.68,48.34,40.34,45.14,46.73,42.07,46.39,41.40,46.34,26.16,41.78,40.76,20.28,39.58,42.04,42.91,40.72,40.49,41.68,47.23,37.51,27.66,35.89,38.41,36.64,28.36,28.14,44.02,47.08,37.79,46.28,26.04,28.11,32.86,43.26,43.26,20.72,21.91,51.46,31.90,40.15,54.10,48.97,51.86,40.45,48.10,40.36,44.12,26.54,48.36,50.26,53.79,51.27,53.77,45.13,48.32,39.61,48.61,47.25,46.74,36.60,44.56,45.84,46.22,48.93,51.15,51.08,37.43,35.81,35.81,21.93,21.93,46.62,29.88,52.41,47.94,53.97,32.82,51.15,52.55,52.15,47.11,51.34,49.58,48.18,52.62,45.97,47.34,38.05,31.90,34.84,35.04,35.42,49.52,50.67,42.32,49.13,43.01,47.17,46.82,43.43,41.65,46.28,45.37,48.82,48.23,44.61,46.26,48.20,45.42,54.25,52.83,28.68,43.01,46.84,21.76,52.01,47.18,41.84,52.33,51.71,43.02,48.95,54.73,50.99,54.01,41.42,46.61,50.24,48.08,51.26,48.51,39.95,47.73,52.54,51.84,46.34,51.06,51.62,52.12,39.91,50.00,51.58,42.49,50.90,43.36,51.61,52.30,54.34,54.79,54.24,53.89,49.58,53.88,51.67,54.49,49.33,51.22,43.94,46.20,29.58,47.50,44.26,43.06,47.46,37.38,23.95,44.98,50.28,23.88,46.57,27.23,22.00,35.36,51.95,53.77,50.28,42.15,28.55,20.00,54.47,45.10,53.74,55.88,51.07,54.55,51.35,45.15,53.45,55.24,51.46,50.87,50.63,53.55,53.33,42.04,48.97,49.27,45.39,48.59,30.01,46.27,44.93,51.83,50.91,45.61,23.01,42.63,51.63,43.63,50.48,35.87,21.53,51.58,38.73,41.74,51.78,51.41,46.27,48.10,36.05,50.65,47.60,34.85,29.24,45.00,46.48,22.39,43.66,32.56,35.52,40.03,25.23,47.47,20.76,35.23,44.69,26.31,49.16,46.22,41.60,50.55,50.30,36.11,48.48,33.74,47.95,41.11,36.32,27.48,35.24,46.11,49.42,39.97,38.06,43.98,30.34,44.73,35.13,37.67,40.25,36.84,46.98,35.12,48.12,45.58,28.28,42.34,39.01,37.20,36.53,39.94,49.59,51.25,48.35,49.62,52.23,50.49,44.96,49.17,28.15,49.45,53.19,53.15,44.19,52.29,49.66,24.59,43.98,20.59,21.65,43.43,22.16,21.98,20.83,24.03,44.15,27.38,24.92,36.22,47.56,21.86,45.33,40.15,32.49,25.75,20.13,21.39,27.26,45.42,21.06,22.73,24.11,20.91,33.78,35.43,35.73,44.12,30.38,44.08,45.59,33.23,25.26,53.65,52.23,24.72,23.98,27.77,28.48,26.99,41.46,42.93,34.33,38.35,20.04,23.55,43.57,26.89,30.98,31.34,35.42,27.28,21.49,42.08,20.37,50.99,29.89,32.79,23.76,22.84,31.94,20.41,20.22,36.32,35.67,37.47,21.10,21.98,27.35,32.31,46.72,41.06,27.32,46.73,27.58,23.94,22.95,24.93,20.30,24.82,42.79,27.50,39.43,49.29,35.96,26.33,38.90,46.52,50.99,25.71,27.57,45.21,40.39,32.44,34.66,40.33,21.71,24.60,20.25,23.90,28.59,26.84,45.26,25.55,24.83,30.13,21.87,35.06,48.66,44.26,44.70,48.78,49.81,24.27,21.65,26.19,30.87,32.98,38.86,37.82,38.59,40.93,30.50,35.58,57.34,43.37,21.38,44.70,40.26,34.66,40.33.
DEFINE o_db_13b2	0.16,0.31,0.17,0.28,0.02,0.09,0.09,0.08,0.30,0.11,0.12,0.18,0.16,0.06,0.08,0.09,0.75,0.14,0.11,0.06,0.08,0.13,0.15,0.13,0.16,0.14,0.20,0.08,0.22,0.10,0.06,0.09,0.10,0.12,0.07,0.09,0.12,0.09,0.15,0.13,0.12,0.16,0.13,0.06,0.07,0.12,0.17,0.11,0.13,0.09,0.11,0.10,0.09,0.08,0.07,0.09,0.18,0.23,0.15,0.31,0.17,0.12,0.09,0.09,0.11,0.09,0.14,0.11,0.10,0.40,0.11,0.11,0.12,0.18,0.17,0.15,0.10,0.16,0.12,0.18,0.12,0.20,0.26,0.26,0.36,0.44,0.09,0.26,0.13,0.06,0.08,0.04,0.13,0.05,0.17,0.05,0.20,0.08,0.17,0.10,0.11,0.15,0.02,0.03,0.05,0.08,0.09,0.20,0.10,0.16,0.04,0.14,0.03,0.11,0.16,0.24,0.21,0.21,0.32,0.32,0.16,0.34,0.08,0.09,0.26,0.06,0.07,0.06,0.11,0.06,0.11,0.09,0.23,0.16,0.16,0.05,0.09,0.21,0.32,0.31,0.37,0.04,0.07,0.04,0.07,0.08,0.13,0.18,0.09,0.06,0.12,0.10,0.12,0.11,0.10,0.12,0.12,0.30,0.12,0.14,0.12,0.35,0.16,0.36,0.18,0.18,0.37,0.14,0.14,0.14,0.13,0.11,0.08,0.10,0.07,0.22,0.17,0.17,0.17,0.11,0.27,0.15,0.11,0.12,0.23,0.18,0.16,0.12,0.29,0.17,0.12,0.25,0.17,0.26,0.15,0.11,0.17,0.13,0.10,0.10,0.27,0.23,0.24,0.10,0.29,0.20,0.23,0.10,0.15,0.15,0.12,0.25,0.16,0.17,0.17,0.27,0.15,0.18,0.25,0.18,0.28,0.27,0.19,0.16,0.19,0.13,0.18,0.32,0.19,0.18,0.22,0.17,0.15,0.19,0.17,0.12,0.20,0.18,0.17,0.11,0.15,0.10,0.13,0.18,0.17,0.16,0.14,0.14,0.15,0.14,0.06,0.08,0.03,0.09,0.16,0.01,0.02,0.08,0.03,0.02,0.22,0.02,0.07,0.26,0.04,0.02,0.08,0.01,0.07,0.01,0.07,0.20,0.26,0.19,0.03,0.13,0.03,0.15,0.09,0.03,0.29,0.04,0.18,0.09,0.05,0.10,0.19,0.03,0.15,0.02,0.08,0.33,0.04,0.25,0.03,0.04,0.15,0.13,0.16,0.02,0.10,0.23,0.05,0.03,0.21,0.04,0.06,0.15,0.01,0.07,0.03,0.05,0.09,0.02,0.01,0.04,0.06,0.03,0.07,0.03,0.03,0.05,0.09,0.16,0.14,0.15,0.25,0.05,0.16,0.10,0.09,0.10,0.04,0.03,0.14,0.30,0.35,0.41,0.57,0.38,0.41,0.33,0.52,0.33,0.30,0.26,0.27,0.24,0.20,0.60,0.26,0.24,0.37,0.23,0.86,0.33,0.26,0.10,0.58,0.49,0.48,0.44,0.39,0.32,0.32,0.29,0.27,0.27,0.17,0.15,0.14,0.23,0.23,0.58,0.57,0.42,0.35,0.31,0.29,0.26,0.26,0.25,0.23,0.22,0.22,0.20,0.20,0.20,0.19,0.17,0.17,0.13,0.13,0.06,0.02,0.68,0.68,0.66,0.61,0.53,0.49,0.46,0.45,0.43,0.43,0.41,0.40,0.39,0.36,0.36,0.35,0.35,0.34,0.34,0.31,0.30,0.28,0.27,0.26,0.25,0.24,0.22,0.21,0.16,0.15,0.12,0.06,0.23,0.19,0.36,0.34,0.26,0.23,0.19,0.77,0.60,0.45,0.43,0.40,0.39,0.17,0.13,0.41,0.24,0.64,0.28,0.28,0.26,0.19,0.16,0.12,0.52,0.48,0.42,0.34,0.30,0.37,0.30,0.26,0.18,0.38,0.34,0.18,0.11,0.68,0.19,0.28,0.23,0.19.

#ASSIGN ohzn_top	APPEND(ohzn_top, ohzn_top2).
#ASSIGN ohzn_bot	APPEND(ohzn_bot, ohzn_bot2).
ASSIGN otaxon		APPEND(otaxon, otaxon2).
#ASSIGN ohzn_desgn	APPEND(ohzn_desgn, ohzn_desgn2).
#ASSIGN ohzn_master	APPEND(ohzn_master, ohzn_master2).
ASSIGN c_tot		APPEND(c_tot, c_tot2).
ASSIGN o_db_13b		APPEND(o_db_13b, o_db_13b2).

# Wet organic layers are separated from dry organic layers 
ASSIGN otaxon	IF otaxon == "saprist" or otaxon == "hemist" or otaxon == "fibrist" or otaxon == "histel" or otaxon == "gelisol" or
					otaxon == "unkown" THEN "wet"
				ELSE IF otaxon == "alfisol" or otaxon == "entisol" or otaxon == "inceptisol" or otaxon == "spodosol" or
					otaxon == "ultisol" or otaxon == "vertisol" or otaxon == "andisol" or otaxon == "folist" or otaxon == "unknown2" THEN "dry" 
				ELSE "other".  #don't want the mollisol in there, delete it in the input file for NASIS 6.2
DEFINE orgtype	IF (suborder == "saprists" or suborder == "hemists" or suborder == "fibrists" or (suborder == "histels" and
					grtgroup != "folistels") or lieutex=="peat" or lieutex=="mpt" or lieutex=="muck") and oc_r > 20 THEN "wet"
				ELSE IF oc_r > 20 and (lieutex=="spm" or lieutex=="mpm" or lieutex=="hpm" or suborder=="folists" or grtgroup=="folistels") THEN "dry" 
				ELSE IF oc_r > 20 then "wet"
				ELSE "other".

ASSIGN c_tot	IF orgtype == "other" THEN c_tot ELSE LOOKUP(orgtype == otaxon, c_tot).
ASSIGN o_db_13b	IF orgtype == "other" THEN o_db_13b ELSE LOOKUP(orgtype == otaxon, o_db_13b).

# Determines the 'distance' of each soil from the target soil.
DEFINE distance2		SQRT(POW(oc_r - c_tot,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_org		ARRAYMIN(distance2).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_org 		ARRAYPOSITION(distance2).
DEFINE pos1_org 	LOOKUP(minn1_org, distance2, pos_org).
DEFINE dist2_org	IF pos_org == pos1_org THEN distance2 + 1000 ELSE distance2.
DEFINE minn2_org	ARRAYMIN(dist2_org).
DEFINE pos2_org		LOOKUP(minn2_org, dist2_org, pos_org).
DEFINE dist3_org	IF pos_org == pos2_org THEN dist2_org + 1000 ELSE dist2_org.
DEFINE minn3_org	ARRAYMIN(dist3_org).
DEFINE pos3_org		LOOKUP(minn3_org, dist3_org, pos_org).
DEFINE dist4_org	IF pos_org == pos3_org THEN dist3_org + 1000 ELSE dist3_org.
DEFINE minn4_org	ARRAYMIN(dist4_org).
DEFINE pos4_org		LOOKUP(minn4_org, dist4_org, pos_org).
DEFINE dist5_org	IF pos_org == pos4_org THEN dist4_org + 1000 ELSE dist4_org.
DEFINE minn5_org	ARRAYMIN(dist5_org).
DEFINE pos5_org 	LOOKUP(minn5_org, dist5_org, pos_org).
DEFINE dist6_org	IF pos_org == pos5_org THEN dist5_org + 1000 ELSE dist5_org.
DEFINE minn6_org	ARRAYMIN(dist6_org).
DEFINE pos6_org		LOOKUP(minn6_org, dist6_org, pos_org).
DEFINE dist7_org	IF pos_org == pos6_org THEN dist6_org + 1000 ELSE dist6_org.
DEFINE minn7_org	ARRAYMIN(dist7_org).
DEFINE pos7_org		LOOKUP(minn7_org, dist7_org, pos_org).
DEFINE dist8_org	IF pos_org == pos7_org THEN dist7_org + 1000 ELSE dist7_org.
DEFINE minn8_org	ARRAYMIN(dist8_org).
DEFINE pos8_org		LOOKUP(minn8_org, dist8_org, pos_org).
DEFINE dist9_org	IF pos_org == pos8_org THEN dist8_org + 1000 ELSE dist8_org.
DEFINE minn9_org	ARRAYMIN(dist9_org).
DEFINE pos9_org		LOOKUP(minn9_org, dist9_org, pos_org).
DEFINE dist10_org	IF pos_org == pos9_org THEN dist9_org + 1000 ELSE dist9_org.
DEFINE minn10_org	ARRAYMIN(dist10_org).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_org		LOOKUP(minn1_org, distance2, o_db_13b).
ASSIGN BD1_org		ARRAYMIN(BD1_org).
DEFINE BD2_org		LOOKUP(minn2_org, dist2_org, o_db_13b).
ASSIGN BD2_org		ARRAYMIN(BD2_org).
DEFINE BD3_org		LOOKUP(minn3_org, dist3_org, o_db_13b).
ASSIGN BD3_org		ARRAYMIN(BD3_org).
DEFINE BD4_org		LOOKUP(minn4_org, dist4_org, o_db_13b).
ASSIGN BD4_org		ARRAYMIN(BD4_org).
DEFINE BD5_org		LOOKUP(minn5_org, dist5_org, o_db_13b).
ASSIGN BD5_org		ARRAYMIN(BD5_org).
DEFINE BD6_org		LOOKUP(minn6_org, dist6_org, o_db_13b).
ASSIGN BD6_org		ARRAYMIN(BD6_org).
DEFINE BD7_org		LOOKUP(minn7_org, dist7_org, o_db_13b).
ASSIGN BD7_org		ARRAYMIN(BD7_org).
DEFINE BD8_org		LOOKUP(minn8_org, dist8_org, o_db_13b).
ASSIGN BD8_org		ARRAYMIN(BD8_org).
DEFINE BD9_org		LOOKUP(minn9_org, dist9_org, o_db_13b).
ASSIGN BD9_org		ARRAYMIN(BD9_org).
DEFINE BD10_org		LOOKUP(minn10_org, dist10_org, o_db_13b).
ASSIGN BD10_org		ARRAYMIN(BD10_org).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_org	IF minn1_org == 0 THEN 1 ELSE minn1_org.
ASSIGN minn2_org	IF minn2_org == 0 THEN 1 ELSE minn2_org.
ASSIGN minn3_org	IF minn3_org == 0 THEN 1 ELSE minn3_org.
ASSIGN minn4_org	IF minn4_org == 0 THEN 1 ELSE minn4_org.
ASSIGN minn5_org	IF minn5_org == 0 THEN 1 ELSE minn5_org.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_org		minn1_org + minn2_org + minn3_org + minn4_org + minn5_org.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship.
DEFINE rel_dist1_org	POW(sum_dist_org/minn1_org,1).
DEFINE rel_dist2_org	POW(sum_dist_org/minn2_org,1).
DEFINE rel_dist3_org	POW(sum_dist_org/minn3_org,1).
DEFINE rel_dist4_org	POW(sum_dist_org/minn4_org,1).
DEFINE rel_dist5_org	POW(sum_dist_org/minn5_org,1).
DEFINE rel_dist6_org	POW(sum_dist_org/minn6_org,1).
DEFINE rel_dist7_org	POW(sum_dist_org/minn7_org,1).
DEFINE rel_dist8_org	POW(sum_dist_org/minn8_org,1).
DEFINE rel_dist9_org	POW(sum_dist_org/minn9_org,1).
DEFINE rel_dist10_org	POW(sum_dist_org/minn10_org,1).

DEFINE sum_rel_dist_org		rel_dist1_org + rel_dist2_org + rel_dist3_org + rel_dist4_org + rel_dist5_org + rel_dist6_org + rel_dist7_org + rel_dist8_org + rel_dist9_org + rel_dist10_org.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_org	rel_dist1_org/sum_rel_dist_org.
DEFINE wt2_org	rel_dist2_org/sum_rel_dist_org.
DEFINE wt3_org	rel_dist3_org/sum_rel_dist_org.
DEFINE wt4_org	rel_dist4_org/sum_rel_dist_org.
DEFINE wt5_org	rel_dist5_org/sum_rel_dist_org.
DEFINE wt6_org	rel_dist6_org/sum_rel_dist_org.
DEFINE wt7_org	rel_dist7_org/sum_rel_dist_org.
DEFINE wt8_org	rel_dist8_org/sum_rel_dist_org.
DEFINE wt9_org	rel_dist9_org/sum_rel_dist_org.
DEFINE wt10_org	rel_dist10_org/sum_rel_dist_org.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_org	ROUND(BD1_org*wt1_org + BD2_org*wt2_org + BD3_org*wt3_org + BD4_org*wt4_org + BD5_org*wt5_org + BD6_org*wt6_org + BD7_org*wt7_org + BD8_org*wt8_org + BD9_org*wt9_org + BD10_org*wt10_org,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Organic BD %s" wt_BD_org.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s" BD1_org, BD2_org, BD3_org, BD4_org, BD5_org.

# DENSE SOILS-------------------------------------------------------------
# Read the table of bulk densities and other properties of soils that are dense, fragic, para-lithic, or cemented.
INPUT fhzn_top numeric, fhzn_bot numeric, fhzn_desgn char, fhorizon_type char, fhzn_master char, fsand numeric, 
	fsilt numeric, fclay numeric, foc numeric, fw3cld numeric, f_db_od numeric, f_db_13b numeric
	FILE "bd_other"
	AGGREGATE COLUMN fhzn_top none, fhzn_bot none, fhzn_desgn none, fhorizon_type none, fhzn_master none, fsand none, 
	fsilt none, fclay none, foc none, fw3cld none, f_db_od none, f_db_13b none.

DEFINE dense_class	IF hzname matches "*x*" or (resdept_r == hzdept_r and reskind1 == "fragipan") or 
						(subgrp matches "fragic*" and ksat_r < 1.41) THEN "x"
					ELSE IF (resdept_r == hzdept_r and (reskind1 == "densic material" or reskind1 == "bedrock, densic")) or
						(hzname matches "*d*" and not hzname matches "*di*") THEN "d"
					ELSE IF (resdept_r == hzdept_r and (reskind1 == "cemented horizon" or reskind1 == "duripan" or
						reskind1 == "ortstein" or reskind1 == "petrocalcic" or reskind1 == "petroferric" or 
						reskind1 == "petrogypsic")) or (hzname matches "*m*" and not hzname matches "*ma*") THEN "m"
					ELSE IF hzname matches "*r*" or (resdept_r == hzdept_r and reskind1 == "bedrock, paralithic") THEN "r"
					ELSE IF hzname matches "*hs*" THEN "hs"
					ELSE IF (hzname matches "*s*" and not hzname matches "*ss*" and not hzname matches "*se*") or hzname matches "*o*" THEN "s"
					ELSE IF hzname matches "*h*" THEN "h"
					ELSE IF hzname matches "*v*" or (resdept_r == hzdept_r and reskind1 == "plinthite") THEN "v"
					ELSE IF hzname matches "*q*" THEN "q"
					ELSE "other".
ASSIGN dense_class	ARRAYMAX(dense_class).

ASSIGN fsand	IF dense_class == "other" THEN fsand ELSE LOOKUP(dense_class == fhorizon_type,fsand).
ASSIGN fsilt	IF dense_class == "other" THEN fsilt ELSE LOOKUP(dense_class == fhorizon_type,fsilt).
ASSIGN fclay	IF dense_class == "other" THEN fclay ELSE LOOKUP(dense_class == fhorizon_type,fclay).
ASSIGN foc		IF dense_class == "other" THEN foc ELSE LOOKUP(dense_class == fhorizon_type,foc).
ASSIGN f_db_13b	IF dense_class == "other" THEN f_db_13b ELSE LOOKUP(dense_class == fhorizon_type,f_db_13b).

# The following sections are to normalize the variables to avoid bias toward one attribute or the other.
# Calculates the mean and standard deviation of the variables in the reference data set (input file).
DEFINE ave_fsand		ARRAYAVG(fsand).
DEFINE std_fsand		ARRAYSTDEV(fsand).
DEFINE ave_fsilt		ARRAYAVG(fsilt).
DEFINE std_fsilt		ARRAYSTDEV(fsilt).
DEFINE ave_fclay		ARRAYAVG(fclay).
DEFINE std_fclay		ARRAYSTDEV(fclay).
DEFINE ave_foc			ARRAYAVG(foc).
DEFINE std_foc			ARRAYSTDEV(foc).

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_fsand		((fsand)-ave_fsand)/std_fsand.
DEFINE temp_fsilt		((fsilt)-ave_fsilt)/std_fsilt.
DEFINE temp_fclay		((fclay)-ave_fclay)/std_fclay.
DEFINE temp_foc			((foc)-ave_foc)/std_foc.

DEFINE temp_sandtotal_r_dns	((sandtotal_r)-ave_fsand)/std_fsand.
DEFINE temp_silttotal_r_dns	((silttotal_r)-ave_fsilt)/std_fsilt.
DEFINE temp_claytotal_r_dns	((claytotal_r)-ave_fclay)/std_fclay.
DEFINE temp_oc_r_dns		((oc_r)-ave_foc)/std_foc.

# Gets the minimum-maximum range of the temporary variables.
DEFINE range_fsand		ARRAYMAX(temp_fsand)-ARRAYMIN(temp_fsand).
DEFINE range_fsilt		ARRAYMAX(temp_fsilt)-ARRAYMIN(temp_fsilt).
DEFINE range_fclay		ARRAYMAX(temp_fclay)-ARRAYMIN(temp_fclay).
DEFINE range_foc		ARRAYMAX(temp_foc)-ARRAYMIN(temp_foc).

# Puts the ranges of the variables into an array.
DEFINE cat_ranges_dns	APPEND(range_fsand,APPEND(range_fsilt,APPEND(range_fclay, range_foc))).

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_fsand		temp_fsand*ARRAYMAX(cat_ranges_dns)/range_fsand.
DEFINE trans_fsilt		temp_fsilt*ARRAYMAX(cat_ranges_dns)/range_fsilt.
DEFINE trans_fclay		temp_fclay*ARRAYMAX(cat_ranges_dns)/range_fclay.
DEFINE trans_foc		temp_foc*ARRAYMAX(cat_ranges_dns)/range_foc.

DEFINE trans_sandtotal_r_dns	temp_sandtotal_r_dns*ARRAYMAX(cat_ranges_dns)/range_fsand.
DEFINE trans_silttotal_r_dns	temp_silttotal_r_dns*ARRAYMAX(cat_ranges_dns)/range_fsilt.
DEFINE trans_claytotal_r_dns	temp_claytotal_r_dns*ARRAYMAX(cat_ranges_dns)/range_fclay.
DEFINE trans_oc_r_dns			temp_oc_r_dns*ARRAYMAX(cat_ranges_dns)/range_foc.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance3	SQRT(POW(trans_sandtotal_r_dns - trans_fsand,2)+POW(trans_silttotal_r_dns - trans_fsilt,2)+
					POW(trans_claytotal_r_dns - trans_fclay,2)+POW(trans_oc_r_dns - trans_foc,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_dns	ARRAYMIN(distance3).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_dns 		ARRAYPOSITION(distance3).
DEFINE pos1_dns 	LOOKUP(minn1_dns, distance3, pos_dns).
DEFINE dist2_dns	IF pos_dns == pos1_dns THEN distance3 + 1000 ELSE distance3.
DEFINE minn2_dns	ARRAYMIN(dist2_dns).
DEFINE pos2_dns		LOOKUP(minn2_dns, dist2_dns, pos_dns).
DEFINE dist3_dns	IF pos_dns == pos2_dns THEN dist2_dns + 1000 ELSE dist2_dns.
DEFINE minn3_dns	ARRAYMIN(dist3_dns).
DEFINE pos3_dns		LOOKUP(minn3_dns, dist3_dns, pos_dns).
DEFINE dist4_dns	IF pos_dns == pos3_dns THEN dist3_dns + 1000 ELSE dist3_dns.
DEFINE minn4_dns	ARRAYMIN(dist4_dns).
DEFINE pos4_dns		LOOKUP(minn4_dns, dist4_dns, pos_dns).
DEFINE dist5_dns	IF pos_dns == pos4_dns THEN dist4_dns + 1000 ELSE dist4_dns.
DEFINE minn5_dns	ARRAYMIN(dist5_dns).
DEFINE pos5_dns		LOOKUP(minn5_dns, dist5_dns, pos_dns).
DEFINE dist6_dns	IF pos_dns == pos5_dns THEN dist5_dns + 1000 ELSE dist5_dns.
DEFINE minn6_dns	ARRAYMIN(dist6_dns).
DEFINE pos6_dns		LOOKUP(minn6_dns, dist6_dns, pos_dns).
DEFINE dist7_dns	IF pos_dns == pos6_dns THEN dist6_dns + 1000 ELSE dist6_dns.
DEFINE minn7_dns	ARRAYMIN(dist7_dns).
DEFINE pos7_dns		LOOKUP(minn7_dns, dist7_dns, pos_dns).
DEFINE dist8_dns	IF pos_dns == pos7_dns THEN dist7_dns + 1000 ELSE dist7_dns.
DEFINE minn8_dns	ARRAYMIN(dist8_dns).
DEFINE pos8_dns		LOOKUP(minn8_dns, dist8_dns, pos_dns).
DEFINE dist9_dns	IF pos_dns == pos8_dns THEN dist8_dns + 1000 ELSE dist8_dns.
DEFINE minn9_dns	ARRAYMIN(dist9_dns).
DEFINE pos9_dns		LOOKUP(minn9_dns, dist9_dns, pos_dns).
DEFINE dist10_dns	IF pos_dns == pos9_dns THEN dist9_dns + 1000 ELSE dist9_dns.
DEFINE minn10_dns	ARRAYMIN(dist10_dns).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_dns		LOOKUP(minn1_dns, distance3, f_db_13b).
ASSIGN BD1_dns		ARRAYMIN(BD1_dns).
DEFINE BD2_dns		LOOKUP(minn2_dns, dist2_dns, f_db_13b).
ASSIGN BD2_dns		ARRAYMIN(BD2_dns).
DEFINE BD3_dns		LOOKUP(minn3_dns, dist3_dns, f_db_13b).
ASSIGN BD3_dns		ARRAYMIN(BD3_dns).
DEFINE BD4_dns		LOOKUP(minn4_dns, dist4_dns, f_db_13b).
ASSIGN BD4_dns		ARRAYMIN(BD4_dns).
DEFINE BD5_dns		LOOKUP(minn5_dns, dist5_dns, f_db_13b).
ASSIGN BD5_dns		ARRAYMIN(BD5_dns).
DEFINE BD6_dns		LOOKUP(minn6_dns, dist6_dns, f_db_13b).
ASSIGN BD6_dns		ARRAYMIN(BD6_dns).
DEFINE BD7_dns		LOOKUP(minn7_dns, dist7_dns, f_db_13b).
ASSIGN BD7_dns		ARRAYMIN(BD7_dns).
DEFINE BD8_dns		LOOKUP(minn8_dns, dist8_dns, f_db_13b).
ASSIGN BD8_dns		ARRAYMIN(BD8_dns).
DEFINE BD9_dns		LOOKUP(minn9_dns, dist9_dns, f_db_13b).
ASSIGN BD9_dns		ARRAYMIN(BD9_dns).
DEFINE BD10_dns		LOOKUP(minn10_dns, dist10_dns, f_db_13b).
ASSIGN BD10_dns		ARRAYMIN(BD10_dns).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_dns	IF minn1_dns == 0 THEN 1 ELSE minn1_dns.
ASSIGN minn2_dns	IF minn2_dns == 0 THEN 1 ELSE minn2_dns.
ASSIGN minn3_dns	IF minn3_dns == 0 THEN 1 ELSE minn3_dns.
ASSIGN minn4_dns	IF minn4_dns == 0 THEN 1 ELSE minn4_dns.
ASSIGN minn5_dns	IF minn5_dns == 0 THEN 1 ELSE minn5_dns.
ASSIGN minn6_dns	IF minn6_dns == 0 THEN 1 ELSE minn6_dns.
ASSIGN minn7_dns	IF minn7_dns == 0 THEN 1 ELSE minn7_dns.
ASSIGN minn8_dns	IF minn8_dns == 0 THEN 1 ELSE minn8_dns.
ASSIGN minn9_dns	IF minn9_dns == 0 THEN 1 ELSE minn9_dns.
ASSIGN minn10_dns	IF minn10_dns == 0 THEN 1 ELSE minn10_dns.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_dns		minn1_dns + minn2_dns + minn3_dns + minn4_dns + minn5_dns + minn6_dns + minn7_dns + minn8_dns + minn9_dns + minn10_dns.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_dns	POW(sum_dist_dns/minn1_dns,1).
DEFINE rel_dist2_dns	POW(sum_dist_dns/minn2_dns,1).
DEFINE rel_dist3_dns	POW(sum_dist_dns/minn3_dns,1).
DEFINE rel_dist4_dns	POW(sum_dist_dns/minn4_dns,1).
DEFINE rel_dist5_dns	POW(sum_dist_dns/minn5_dns,1).
DEFINE rel_dist6_dns	POW(sum_dist_dns/minn6_dns,1).
DEFINE rel_dist7_dns	POW(sum_dist_dns/minn7_dns,1).
DEFINE rel_dist8_dns	POW(sum_dist_dns/minn8_dns,1).
DEFINE rel_dist9_dns	POW(sum_dist_dns/minn9_dns,1).
DEFINE rel_dist10_dns	POW(sum_dist_dns/minn10_dns,1).

DEFINE sum_rel_dist_dns		rel_dist1_dns + rel_dist2_dns + rel_dist3_dns + rel_dist4_dns + rel_dist5_dns + rel_dist6_dns + rel_dist7_dns + rel_dist8_dns + rel_dist9_dns + rel_dist10_dns.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_dns	rel_dist1_dns/sum_rel_dist_dns.
DEFINE wt2_dns	rel_dist2_dns/sum_rel_dist_dns.
DEFINE wt3_dns	rel_dist3_dns/sum_rel_dist_dns.
DEFINE wt4_dns	rel_dist4_dns/sum_rel_dist_dns.
DEFINE wt5_dns	rel_dist5_dns/sum_rel_dist_dns.
DEFINE wt6_dns	rel_dist6_dns/sum_rel_dist_dns.
DEFINE wt7_dns  rel_dist7_dns/sum_rel_dist_dns.
DEFINE wt8_dns	rel_dist8_dns/sum_rel_dist_dns.
DEFINE wt9_dns	rel_dist9_dns/sum_rel_dist_dns.
DEFINE wt10_dns	rel_dist10_dns/sum_rel_dist_dns.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_dns	ROUND(BD1_dns*wt1_dns + BD2_dns*wt2_dns + BD3_dns*wt3_dns + BD4_dns*wt4_dns + BD5_dns*wt5_dns + BD6_dns*wt6_dns + BD7_dns*wt7_dns + BD8_dns*wt8_dns + BD9_dns*wt9_dns + BD10_dns*wt10_dns,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Dense BD %s, %s" wt_BD_dns, dense_class.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s, %s, %s, %s" BD1_dns, BD2_dns, BD3_dns, BD4_dns, BD5_dns, BD6_dns, BD7_dns, BD8_dns.

# SANDY SOILS-------------------------------------------------------------
# Read the table of bulk densities and other properties of soils that are sandy (>70% sand).
INPUT shzn_top numeric, shzn_bot numeric, shzn_desgn char, shzn_master char, ssand numeric, sand_vc numeric, sand_c numeric, 
	sand_m numeric, sand_f numeric, sand_vf numeric, ssilt numeric, sclay numeric, s_oc numeric, s_db_13b numeric
	FILE "bd_sands"
	AGGREGATE COLUMN shzn_top none, shzn_bot none, shzn_desgn none, shzn_master none, ssand none, sand_vc none, sand_c none, 
	sand_m none, sand_f none, sand_vf none, ssilt none, sclay none, s_oc none, s_db_13b none.

ASSIGN shzn_desgn	IF shzn_desgn matches "*Ap*" THEN "Ap" 
					ELSE IF shzn_desgn matches "*A*" THEN "A"
					ELSE IF shzn_desgn matches "*Bt*" THEN "Bt"
					ELSE IF shzn_desgn matches "*B*" THEN "B"
					ELSE IF shzn_desgn matches "*E*" THEN "E"
					ELSE IF shzn_desgn matches "*C*" THEN "C"
					ELSE "other".
# Gets the first master horizon.
DEFINE hrzn2	IF hzname matches "*Ap*" THEN "Ap" 
				ELSE IF hzn2 matches "*A*" and hzn2 != "BA" and hzn2 != "EA" and hzn2 != "CA" THEN "A"
				ELSE IF hzn3 matches "*Bt*" THEN "Bt" 
				ELSE IF hzn2 matches "*B*" and hzn2 != "EB" and hzn2 != "CB" THEN "B"
				ELSE IF hzn2 matches "*E*" and hzn2 != "CE" THEN "E"
				ELSE IF hzn2 matches "*C*" THEN "C"
				ELSE "unknown".

ASSIGN sand_vc	IF hrzn2 == "unknown" THEN sand_vc ELSE LOOKUP(hrzn2 == shzn_desgn, sand_vc).
ASSIGN sand_c	IF hrzn2 == "unknown" THEN sand_c ELSE LOOKUP(hrzn2 == shzn_desgn, sand_c).
ASSIGN sand_m	IF hrzn2 == "unknown" THEN sand_m ELSE LOOKUP(hrzn2 == shzn_desgn, sand_m).
ASSIGN sand_f	IF hrzn2 == "unknown" THEN sand_f ELSE LOOKUP(hrzn2 == shzn_desgn, sand_f).
ASSIGN sand_vf	IF hrzn2 == "unknown" THEN sand_vf ELSE LOOKUP(hrzn2 == shzn_desgn, sand_vf).
ASSIGN ssilt	IF hrzn2 == "unknown" THEN ssilt ELSE LOOKUP(hrzn2 == shzn_desgn, ssilt).
ASSIGN sclay	IF hrzn2 == "unknown" THEN sclay ELSE LOOKUP(hrzn2 == shzn_desgn, sclay).
ASSIGN s_oc		IF hrzn2 == "unknown" THEN s_oc ELSE LOOKUP(hrzn2 == shzn_desgn, s_oc).
ASSIGN s_db_13b	IF hrzn2 == "unknown" THEN s_db_13b ELSE LOOKUP(hrzn2 == shzn_desgn, s_db_13b).

# The following sections are to normalize the variables to avoid bias toward one attribute or the other.
# Calculates the mean and standard deviation of the variables in the reference data set (input file).
DEFINE ave_sand_vc		ARRAYAVG(sand_vc).
DEFINE std_sand_vc		ARRAYSTDEV(sand_vc).
DEFINE ave_sand_c		ARRAYAVG(sand_c).
DEFINE std_sand_c		ARRAYSTDEV(sand_c).
DEFINE ave_sand_m		ARRAYAVG(sand_m).
DEFINE std_sand_m		ARRAYSTDEV(sand_m).
DEFINE ave_sand_f		ARRAYAVG(sand_f).
DEFINE std_sand_f		ARRAYSTDEV(sand_f).
DEFINE ave_sand_vf		ARRAYAVG(sand_vf).
DEFINE std_sand_vf		ARRAYSTDEV(sand_vf).
DEFINE ave_ssilt		ARRAYAVG(ssilt).
DEFINE std_ssilt		ARRAYSTDEV(ssilt).
DEFINE ave_sclay		ARRAYAVG(sclay).
DEFINE std_sclay		ARRAYSTDEV(sclay).
DEFINE ave_s_oc			ARRAYAVG(s_oc).
DEFINE std_s_oc			ARRAYSTDEV(s_oc).

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_sand_vc		((sand_vc)-ave_sand_vc)/std_sand_vc.
DEFINE temp_sand_c		((sand_c)-ave_sand_c)/std_sand_c.
DEFINE temp_sand_m		((sand_m)-ave_sand_m)/std_sand_m.
DEFINE temp_sand_f		((sand_f)-ave_sand_f)/std_sand_f.
DEFINE temp_sand_vf		((sand_vf)-ave_sand_vf)/std_sand_vf.
DEFINE temp_ssilt		((ssilt)-ave_ssilt)/std_ssilt.
DEFINE temp_sclay		((sclay)-ave_sclay)/std_sclay.
DEFINE temp_s_oc		((s_oc)-ave_s_oc)/std_s_oc.

DEFINE temp_sandvc_r	((sandvc_r)-ave_sand_vc)/std_sand_vc.
DEFINE temp_sandco_r	((sandco_r)-ave_sand_c)/std_sand_c.
DEFINE temp_sandmed_r	((sandmed_r)-ave_sand_m)/std_sand_m.
DEFINE temp_sandfine_r	((sandfine_r)-ave_sand_f)/std_sand_f.
DEFINE temp_sandvf_r	((sandvf_r)-ave_sand_vf)/std_sand_vf.
DEFINE temp_silttotal_r	((silttotal_r)-ave_ssilt)/std_ssilt.
DEFINE temp_claytotal_r	((claytotal_r)-ave_sclay)/std_sclay.
DEFINE temp_oc_r		((oc_r)-ave_s_oc)/std_s_oc.

# Gets the minimum-maximum range of the temporary variables.
DEFINE range_sand_vc	ARRAYMAX(temp_sand_vc)-ARRAYMIN(temp_sand_vc).
DEFINE range_sand_c		ARRAYMAX(temp_sand_c)-ARRAYMIN(temp_sand_c).
DEFINE range_sand_m		ARRAYMAX(temp_sand_m)-ARRAYMIN(temp_sand_m).
DEFINE range_sand_f		ARRAYMAX(temp_sand_f)-ARRAYMIN(temp_sand_f).
DEFINE range_sand_vf	ARRAYMAX(temp_sand_vf)-ARRAYMIN(temp_sand_vf).
DEFINE range_ssilt		ARRAYMAX(temp_ssilt)-ARRAYMIN(temp_ssilt).
DEFINE range_sclay		ARRAYMAX(temp_sclay)-ARRAYMIN(temp_sclay).
DEFINE range_s_oc		ARRAYMAX(temp_s_oc)-ARRAYMIN(temp_s_oc).

# Puts the ranges of the variables into an array.
DEFINE cat_ranges		APPEND(range_sand_vc,APPEND(range_sand_c,APPEND(range_sand_m,APPEND(range_sand_f,
						APPEND(range_sand_vf,APPEND(range_ssilt,APPEND(range_sclay, range_s_oc))))))).

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_sand_vc	temp_sand_vc*ARRAYMAX(cat_ranges)/range_sand_vc.
DEFINE trans_sand_c		temp_sand_c*ARRAYMAX(cat_ranges)/range_sand_c.
DEFINE trans_sand_m		temp_sand_m*ARRAYMAX(cat_ranges)/range_sand_m.
DEFINE trans_sand_f		temp_sand_f*ARRAYMAX(cat_ranges)/range_sand_f.
DEFINE trans_sand_vf	temp_sand_vf*ARRAYMAX(cat_ranges)/range_sand_vf.
DEFINE trans_ssilt		temp_ssilt*ARRAYMAX(cat_ranges)/range_ssilt.
DEFINE trans_sclay		temp_sclay*ARRAYMAX(cat_ranges)/range_sclay.
DEFINE trans_s_oc		temp_s_oc*ARRAYMAX(cat_ranges)/range_s_oc.

DEFINE trans_sandvc_r	temp_sandvc_r*ARRAYMAX(cat_ranges)/range_sand_vc.
DEFINE trans_sandco_r	temp_sandco_r*ARRAYMAX(cat_ranges)/range_sand_c.
DEFINE trans_sandmed_r	temp_sandmed_r*ARRAYMAX(cat_ranges)/range_sand_m.
DEFINE trans_sandfine_r	temp_sandfine_r*ARRAYMAX(cat_ranges)/range_sand_f.
DEFINE trans_sandvf_r	temp_sandvf_r*ARRAYMAX(cat_ranges)/range_sand_vf.
DEFINE trans_silttotal_r	temp_silttotal_r*ARRAYMAX(cat_ranges)/range_ssilt.
DEFINE trans_claytotal_r	temp_claytotal_r*ARRAYMAX(cat_ranges)/range_sclay.
DEFINE trans_oc_r		temp_oc_r*ARRAYMAX(cat_ranges)/range_s_oc.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance		SQRT(POW(trans_sandvc_r - trans_sand_vc,2)+POW(trans_sandco_r - trans_sand_c,2)+
					POW(trans_sandmed_r - trans_sand_m,2)+POW(trans_sandfine_r - trans_sand_f,2)+
					POW(trans_sandvf_r - trans_sand_vf,2)+POW(trans_silttotal_r - trans_ssilt,2)+
					POW(trans_claytotal_r - trans_sclay,2)+POW(trans_oc_r - trans_s_oc,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1		ARRAYMIN(distance).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos 		ARRAYPOSITION(distance).
DEFINE pos1 	LOOKUP(minn1, distance, pos).
DEFINE dist2	IF pos == pos1 THEN distance + 1000 ELSE distance.
DEFINE minn2	ARRAYMIN(dist2).
DEFINE pos2		LOOKUP(minn2, dist2, pos).
DEFINE dist3	IF pos == pos2 THEN dist2 + 1000 ELSE dist2.
DEFINE minn3	ARRAYMIN(dist3).
DEFINE pos3		LOOKUP(minn3, dist3, pos).
DEFINE dist4	IF pos == pos3 THEN dist3 + 1000 ELSE dist3.
DEFINE minn4	ARRAYMIN(dist4).
DEFINE pos4		LOOKUP(minn4, dist4, pos).
DEFINE dist5	IF pos == pos4 THEN dist4 + 1000 ELSE dist4.
DEFINE minn5	ARRAYMIN(dist5).
DEFINE pos5		LOOKUP(minn5, dist5, pos).
DEFINE dist6	IF pos == pos5 THEN dist5 + 1000 ELSE dist5.
DEFINE minn6	ARRAYMIN(dist6).
DEFINE pos6		LOOKUP(minn6, dist6, pos).
DEFINE dist7	IF pos == pos6 THEN dist6 + 1000 ELSE dist6.
DEFINE minn7	ARRAYMIN(dist7).
DEFINE pos7		LOOKUP(minn7, dist7, pos).
DEFINE dist8	IF pos == pos7 THEN dist7 + 1000 ELSE dist7.
DEFINE minn8	ARRAYMIN(dist8).
DEFINE pos8		LOOKUP(minn8, dist8, pos).
DEFINE dist9	IF pos == pos8 THEN dist8 + 1000 ELSE dist8.
DEFINE minn9	ARRAYMIN(dist9).
DEFINE pos9		LOOKUP(minn9, dist9, pos).
DEFINE dist10	IF pos == pos9 THEN dist9 + 1000 ELSE dist9.
DEFINE minn10	ARRAYMIN(dist10).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1		LOOKUP(minn1, distance, s_db_13b).
ASSIGN BD1		ARRAYMIN(BD1).
DEFINE BD2		LOOKUP(minn2, dist2, s_db_13b).
ASSIGN BD2		ARRAYMIN(BD2).
DEFINE BD3		LOOKUP(minn3, dist3, s_db_13b).
ASSIGN BD3		ARRAYMIN(BD3).
DEFINE BD4		LOOKUP(minn4, dist4, s_db_13b).
ASSIGN BD4		ARRAYMIN(BD4).
DEFINE BD5		LOOKUP(minn5, dist5, s_db_13b).
ASSIGN BD5		ARRAYMIN(BD5).
DEFINE BD6		LOOKUP(minn6, dist6, s_db_13b).
ASSIGN BD6		ARRAYMIN(BD6).
DEFINE BD7		LOOKUP(minn7, dist7, s_db_13b).
ASSIGN BD7		ARRAYMIN(BD7).
DEFINE BD8		LOOKUP(minn8, dist8, s_db_13b).
ASSIGN BD8		ARRAYMIN(BD8).
DEFINE BD9		LOOKUP(minn9, dist9, s_db_13b).
ASSIGN BD9		ARRAYMIN(BD9).
DEFINE BD10		LOOKUP(minn10, dist10, s_db_13b).
ASSIGN BD10		ARRAYMIN(BD10).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1	IF minn1 == 0 THEN 1 ELSE minn1.
ASSIGN minn2	IF minn2 == 0 THEN 1 ELSE minn2.
ASSIGN minn3	IF minn3 == 0 THEN 1 ELSE minn3.
ASSIGN minn4	IF minn4 == 0 THEN 1 ELSE minn4.
ASSIGN minn5	IF minn5 == 0 THEN 1 ELSE minn5.
ASSIGN minn6	IF minn6 == 0 THEN 1 ELSE minn6.
ASSIGN minn7	IF minn7 == 0 THEN 1 ELSE minn7.
ASSIGN minn8	IF minn8 == 0 THEN 1 ELSE minn8.
ASSIGN minn9	IF minn9 == 0 THEN 1 ELSE minn9.
ASSIGN minn10	IF minn10 == 0 THEN 1 ELSE minn10.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist		minn1 + minn2 + minn3 + minn4 + minn5 + minn6 + minn7 + minn8 + minn9 + minn10.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1	POW(sum_dist/minn1,1).
DEFINE rel_dist2	POW(sum_dist/minn2,1).
DEFINE rel_dist3	POW(sum_dist/minn3,1).
DEFINE rel_dist4	POW(sum_dist/minn4,1).
DEFINE rel_dist5	POW(sum_dist/minn5,1).
DEFINE rel_dist6	POW(sum_dist/minn6,1).
DEFINE rel_dist7	POW(sum_dist/minn7,1).
DEFINE rel_dist8	POW(sum_dist/minn8,1).
DEFINE rel_dist9	POW(sum_dist/minn9,1).
DEFINE rel_dist10	POW(sum_dist/minn10,1).

DEFINE sum_rel_dist		rel_dist1 + rel_dist2 + rel_dist3 + rel_dist4 + rel_dist5 + rel_dist6 + rel_dist7 + rel_dist8 + rel_dist9 + rel_dist10.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1	rel_dist1/sum_rel_dist.
DEFINE wt2	rel_dist2/sum_rel_dist.
DEFINE wt3	rel_dist3/sum_rel_dist.
DEFINE wt4	rel_dist4/sum_rel_dist.
DEFINE wt5	rel_dist5/sum_rel_dist.
DEFINE wt6	rel_dist6/sum_rel_dist.
DEFINE wt7  rel_dist7/sum_rel_dist.
DEFINE wt8	rel_dist8/sum_rel_dist.
DEFINE wt9  rel_dist9/sum_rel_dist.
DEFINE wt10	rel_dist10/sum_rel_dist.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD	ROUND(BD1*wt1 + BD2*wt2 + BD3*wt3 + BD4*wt4 + BD5*wt5 + BD6*wt6 + BD7*wt7 + BD8*wt8 + BD9*wt9 + BD10*wt10,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Sandy BD %s" wt_BD.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s, %s, %s, %s" BD1, BD2, BD3, BD4, BD5, BD6, BD7, BD8.

# 8-20% ORGANIC CARBON SOILS-------------------------------------------------------------
# Read the table of bulk densities and other properties of soils that have 8 to 20% organic carbon.
INPUT hzn_top8_20 numeric, hzn_bot8_20 numeric, hzn_desgn8_20 char, clay8_20 numeric, silt8_20 numeric, sand8_20 numeric, 
carbon8_20 numeric, db_13b8_20 numeric
FILE "bd_8_to_20_oc"
AGGREGATE COLUMN hzn_top8_20 none, hzn_bot8_20 none, hzn_desgn8_20 none, clay8_20 none, silt8_20 none, sand8_20 none, 
carbon8_20 none, db_13b8_20 none.

#DEFINE hzn_top8_20		0,6,38,69,0,106,25,18,81,19,137,0,71,0,55,41,18,0,60,101,51,0,0,0,0,112,20,38,0,53,46,68,56,19,37,0,99,9,3,0,0,68,8,0,0,0,0,16,0,13,7,0,42,42,0,43,45,66,22,0,25,42,0,0,0,94,0,61,30,18,92,30,5,0,0,0,32,0,5,0,132,0,35,58,0,0,18,84,0,0,0,3,33,0,3,0,18,0,0,13,17,10,0,63,0,4,0,0,0,678,8,3,13,30,0,0,0,0,0,13,8,0,0,20,15,0,0,0,0,48,48,0,0,33,0,22,18,5,25,6,10,0,3,7,0,46,0,89,0,0,0,0,20,3,0,0,0,0,0,3,2,67,0,0,0,0,0,105,0,0,24,0,0,0,0,0,2,0,0,6,0,5,8,24,0,0,3,19,5,3,0,0,2,0,0,5,0,10,5,0,10,3,16,3,0,5,2,5,7,25,0,0,25,0,46,0,0,0,0,5,0,0,8,6,0,14,2,74,3,3,0,15,0,0,84,0,0,0.
#DEFINE hzn_bot8_20		20,0,56,73,6,132,28,26,88,30,170,10,102,5,60,71,25,0,68,137,63,10,0,9,18,137,38,55,5,61,64,125,89,44,43,18,117,24,0,5,9,88,13,18,18,3,7,21,8,30,26,7,48,48,18,58,138,92,38,0,45,66,10,13,0,137,15,71,47,39,125,56,0,3,13,15,48,4,0,7,213,10,72,72,15,10,41,99,8,15,5,5,46,9,10,9,31,20,18,23,20,20,5,89,5,10,25,20,10,692,0,10,18,35,26,5,28,8,8,28,13,8,8,41,33,19,8,6,7,77,77,13,16,54,13,28,41,10,32,0,20,15,10,10,7,79,0,99,3,7,17,8,33,8,8,18,16,8,7,0,5,117,10,10,6,7,6,114,10,21,40,1,3,16,6,13,5,20,0,17,10,30,20,42,20,3,6,26,25,18,0,12,10,8,3,8,20,35,18,10,20,0,36,15,20,11,8,10,16,58,10,16,0,10,70,8,8,16,0,11,8,5,30,9,5,50,0,91,15,15,23,38,0,0,97,5,8,3.
#DEFINE hzn_desgn8_20	"A","Oe","2Oa","2AB","A1","3Oa4","2Bk","Bw1","3Bw","Oa","Oe3","A","Oe2","Oe","Bg2","Oe1","2C","Oa","Bs","Oi2","Bh1","A1","Oe","Oi","A","2C","BW1","Bw2","Oe","Oa","Bg1","Bg3","3C","Bh","Oab","Oa1","5C","A","O","Oi","Ak1","Bw4","E","Ap","Oe1","Oi","A","Oa1","A","Ap2","Bw","A","A'","A'","A","Bw3","2Oa","Ab2","2Oa","Oef","Apg","Ab1","A1","A","Oa1","3C","A1","Oe3","Oa","Oa2","Ab3","2C","Oe","Oi","A","A1","2Bk","Oa","Oe","Oa","Oa2","A1","C1","Oe2","OA","A1","Oa2","Oa3","A","A","Oe","Oe","Oe3","A","A1","A1","Bw1","A","OA","Oa","Oib","A","A","Bhs","A","AE","Oa","A","A1","Oab","Oe","A","Bs","Oaf","Ap","A1","A","A1","A","Bs2","AE","A1","A1","Oa1","Oa1","A1","A1","AB","A1","C/A/Oi","C/A/Oi","A","Oap","Oa2","A1","A","Bw1","Bs1","E","Oe","Bhs","A1","A1","A/B","Ap","Oe4","Oe","Bh2","E / A","A1","A1","AB","Bh1","A","A1","Oa","A1","A","A","Oe","A1","Oa3","A","A","A1","E","A","2Oa2","A","A","Bw1","Oa","A","A1","A","A","Oa","Ap","Oa / Cg","Oa / A","Ap","A","Bs1","C","Oap","A1","Oa","A2","Oap2","A1","Oaf","A","A","A11","A","A","A1","A2","A","A1","A","O","A","Bwb","A1","AE","A","Oa","A2","Oa1","A1","Ap1","Oa","A1","Bhs","A","A1","Ap","Oaf","C1","A","A1","A1","EB","Ap1","Bg / Oe","Oe","Bk3","A1","A","Oa","A12","BCg","Oa","Bkq2","A1","A","A1".
#DEFINE clay8_20		8.4,null,null,null,43.8,null,9.9,null,null,null,null,16.3,null,null,null,null,null,null,null,11,5.4,11.1,null,null,4.1,null,null,null,null,null,null,null,33.7,7,null,null,31.2,6.6,null,null,39.7,null,1.7,null,24,null,14,13.8,9.1,35.7,null,null,null,11.8,null,null,null,2.3,22.7,null,null,2.1,23,22.2,null,9.1,25.7,null,null,10.9,2.2,43.3,null,21.2,30.4,37.1,null,3.7,null,10.6,null,0.8,28.2,14.1,null,12.2,null,null,10,43.8,null,null,24,71.6,28.2,17.4,60.4,12.9,null,3.3,20.2,38.4,62.9,3.3,6.5,3.2,null,42.1,35.9,14.2,null,8.4,2.6,null,37.8,null,40.3,10.5,null,5.6,6.2,21.1,16.6,null,null,11.3,6.1,56.2,24.1,null,10.5,10.9,null,null,17.8,11.4,32.9,2.3,31.8,null,7.4,45.6,26.5,12.9,6.7,21.6,6.6,6.8,3.5,13.2,11.7,66,1.9,11.6,8.2,32.4,19.2,14.9,4,null,32.8,null,30.3,5.6,11.8,5.1,18.7,43.5,12.5,29.7,33.2,null,2.8,16.5,18.6,26.3,7.4,1.1,null,null,90.8,21,8,19.6,null,56,6.6,19,27.6,22.6,null,5.9,12.4,17.1,8.3,11.2,13.7,25.2,27.1,24.5,2.5,null,30.9,15.7,37.6,15.4,14.4,null,30.4,32.3,18.3,30.7,null,20.7,1.8,16.8,28,23.8,null,4.9,10.4,34.1,12.9,12.8,1.7,20.4,null,22.9,12.1,5.1,27.7,20.6,40,6.7,24.4,7.8,10.4,5.8.
#DEFINE silt8_20		54.5,null,null,null,46.4,null,80.4,null,null,null,null,44.2,null,null,null,null,null,null,null,20,28.1,33.7,null,null,49.3,null,null,null,null,null,null,null,55.7,48.3,null,null,44,23,null,null,34.1,null,14.9,null,65.6,null,54.4,48.9,81.7,54.7,null,null,62.7,62.7,null,null,null,21.9,59.2,null,null,37.9,38.1,49.3,null,77.2,28.2,null,null,47,14.8,50.2,null,31.8,53.2,47.9,null,37.3,null,24.4,null,18.2,35.6,33.9,null,27.7,null,null,31.1,46.7,null,null,61.5,27.1,41.3,38.4,28.6,48.4,null,66.6,36,37.6,26,14.4,32.8,68.7,null,48.9,23.3,79.9,null,50.5,63.7,null,52,null,16.6,19.6,null,17.9,60.3,54.3,33.5,null,null,24.1,42.7,29.1,46.1,69.7,69.7,67.9,null,null,50.8,82.5,40.9,52.2,47.5,null,43.2,34.4,31.1,76.1,26.4,64.7,22.7,29.4,59.1,49.6,22.2,23.8,26.2,38.9,31.1,50.4,54.5,25.6,72.1,null,64,null,61.2,30.3,33.7,69.4,33.9,54.2,36.5,21.3,58.8,null,43.5,37.3,32.9,35.3,21.4,31.3,null,null,8.5,23.7,39.3,61.9,null,25.9,19.6,23.8,47.9,52.5,null,77.7,58.7,47.9,22.5,35.4,30.6,30.8,55.2,42.7,24.3,null,53.2,42.7,30.1,69.2,74.9,null,62.3,51.1,32.6,56.3,null,50.5,22.4,49.1,41.1,53.2,null,74.3,40.7,35.5,69.7,56.1,21.1,55.2,null,28.4,52.6,44.9,38.1,48.5,49.5,31.6,35.8,42.9,37.8,70.7.
#DEFINE sand8_20 		37.1,null,null,null,9.8,null,9.7,null,null,null,null,39.5,null,null,null,null,null,null,null,69,66.5,55.2,null,null,46.6,null,null,null,null,null,null,null,10.6,44.7,null,null,24.8,70.4,null,null,26.2,null,83.4,null,10.4,null,31.6,37.3,9.2,9.6,null,null,25.5,25.5,null,null,null,75.8,18.1,null,null,60,38.9,28.5,null,13.7,46.1,null,null,42.1,83,6.5,null,47,16.4,15,null,59,null,65,null,81,36.2,52,null,60.1,null,null,58.9,9.5,null,null,14.5,1.3,30.5,44.2,11,38.7,null,30.1,43.8,24,11.1,82.3,60.7,28.1,null,9,40.8,5.9,null,41.1,33.7,null,10.2,null,43.1,69.9,null,76.5,33.5,24.6,49.9,null,null,64.6,51.2,14.7,29.8,19.8,19.8,21.2,null,null,31.4,6.1,26.2,45.5,20.7,null,49.4,20,42.4,11,66.9,13.7,70.7,63.8,37.4,37.2,66.1,10.2,71.9,49.5,60.7,17.2,26.3,59.5,23.9,null,3.2,null,8.5,64.1,54.5,25.5,47.4,2.3,51,49,8,null,53.7,46.2,48.5,38.4,71.2,67.6,null,null,0.7,55.3,52.7,18.5,null,18.1,73.8,57.2,24.5,24.9,null,16.4,28.9,35,69.2,53.4,55.7,44,17.7,32.8,73.2,null,15.9,41.6,32.3,15.4,10.7,null,7.3,16.5,49.1,13,null,28.8,75.8,34.1,30.9,23,null,20.8,48.9,30.4,17.4,31.1,77.2,24.4,null,48.7,35.3,50,34.2,30.9,10.5,61.6,39.8,49.3,51.8,23.5.
#DEFINE carbon8_20		15.6,10.9,19.47,19.55,10.39,10.19,13.5,9.66,16.59,15.27,19.29,11.38,12.49,18.14,13.59,19.95,9.48,19.5,10.77,8.02,18.73,16.73,18.48,8.18,19.6,15.92,9.72,9.5,13.84,15.69,8.86,11.29,11.48,16.79,18.91,10.86,10.15,11.75,11.64,11.77,10.19,8.09,18.24,19.6,14.67,17.1,9.93,9.87,8.69,13.34,10.44,10.11,12.32,12.32,12.27,8.52,13.19,11.85,19.17,14.96,12.48,9.02,13.98,11.49,9.66,15.3,10.47,16.62,15.93,12.51,9.51,13.17,11.49,10.31,10.88,8.25,14.4,13.12,9.27,16.34,14.62,18.77,12.79,9.11,8.78,11.48,15.53,17.3,13.13,12.99,11.19,10.34,12.1,8.23,13.68,8.73,9.47,10.21,10.8,11.87,10.62,11.77,8.16,9.99,15.29,8.74,12.9,8.47,9.23,9.27,15.09,10.04,8.06,8.37,10.67,12.49,9.35,10.17,11.15,11.38,9.11,10.52,13.62,17.7,18.7,15.01,14.46,8.14,10.48,12.93,12.93,8.53,16.66,11.35,10.83,12.3,10.43,11.58,10.88,8.61,11.03,11.72,12.62,10.47,9.06,12.27,11.47,10.15,9.97,8.57,8.75,9.43,9.65,10.47,10.73,13.26,11.73,11.08,8.88,15.29,11.32,8.9,9.6,15.69,9.78,8.4,9.8,8.39,10.05,9.1,9.42,11.61,14.3,8.37,11.45,10.64,10.19,8.89,13.89,10.56,17.9,8.1,11.5,18.45,15.1,10.96,9.65,9.51,11.39,10.64,14.85,8.13,8.39,9.05,15.5,8.95,12.77,9.42,9.3,8.69,8.78,18.55,8.5,11.8,10.3,8.25,8.21,9.21,9.59,16.88,9.48,8.3,9.36,8.17,8.14,8.22,9.25,8.7,16.67,9.84,10.5,8.73,11.17,8.64,14.52,9.47,12.87,8.8,8.05,8.66,13.19,13.7,8.67,11.16,8.52,10.28,8.25,11.28.
#DEFINE db_13b8_20		0.16,0.2,0.2,0.21,0.23,0.23,0.23,0.24,0.24,0.26,0.28,0.28,0.29,0.31,0.32,0.32,0.32,0.33,0.33,0.34,0.34,0.34,0.35,0.35,0.35,0.36,0.36,0.36,0.36,0.36,0.38,0.39,0.39,0.4,0.4,0.4,0.4,0.4,0.41,0.41,0.41,0.42,0.43,0.43,0.43,0.44,0.44,0.44,0.46,0.46,0.46,0.46,0.47,0.47,0.47,0.47,0.47,0.47,0.47,0.48,0.48,0.48,0.48,0.48,0.48,0.48,0.48,0.49,0.49,0.49,0.49,0.49,0.5,0.5,0.5,0.5,0.5,0.51,0.51,0.51,0.51,0.51,0.51,0.52,0.52,0.52,0.52,0.52,0.52,0.53,0.53,0.53,0.53,0.54,0.54,0.54,0.54,0.55,0.55,0.55,0.57,0.57,0.58,0.58,0.58,0.59,0.59,0.59,0.59,0.59,0.6,0.6,0.6,0.6,0.6,0.6,0.6,0.61,0.61,0.61,0.62,0.62,0.62,0.62,0.62,0.62,0.62,0.63,0.64,0.64,0.64,0.64,0.64,0.64,0.64,0.65,0.65,0.65,0.65,0.66,0.66,0.66,0.67,0.67,0.67,0.67,0.68,0.68,0.68,0.69,0.69,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.71,0.71,0.71,0.71,0.72,0.72,0.72,0.72,0.73,0.73,0.73,0.74,0.74,0.74,0.74,0.74,0.74,0.75,0.76,0.76,0.76,0.76,0.76,0.77,0.78,0.79,0.79,0.79,0.8,0.8,0.8,0.8,0.81,0.81,0.83,0.84,0.84,0.84,0.85,0.87,0.88,0.88,0.88,0.89,0.89,0.9,0.9,0.92,0.93,0.94,0.94,0.94,0.94,0.94,0.95,0.96,0.97,0.97,0.98,0.99,1,1,1.01,1.02,1.03,1.04,1.07,1.1,1.12,1.12,1.13,1.15,1.2,1.22,1.26,1.27,1.31,1.38.

# Determines the 'distance' of each soil from the target soil.
DEFINE distance30		SQRT(POW(oc_r - carbon8_20,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_8_20		ARRAYMIN(distance30).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_8_20 		ARRAYPOSITION(distance30).
DEFINE pos1_8_20 		LOOKUP(minn1_8_20, distance30, pos_8_20).
DEFINE dist2_8_20		IF pos_8_20 == pos1_8_20 THEN distance30 + 1000 ELSE distance30.
DEFINE minn2_8_20		ARRAYMIN(dist2_8_20).
DEFINE pos2_8_20		LOOKUP(minn2_8_20, dist2_8_20, pos_8_20).
DEFINE dist3_8_20		IF pos_8_20 == pos2_8_20 THEN dist2_8_20 + 1000 ELSE dist2_8_20.
DEFINE minn3_8_20		ARRAYMIN(dist3_8_20).
DEFINE pos3_8_20		LOOKUP(minn3_8_20, dist3_8_20, pos_8_20).
DEFINE dist4_8_20		IF pos_8_20 == pos3_8_20 THEN dist3_8_20 + 1000 ELSE dist3_8_20.
DEFINE minn4_8_20		ARRAYMIN(dist4_8_20).
DEFINE pos4_8_20		LOOKUP(minn4_8_20, dist4_8_20, pos_8_20).
DEFINE dist5_8_20		IF pos_8_20 == pos4_8_20 THEN dist4_8_20 + 1000 ELSE dist4_8_20.
DEFINE minn5_8_20		ARRAYMIN(dist5_8_20).
DEFINE pos5_8_20		LOOKUP(minn5_8_20, dist5_8_20, pos_8_20).
DEFINE dist6_8_20		IF pos_8_20 == pos5_8_20 THEN dist5_8_20 + 1000 ELSE dist5_8_20.
DEFINE minn6_8_20		ARRAYMIN(dist6_8_20).
DEFINE pos6_8_20		LOOKUP(minn6_8_20, dist6_8_20, pos_8_20).
DEFINE dist7_8_20		IF pos_8_20 == pos6_8_20 THEN dist6_8_20 + 1000 ELSE dist6_8_20.
DEFINE minn7_8_20		ARRAYMIN(dist7_8_20).
DEFINE pos7_8_20		LOOKUP(minn7_8_20, dist7_8_20, pos_8_20).
DEFINE dist8_8_20		IF pos_8_20 == pos7_8_20 THEN dist7_8_20 + 1000 ELSE dist7_8_20.
DEFINE minn8_8_20		ARRAYMIN(dist8_8_20).
DEFINE pos8_8_20		LOOKUP(minn8_8_20, dist8_8_20, pos_8_20).
DEFINE dist9_8_20		IF pos_8_20 == pos8_8_20 THEN dist8_8_20 + 1000 ELSE dist8_8_20.
DEFINE minn9_8_20		ARRAYMIN(dist9_8_20).
DEFINE pos9_8_20		LOOKUP(minn9_8_20, dist9_8_20, pos_8_20).
DEFINE dist10_8_20		IF pos_8_20 == pos9_8_20 THEN dist9_8_20 + 1000 ELSE dist9_8_20.
DEFINE minn10_8_20		ARRAYMIN(dist10_8_20).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_8_20		LOOKUP(minn1_8_20, distance30, db_13b8_20).
ASSIGN BD1_8_20		ARRAYMIN(BD1_8_20).
DEFINE BD2_8_20		LOOKUP(minn2_8_20, dist2_8_20, db_13b8_20).
ASSIGN BD2_8_20		ARRAYMIN(BD2_8_20).
DEFINE BD3_8_20		LOOKUP(minn3_8_20, dist3_8_20, db_13b8_20).
ASSIGN BD3_8_20		ARRAYMIN(BD3_8_20).
DEFINE BD4_8_20		LOOKUP(minn4_8_20, dist4_8_20, db_13b8_20).
ASSIGN BD4_8_20		ARRAYMIN(BD4_8_20).
DEFINE BD5_8_20		LOOKUP(minn5_8_20, dist5_8_20, db_13b8_20).
ASSIGN BD5_8_20		ARRAYMIN(BD5_8_20).
DEFINE BD6_8_20		LOOKUP(minn6_8_20, dist6_8_20, db_13b8_20).
ASSIGN BD6_8_20		ARRAYMIN(BD6_8_20).
DEFINE BD7_8_20		LOOKUP(minn7_8_20, dist7_8_20, db_13b8_20).
ASSIGN BD7_8_20		ARRAYMIN(BD7_8_20).
DEFINE BD8_8_20		LOOKUP(minn8_8_20, dist8_8_20, db_13b8_20).
ASSIGN BD8_8_20		ARRAYMIN(BD8_8_20).
DEFINE BD9_8_20		LOOKUP(minn9_8_20, dist9_8_20, db_13b8_20).
ASSIGN BD9_8_20		ARRAYMIN(BD9_8_20).
DEFINE BD10_8_20	LOOKUP(minn10_8_20, dist10_8_20, db_13b8_20).
ASSIGN BD10_8_20	ARRAYMIN(BD10_8_20).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_8_20		IF minn1_8_20 == 0 THEN 1 ELSE minn1_8_20.
ASSIGN minn2_8_20		IF minn2_8_20 == 0 THEN 1 ELSE minn2_8_20.
ASSIGN minn3_8_20		IF minn3_8_20 == 0 THEN 1 ELSE minn3_8_20.
ASSIGN minn4_8_20		IF minn4_8_20 == 0 THEN 1 ELSE minn4_8_20.
ASSIGN minn5_8_20		IF minn5_8_20 == 0 THEN 1 ELSE minn5_8_20.
ASSIGN minn6_8_20		IF minn6_8_20 == 0 THEN 1 ELSE minn6_8_20.
ASSIGN minn7_8_20		IF minn7_8_20 == 0 THEN 1 ELSE minn7_8_20.
ASSIGN minn8_8_20		IF minn8_8_20 == 0 THEN 1 ELSE minn8_8_20.
ASSIGN minn9_8_20		IF minn9_8_20 == 0 THEN 1 ELSE minn9_8_20.
ASSIGN minn10_8_20		IF minn10_8_20 == 0 THEN 1 ELSE minn10_8_20.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_8_20		minn1_8_20 + minn2_8_20 + minn3_8_20 + minn4_8_20 + minn5_8_20 + minn6_8_20 + minn7_8_20 + minn8_8_20 + minn9_8_20 + minn10_8_20.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_8_20		POW(sum_dist_8_20/minn1_8_20,1).
DEFINE rel_dist2_8_20		POW(sum_dist_8_20/minn2_8_20,1).
DEFINE rel_dist3_8_20		POW(sum_dist_8_20/minn3_8_20,1).
DEFINE rel_dist4_8_20		POW(sum_dist_8_20/minn4_8_20,1).
DEFINE rel_dist5_8_20		POW(sum_dist_8_20/minn5_8_20,1).
DEFINE rel_dist6_8_20		POW(sum_dist_8_20/minn6_8_20,1).
DEFINE rel_dist7_8_20		POW(sum_dist_8_20/minn7_8_20,1).
DEFINE rel_dist8_8_20		POW(sum_dist_8_20/minn8_8_20,1).
DEFINE rel_dist9_8_20		POW(sum_dist_8_20/minn9_8_20,1).
DEFINE rel_dist10_8_20		POW(sum_dist_8_20/minn10_8_20,1).

DEFINE sum_rel_dist_8_20		rel_dist1_8_20 + rel_dist2_8_20 + rel_dist3_8_20 + rel_dist4_8_20 + rel_dist5_8_20 + rel_dist6_8_20 + rel_dist7_8_20 + rel_dist8_8_20 + rel_dist9_8_20 + rel_dist10_8_20.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_8_20		rel_dist1_8_20/sum_rel_dist_8_20.
DEFINE wt2_8_20		rel_dist2_8_20/sum_rel_dist_8_20.
DEFINE wt3_8_20		rel_dist3_8_20/sum_rel_dist_8_20.
DEFINE wt4_8_20		rel_dist4_8_20/sum_rel_dist_8_20.
DEFINE wt5_8_20		rel_dist5_8_20/sum_rel_dist_8_20.
DEFINE wt6_8_20		rel_dist6_8_20/sum_rel_dist_8_20.
DEFINE wt7_8_20		rel_dist7_8_20/sum_rel_dist_8_20.
DEFINE wt8_8_20		rel_dist8_8_20/sum_rel_dist_8_20.
DEFINE wt9_8_20		rel_dist9_8_20/sum_rel_dist_8_20.
DEFINE wt10_8_20	rel_dist10_8_20/sum_rel_dist_8_20.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_8_20	ROUND(BD1_8_20*wt1_8_20 + BD2_8_20*wt2_8_20 + BD3_8_20*wt3_8_20 + BD4_8_20*wt4_8_20 + BD5_8_20*wt5_8_20 + BD6_8_20*wt6_8_20 + BD7_8_20*wt7_8_20 + BD8_8_20*wt8_8_20 + BD9_8_20*wt9_8_20 + BD10_8_20*wt10_8_20,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Organic BD %s" wt_BD_8_20.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s" BD1_8_20, BD2_8_20, BD3_8_20, BD4_8_20, BD5_8_20.

#------------------------------------

DEFINE bulk_density		IF oc_r > 20 and not isnull(oc_r) THEN wt_BD_org

						ELSE IF texture matches "*MEDL*" or texture matches "*HYDR*" or texture matches "*ASHY*" THEN wt_BD_andic

						ELSE IF ((hzname matches "*x*" or (resdept_r == hzdept_r and reskind1 == "fragipan") or 
							(subgrp matches "fragic*" and ksat_r < 1.41 and not isnull(ksat_r))) or
 
							((resdept_r == hzdept_r and (reskind1 == "densic material" or reskind1 == "bedrock, densic")) or
							(hzname matches "*d*" and not hzname matches "*di*")) or

							((resdept_r == hzdept_r and (reskind1 == "cemented horizon" or reskind1 == "duripan" or
							reskind1 == "ortstein" or reskind1 == "petrocalcic" or reskind1 == "petroferric" or 
							reskind1 == "petrogypsic")) or (hzname matches "*m*" and not hzname matches "*ma*")) or

							(hzname matches "*r*" or (resdept_r == hzdept_r and reskind1 == "bedrock, paralithic")) or
 
							hzname matches "*hs*" or hzname matches "*o*" or
							(hzname matches "*s*" and not hzname matches "*ss*" and not hzname matches "*se*") or hzname matches "*h*" or 
							(hzname matches "*v*" or (resdept_r == hzdept_r and reskind1 == "plinthite")) or 
							hzname matches "*q*")

							AND (gypsum_r <= 5 or isnull(gypsum_r)) THEN wt_BD_dns

						ELSE IF oc_r > 8 and not isnull(oc_r) THEN wt_BD_8_20

						ELSE IF gypsum_r > 5 and not isnull(gypsum_r) THEN wt_BD_gypsum

						ELSE IF sandtotal_r >= 70 and not isnull(sandtotal_r) THEN wt_BD
 
						ELSE wt_BD_min.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Bulk Density %s" bulk_density.


#WHEN not ISNULL(hzdept_r)
#DISPLAY "Rawls BD %s, %s, %s" bulk_density_l, bulk_density, bulk_density_h.

#WHEN not ISNULL(hzdept_r)
#DISPLAY " BD %s" BD_array.


#----------------------------------------------------------------------------
# CALCULATION OF BULK DENSITY LOWS and HIGHS
#----------------------------------------------------------------------------
# Gets the sand, silt, and clay range (high - low).
DEFINE sandrnge		sandtotal_h - sandtotal_l.
DEFINE siltrnge		silttotal_h - silttotal_l.
DEFINE clayrnge		claytotal_h - claytotal_l.

# Avoids dividing by zero for the next section.
DEFINE si_cl_rnge		IF siltrnge+clayrnge == 0 THEN 0.01 ELSE siltrnge+clayrnge.
DEFINE sa_cl_rnge		IF sandrnge+clayrnge == 0 THEN 0.01 ELSE sandrnge+clayrnge.
DEFINE sa_si_rnge		IF sandrnge+siltrnge == 0 THEN 0.01 ELSE sandrnge+siltrnge.

# Clay and sand contents are needed to get the Rawls' bulk density estimates from the lookup table.
# Calculates the clay content when sand is high and low.
DEFINE sand_h_cl	ROUND(claytotal_l + ((100 - sandtotal_h) - (silttotal_l + claytotal_l))*(clayrnge/(si_cl_rnge)),0).
DEFINE sand_l_cl	ROUND(claytotal_l + ((100 - sandtotal_l) - (silttotal_l + claytotal_l))*(clayrnge/(si_cl_rnge)),0).

# Calculates the sand content when silt is high and low.
DEFINE silt_h_sa	ROUND(sandtotal_l + ((100 - silttotal_h) - (sandtotal_l + claytotal_l))*(sandrnge/(sa_cl_rnge)),0).
DEFINE silt_l_sa	ROUND(sandtotal_l + ((100 - silttotal_l) - (sandtotal_l + claytotal_l))*(sandrnge/(sa_cl_rnge)),0).

# Calculates the clay content when silt is high and low.
DEFINE silt_h_cl	ROUND(claytotal_l + ((100 - silttotal_h) - (sandtotal_l + claytotal_l))*(clayrnge/(sa_cl_rnge)),0).
DEFINE silt_l_cl	ROUND(claytotal_l + ((100 - silttotal_l) - (sandtotal_l + claytotal_l))*(clayrnge/(sa_cl_rnge)),0).

# Calculates the sand content when clay is high and low.
DEFINE clay_h_sa	ROUND(sandtotal_l + ((100 - claytotal_h) - (sandtotal_l + silttotal_l))*(sandrnge/(sa_si_rnge)),0).
DEFINE clay_l_sa	ROUND(sandtotal_l + ((100 - claytotal_l) - (sandtotal_l + silttotal_l))*(sandrnge/(sa_si_rnge)),0).

#----------------------------------------------------------------------------
# Read the table of Rawls (1983) bulk densities mapped on USDA textural triangle.
INPUT clay_Rawls numeric, sand_Rawls numeric, BD_Rawls numeric
	FILE "bd_rawls"
	AGGREGATE COLUMN clay_Rawls none, sand_Rawls none, BD_Rawls none.

# Rounds total sand and clay to whole numbers.	
DEFINE sand_tot_h	ROUND(sandtotal_h,0).
DEFINE sand_tot_l	ROUND(sandtotal_l,0).
DEFINE clay_tot_h	ROUND(claytotal_h,0).
DEFINE clay_tot_l	ROUND(claytotal_l,0).

ASSIGN sand_h_cl	ROUND(sand_h_cl,0).
ASSIGN sand_l_cl	ROUND(sand_l_cl,0).
ASSIGN silt_h_sa	ROUND(silt_h_sa,0).
ASSIGN silt_l_sa	ROUND(silt_l_sa, 0).
ASSIGN silt_h_cl	ROUND(silt_h_cl, 0).
ASSIGN silt_l_cl	ROUND(silt_l_cl, 0).
ASSIGN clay_h_sa	ROUND(clay_h_sa, 0).
ASSIGN clay_l_sa	ROUND(clay_l_sa, 0).

# Gets the Rawls' bulk density from the Lookup table using sand and clay for the different combinations of high and low sand, silt, and clay.
DEFINE min_bulk_density1	LOOKUP(sand_tot_h == sand_Rawls and sand_h_cl == clay_Rawls, BD_Rawls).
ASSIGN min_bulk_density1	ARRAYMAX(min_bulk_density1).
DEFINE min_bulk_density2	LOOKUP(sand_tot_l == sand_Rawls and sand_l_cl == clay_Rawls, BD_Rawls).
ASSIGN min_bulk_density2	ARRAYMAX(min_bulk_density2).
DEFINE min_bulk_density3	LOOKUP(silt_h_sa == sand_Rawls and silt_h_cl == clay_Rawls, BD_Rawls).
ASSIGN min_bulk_density3	ARRAYMAX(min_bulk_density3).
DEFINE min_bulk_density4	LOOKUP(silt_l_sa == sand_Rawls and silt_l_cl == clay_Rawls, BD_Rawls).
ASSIGN min_bulk_density4	ARRAYMAX(min_bulk_density4).
DEFINE min_bulk_density5	LOOKUP(clay_h_sa == sand_Rawls and clay_tot_h == clay_Rawls, BD_Rawls).
ASSIGN min_bulk_density5	ARRAYMAX(min_bulk_density5).
DEFINE min_bulk_density6	LOOKUP(clay_l_sa == sand_Rawls and clay_tot_l == clay_Rawls, BD_Rawls).
ASSIGN min_bulk_density6	ARRAYMAX(min_bulk_density6).

# Gets the minimum and maximum bulk densities from Rawls' mineral bulk density model.
DEFINE BD_array		APPEND(min_bulk_density1,APPEND(min_bulk_density2,APPEND(min_bulk_density3,APPEND(min_bulk_density4,
					APPEND(min_bulk_density5, min_bulk_density6))))).
DEFINE BD_min	ARRAYMIN(BD_array).
DEFINE BD_max	ARRAYMAX(BD_array).

# Determines the sand, silt, and clay for the minimum bulk density obtained from Rawls' bulk density table.
DEFINE BD_min_sand	IF BD_min == min_bulk_density1 THEN sand_tot_h 
					ELSE IF BD_min == min_bulk_density2 THEN sand_tot_l
					ELSE IF BD_min == min_bulk_density3 THEN silt_h_sa
					ELSE IF BD_min == min_bulk_density4 THEN silt_l_sa
					ELSE IF BD_min == min_bulk_density5 THEN clay_h_sa
					ELSE IF BD_min == min_bulk_density6 THEN clay_l_sa
					ELSE null.
DEFINE BD_min_clay	IF BD_min == min_bulk_density1 THEN sand_h_cl 
					ELSE IF BD_min == min_bulk_density2 THEN sand_l_cl
					ELSE IF BD_min == min_bulk_density3 THEN silt_h_cl
					ELSE IF BD_min == min_bulk_density4 THEN silt_l_cl
					ELSE IF BD_min == min_bulk_density5 THEN clay_tot_h
					ELSE IF BD_min == min_bulk_density6 THEN clay_tot_l
					ELSE null.
DEFINE BD_min_silt (100 - BD_min_sand) - BD_min_clay.

# Determines the sand, silt, and clay for the maximum bulk density obtained from Rawls' bulk density table.
DEFINE BD_max_sand	IF BD_max == min_bulk_density1 THEN sand_tot_h 
					ELSE IF BD_max == min_bulk_density2 THEN sand_tot_l
					ELSE IF BD_max == min_bulk_density3 THEN silt_h_sa
					ELSE IF BD_max == min_bulk_density4 THEN silt_l_sa
					ELSE IF BD_max == min_bulk_density5 THEN clay_h_sa
					ELSE IF BD_max == min_bulk_density6 THEN clay_l_sa
					ELSE null.
DEFINE BD_max_clay	IF BD_max == min_bulk_density1 THEN sand_h_cl 
					ELSE IF BD_max == min_bulk_density2 THEN sand_l_cl
					ELSE IF BD_max == min_bulk_density3 THEN silt_h_cl
					ELSE IF BD_max == min_bulk_density4 THEN silt_l_cl
					ELSE IF BD_max == min_bulk_density5 THEN clay_tot_h
					ELSE IF BD_max == min_bulk_density6 THEN clay_tot_l
					ELSE null.
DEFINE BD_max_silt (100 - BD_max_sand) - BD_max_clay.

#-------------------------------------------------
# ANDIC PROPERTIES LOW VALUES---------------------

# Determines the 'distance' of each soil from the target soil.
DEFINE distance9		SQRT(POW(oc_h - carbon,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_and_l		ARRAYMIN(distance9).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_and_l 	ARRAYPOSITION(distance9).
DEFINE pos1_and_l 	LOOKUP(minn1_and_l, distance9, pos_and_l).
DEFINE dist2_and_l	IF pos_and_l == pos1_and_l THEN distance9 + 1000 ELSE distance9.
DEFINE minn2_and_l	ARRAYMIN(dist2_and_l).
DEFINE pos2_and_l	LOOKUP(minn2_and_l, dist2_and_l, pos_and_l).
DEFINE dist3_and_l	IF pos_and_l == pos2_and_l THEN dist2_and_l + 1000 ELSE dist2_and_l.
DEFINE minn3_and_l	ARRAYMIN(dist3_and_l).
DEFINE pos3_and_l	LOOKUP(minn3_and_l, dist3_and_l, pos_and_l).
DEFINE dist4_and_l	IF pos_and_l == pos3_and_l THEN dist3_and_l + 1000 ELSE dist3_and_l.
DEFINE minn4_and_l	ARRAYMIN(dist4_and_l).
DEFINE pos4_and_l	LOOKUP(minn4_and_l, dist4_and_l, pos_and_l).
DEFINE dist5_and_l	IF pos_and_l == pos4_and_l THEN dist4_and_l + 1000 ELSE dist4_and_l.
DEFINE minn5_and_l	ARRAYMIN(dist5_and_l).
DEFINE pos5_and_l	LOOKUP(minn5_and_l, dist5_and_l, pos_and_l).
DEFINE dist6_and_l	IF pos_and_l == pos5_and_l THEN dist5_and_l + 1000 ELSE dist5_and_l.
DEFINE minn6_and_l	ARRAYMIN(dist6_and_l).
DEFINE pos6_and_l	LOOKUP(minn6_and_l, dist6_and_l, pos_and_l).
DEFINE dist7_and_l	IF pos_and_l == pos6_and_l THEN dist6_and_l + 1000 ELSE dist6_and_l.
DEFINE minn7_and_l	ARRAYMIN(dist7_and_l).
DEFINE pos7_and_l	LOOKUP(minn7_and_l, dist7_and_l, pos_and_l).
DEFINE dist8_and_l	IF pos_and_l == pos7_and_l THEN dist7_and_l + 1000 ELSE dist7_and_l.
DEFINE minn8_and_l	ARRAYMIN(dist8_and_l).
DEFINE pos8_and_l	LOOKUP(minn8_and_l, dist8_and_l, pos_and_l).
DEFINE dist9_and_l	IF pos_and_l == pos8_and_l THEN dist8_and_l + 1000 ELSE dist8_and_l.
DEFINE minn9_and_l	ARRAYMIN(dist9_and_l).
DEFINE pos9_and_l	LOOKUP(minn9_and_l, dist9_and_l, pos_and_l).
DEFINE dist10_and_l	IF pos_and_l == pos9_and_l THEN dist9_and_l + 1000 ELSE dist9_and_l.
DEFINE minn10_and_l	ARRAYMIN(dist10_and_l).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_and_l		LOOKUP(minn1_and_l, distance9, db_13b).
ASSIGN BD1_and_l		ARRAYMIN(BD1_and_l).
DEFINE BD2_and_l		LOOKUP(minn2_and_l, dist2_and_l, db_13b).
ASSIGN BD2_and_l		ARRAYMIN(BD2_and_l).
DEFINE BD3_and_l		LOOKUP(minn3_and_l, dist3_and_l, db_13b).
ASSIGN BD3_and_l		ARRAYMIN(BD3_and_l).
DEFINE BD4_and_l		LOOKUP(minn4_and_l, dist4_and_l, db_13b).
ASSIGN BD4_and_l		ARRAYMIN(BD4_and_l).
DEFINE BD5_and_l		LOOKUP(minn5_and_l, dist5_and_l, db_13b).
ASSIGN BD5_and_l		ARRAYMIN(BD5_and_l).
DEFINE BD6_and_l		LOOKUP(minn6_and_l, dist6_and_l, db_13b).
ASSIGN BD6_and_l		ARRAYMIN(BD6_and_l).
DEFINE BD7_and_l		LOOKUP(minn7_and_l, dist7_and_l, db_13b).
ASSIGN BD7_and_l		ARRAYMIN(BD7_and_l).
DEFINE BD8_and_l		LOOKUP(minn8_and_l, dist8_and_l, db_13b).
ASSIGN BD8_and_l		ARRAYMIN(BD8_and_l).
DEFINE BD9_and_l		LOOKUP(minn9_and_l, dist9_and_l, db_13b).
ASSIGN BD9_and_l		ARRAYMIN(BD9_and_l).
DEFINE BD10_and_l		LOOKUP(minn10_and_l, dist10_and_l, db_13b).
ASSIGN BD10_and_l		ARRAYMIN(BD10_and_l).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_and_l	IF minn1_and_l == 0 THEN 1 ELSE minn1_and_l.
ASSIGN minn2_and_l	IF minn2_and_l == 0 THEN 1 ELSE minn2_and_l.
ASSIGN minn3_and_l	IF minn3_and_l == 0 THEN 1 ELSE minn3_and_l.
ASSIGN minn4_and_l	IF minn4_and_l == 0 THEN 1 ELSE minn4_and_l.
ASSIGN minn5_and_l	IF minn5_and_l == 0 THEN 1 ELSE minn5_and_l.
ASSIGN minn6_and_l	IF minn6_and_l == 0 THEN 1 ELSE minn6_and_l.
ASSIGN minn7_and_l	IF minn7_and_l == 0 THEN 1 ELSE minn7_and_l.
ASSIGN minn8_and_l	IF minn8_and_l == 0 THEN 1 ELSE minn8_and_l.
ASSIGN minn9_and_l	IF minn9_and_l == 0 THEN 1 ELSE minn9_and_l.
ASSIGN minn10_and_l	IF minn10_and_l == 0 THEN 1 ELSE minn10_and_l.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_and_l		minn1_and_l + minn2_and_l + minn3_and_l + minn4_and_l + minn5_and_l + minn6_and_l + minn7_and_l + minn8_and_l + minn9_and_l + minn10_and_l.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_and_l	POW(sum_dist_and_l/minn1_and_l,1).
DEFINE rel_dist2_and_l	POW(sum_dist_and_l/minn2_and_l,1).
DEFINE rel_dist3_and_l	POW(sum_dist_and_l/minn3_and_l,1).
DEFINE rel_dist4_and_l	POW(sum_dist_and_l/minn4_and_l,1).
DEFINE rel_dist5_and_l	POW(sum_dist_and_l/minn5_and_l,1).
DEFINE rel_dist6_and_l	POW(sum_dist_and_l/minn6_and_l,1).
DEFINE rel_dist7_and_l	POW(sum_dist_and_l/minn7_and_l,1).
DEFINE rel_dist8_and_l	POW(sum_dist_and_l/minn8_and_l,1).
DEFINE rel_dist9_and_l	POW(sum_dist_and_l/minn9_and_l,1).
DEFINE rel_dist10_and_l	POW(sum_dist_and_l/minn10_and_l,1).

DEFINE sum_rel_dist_and_l		rel_dist1_and_l + rel_dist2_and_l + rel_dist3_and_l + rel_dist4_and_l + rel_dist5_and_l + rel_dist6_and_l + rel_dist7_and_l + rel_dist8_and_l + rel_dist9_and_l + rel_dist10_and_l.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_and_l	rel_dist1_and_l/sum_rel_dist_and_l.
DEFINE wt2_and_l	rel_dist2_and_l/sum_rel_dist_and_l.
DEFINE wt3_and_l	rel_dist3_and_l/sum_rel_dist_and_l.
DEFINE wt4_and_l	rel_dist4_and_l/sum_rel_dist_and_l.
DEFINE wt5_and_l	rel_dist5_and_l/sum_rel_dist_and_l.
DEFINE wt6_and_l	rel_dist6_and_l/sum_rel_dist_and_l.
DEFINE wt7_and_l	rel_dist7_and_l/sum_rel_dist_and_l.
DEFINE wt8_and_l	rel_dist8_and_l/sum_rel_dist_and_l.
DEFINE wt9_and_l	rel_dist9_and_l/sum_rel_dist_and_l.
DEFINE wt10_and_l	rel_dist10_and_l/sum_rel_dist_and_l.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_and_l	ROUND(BD1_and_l*wt1_and_l + BD2_and_l*wt2_and_l + BD3_and_l*wt3_and_l + BD4_and_l*wt4_and_l + BD5_and_l*wt5_and_l + BD6_and_l*wt6_and_l + BD7_and_l*wt7_and_l + BD8_and_l*wt8_and_l + BD9_and_l*wt9_and_l + BD10_and_l*wt10_and_l,2).			

#-------------

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_BD_min_sand_and_l	((BD_min_sand)-ave_sand)/std_sand.
DEFINE temp_BD_min_silt_and_l	((BD_min_silt)-ave_silt)/std_silt.
DEFINE temp_BD_min_clay_and_l	((BD_min_clay)-ave_clay)/std_clay.
DEFINE temp_oc_h_and_l			((oc_h)-ave_carbon)/std_carbon.

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_BD_min_sand_and_l	temp_BD_min_sand_and_l*ARRAYMAX(cat_ranges_and)/range_sand.
DEFINE trans_BD_min_silt_and_l	temp_BD_min_silt_and_l*ARRAYMAX(cat_ranges_and)/range_silt.
DEFINE trans_BD_min_clay_and_l	temp_BD_min_clay_and_l*ARRAYMAX(cat_ranges_and)/range_clay.
DEFINE trans_oc_h_and_l			temp_oc_h_and_l*ARRAYMAX(cat_ranges_and)/range_carbon.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance10	SQRT(POW(trans_BD_min_sand_and_l - trans_sand,2)+POW(trans_BD_min_silt_and_l - trans_silt,2)+
					POW(trans_BD_min_clay_and_l - trans_clay,2)+POW(trans_oc_h_and_l - trans_carbon,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_and2_l	ARRAYMIN(distance10).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_and2_l 	ARRAYPOSITION(distance10).
DEFINE pos1_and2_l 	LOOKUP(minn1_and2_l, distance10, pos_and2_l).
DEFINE dist2_and2_l	IF pos_and2_l == pos1_and2_l THEN distance10 + 1000 ELSE distance10.
DEFINE minn2_and2_l	ARRAYMIN(dist2_and2_l).
DEFINE pos2_and2_l	LOOKUP(minn2_and2_l, dist2_and2_l, pos_and2_l).
DEFINE dist3_and2_l	IF pos_and2_l == pos2_and2_l THEN dist2_and2_l + 1000 ELSE dist2_and2_l.
DEFINE minn3_and2_l	ARRAYMIN(dist3_and2_l).
DEFINE pos3_and2_l	LOOKUP(minn3_and2_l, dist3_and2_l, pos_and2_l).
DEFINE dist4_and2_l	IF pos_and2_l == pos3_and2_l THEN dist3_and2_l + 1000 ELSE dist3_and2_l.
DEFINE minn4_and2_l	ARRAYMIN(dist4_and2_l).
DEFINE pos4_and2_l	LOOKUP(minn4_and2_l, dist4_and2_l, pos_and2_l).
DEFINE dist5_and2_l	IF pos_and2_l == pos4_and2_l THEN dist4_and2_l + 1000 ELSE dist4_and2_l.
DEFINE minn5_and2_l	ARRAYMIN(dist5_and2_l).
DEFINE pos5_and2_l	LOOKUP(minn5_and2_l, dist5_and2_l, pos_and2_l).
DEFINE dist6_and2_l	IF pos_and2_l == pos5_and2_l THEN dist5_and2_l + 1000 ELSE dist5_and2_l.
DEFINE minn6_and2_l	ARRAYMIN(dist6_and2_l).
DEFINE pos6_and2_l	LOOKUP(minn6_and2_l, dist6_and2_l, pos_and2_l).
DEFINE dist7_and2_l	IF pos_and2_l == pos6_and2_l THEN dist6_and2_l + 1000 ELSE dist6_and2_l.
DEFINE minn7_and2_l	ARRAYMIN(dist7_and2_l).
DEFINE pos7_and2_l	LOOKUP(minn7_and2_l, dist7_and2_l, pos_and2_l).
DEFINE dist8_and2_l	IF pos_and2_l == pos7_and2_l THEN dist7_and2_l + 1000 ELSE dist7_and2_l.
DEFINE minn8_and2_l	ARRAYMIN(dist8_and2_l).
DEFINE pos8_and2_l	LOOKUP(minn8_and2_l, dist8_and2_l, pos_and2_l).
DEFINE dist9_and2_l	IF pos_and2_l == pos8_and2_l THEN dist8_and2_l + 1000 ELSE dist8_and2_l.
DEFINE minn9_and2_l	ARRAYMIN(dist9_and2_l).
DEFINE pos9_and2_l	LOOKUP(minn9_and2_l, dist9_and2_l, pos_and2_l).
DEFINE dist10_and2_l	IF pos_and2_l == pos9_and2_l THEN dist9_and2_l + 1000 ELSE dist9_and2_l.
DEFINE minn10_and2_l	ARRAYMIN(dist10_and2_l).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_and2_l		LOOKUP(minn1_and2_l, distance10, db_13b).
ASSIGN BD1_and2_l		ARRAYMIN(BD1_and2_l).
DEFINE BD2_and2_l		LOOKUP(minn2_and2_l, dist2_and2_l, db_13b).
ASSIGN BD2_and2_l		ARRAYMIN(BD2_and2_l).
DEFINE BD3_and2_l		LOOKUP(minn3_and2_l, dist3_and2_l, db_13b).
ASSIGN BD3_and2_l		ARRAYMIN(BD3_and2_l).
DEFINE BD4_and2_l		LOOKUP(minn4_and2_l, dist4_and2_l, db_13b).
ASSIGN BD4_and2_l		ARRAYMIN(BD4_and2_l).
DEFINE BD5_and2_l		LOOKUP(minn5_and2_l, dist5_and2_l, db_13b).
ASSIGN BD5_and2_l		ARRAYMIN(BD5_and2_l).
DEFINE BD6_and2_l		LOOKUP(minn6_and2_l, dist6_and2_l, db_13b).
ASSIGN BD6_and2_l		ARRAYMIN(BD6_and2_l).
DEFINE BD7_and2_l		LOOKUP(minn7_and2_l, dist7_and2_l, db_13b).
ASSIGN BD7_and2_l		ARRAYMIN(BD7_and2_l).
DEFINE BD8_and2_l		LOOKUP(minn8_and2_l, dist8_and2_l, db_13b).
ASSIGN BD8_and2_l		ARRAYMIN(BD8_and2_l).
DEFINE BD9_and2_l		LOOKUP(minn9_and2_l, dist9_and2_l, db_13b).
ASSIGN BD9_and2_l		ARRAYMIN(BD9_and2_l).
DEFINE BD10_and2_l		LOOKUP(minn10_and2_l, dist10_and2_l, db_13b).
ASSIGN BD10_and2_l		ARRAYMIN(BD10_and2_l).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_and2_l	IF minn1_and2_l == 0 THEN 1 ELSE minn1_and2_l.
ASSIGN minn2_and2_l	IF minn2_and2_l == 0 THEN 1 ELSE minn2_and2_l.
ASSIGN minn3_and2_l	IF minn3_and2_l == 0 THEN 1 ELSE minn3_and2_l.
ASSIGN minn4_and2_l	IF minn4_and2_l == 0 THEN 1 ELSE minn4_and2_l.
ASSIGN minn5_and2_l	IF minn5_and2_l == 0 THEN 1 ELSE minn5_and2_l.
ASSIGN minn6_and2_l	IF minn6_and2_l == 0 THEN 1 ELSE minn6_and2_l.
ASSIGN minn7_and2_l	IF minn7_and2_l == 0 THEN 1 ELSE minn7_and2_l.
ASSIGN minn8_and2_l	IF minn8_and2_l == 0 THEN 1 ELSE minn8_and2_l.
ASSIGN minn9_and2_l	IF minn9_and2_l == 0 THEN 1 ELSE minn9_and2_l.
ASSIGN minn10_and2_l	IF minn10_and2_l == 0 THEN 1 ELSE minn10_and2_l.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_and2_l		minn1_and2_l + minn2_and2_l + minn3_and2_l + minn4_and2_l + minn5_and2_l + minn6_and2_l + 
							minn7_and2_l + minn8_and2_l + minn9_and2_l + minn10_and2_l.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_and2_l	POW(sum_dist_and2_l/minn1_and2_l,1).
DEFINE rel_dist2_and2_l	POW(sum_dist_and2_l/minn2_and2_l,1).
DEFINE rel_dist3_and2_l	POW(sum_dist_and2_l/minn3_and2_l,1).
DEFINE rel_dist4_and2_l	POW(sum_dist_and2_l/minn4_and2_l,1).
DEFINE rel_dist5_and2_l	POW(sum_dist_and2_l/minn5_and2_l,1).
DEFINE rel_dist6_and2_l	POW(sum_dist_and2_l/minn6_and2_l,1).
DEFINE rel_dist7_and2_l	POW(sum_dist_and2_l/minn7_and2_l,1).
DEFINE rel_dist8_and2_l	POW(sum_dist_and2_l/minn8_and2_l,1).
DEFINE rel_dist9_and2_l	POW(sum_dist_and2_l/minn9_and2_l,1).
DEFINE rel_dist10_and2_l	POW(sum_dist_and2_l/minn10_and2_l,1).


DEFINE sum_rel_dist_and2_l		rel_dist1_and2_l + rel_dist2_and2_l + rel_dist3_and2_l + rel_dist4_and2_l + rel_dist5_and2_l + 
								rel_dist6_and2_l + rel_dist7_and2_l + rel_dist8_and2_l + rel_dist9_and2_l + rel_dist10_and2_l.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_and2_l	rel_dist1_and2_l/sum_rel_dist_and2_l.
DEFINE wt2_and2_l	rel_dist2_and2_l/sum_rel_dist_and2_l.
DEFINE wt3_and2_l	rel_dist3_and2_l/sum_rel_dist_and2_l.
DEFINE wt4_and2_l	rel_dist4_and2_l/sum_rel_dist_and2_l.
DEFINE wt5_and2_l	rel_dist5_and2_l/sum_rel_dist_and2_l.
DEFINE wt6_and2_l	rel_dist6_and2_l/sum_rel_dist_and2_l.
DEFINE wt7_and2_l  	rel_dist7_and2_l/sum_rel_dist_and2_l.
DEFINE wt8_and2_l	rel_dist8_and2_l/sum_rel_dist_and2_l.
DEFINE wt9_and2_l  	rel_dist9_and2_l/sum_rel_dist_and2_l.
DEFINE wt10_and2_l	rel_dist10_and2_l/sum_rel_dist_and2_l.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_and2_l		ROUND(BD1_and2_l*wt1_and2_l + BD2_and2_l*wt2_and2_l + BD3_and2_l*wt3_and2_l + BD4_and2_l*wt4_and2_l + 
						BD5_and2_l*wt5_and2_l + BD6_and2_l*wt6_and2_l + BD7_and2_l*wt7_and2_l + BD8_and2_l*wt8_and2_l + 
						+ BD9_and2_l*wt9_and2_l + BD10_and2_l*wt10_and2_l,2).			

DEFINE wt_BD_andic_l	IF isnull(claytotal_r) or isnull(silttotal_r) or isnull(sandtotal_r) THEN wt_BD_and_l ELSE wt_BD_and2_l.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Andic BD %s" wt_BD_andic_l.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s" BD1_and_l, BD2_and_l, BD3_and_l, BD4_and_l, BD5_and_l.

# GYPSUM SOILS LOW-------------------------------------------------------------

# Determines the 'distance' of each soil from the target soil.
DEFINE distance11		SQRT(POW(gypsum_h - c_gypl2,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_gyp40_l	ARRAYMIN(distance11).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_gyp40_l 		ARRAYPOSITION(distance11).
DEFINE pos1_gyp40_l 	LOOKUP(minn1_gyp40_l, distance11, pos_gyp40_l).
DEFINE dist2_gyp40_l	IF pos_gyp40_l == pos1_gyp40_l THEN distance11 + 1000 ELSE distance11.
DEFINE minn2_gyp40_l	ARRAYMIN(dist2_gyp40_l).
DEFINE pos2_gyp40_l		LOOKUP(minn2_gyp40_l, dist2_gyp40_l, pos_gyp40_l).
DEFINE dist3_gyp40_l	IF pos_gyp40_l == pos2_gyp40_l THEN dist2_gyp40_l + 1000 ELSE dist2_gyp40_l.
DEFINE minn3_gyp40_l	ARRAYMIN(dist3_gyp40_l).
DEFINE pos3_gyp40_l		LOOKUP(minn3_gyp40_l, dist3_gyp40_l, pos_gyp40_l).
DEFINE dist4_gyp40_l	IF pos_gyp40_l == pos3_gyp40_l THEN dist3_gyp40_l + 1000 ELSE dist3_gyp40_l.
DEFINE minn4_gyp40_l	ARRAYMIN(dist4_gyp40_l).
DEFINE pos4_gyp40_l		LOOKUP(minn4_gyp40_l, dist4_gyp40_l, pos_gyp40_l).
DEFINE dist5_gyp40_l	IF pos_gyp40_l == pos4_gyp40_l THEN dist4_gyp40_l + 1000 ELSE dist4_gyp40_l.
DEFINE minn5_gyp40_l	ARRAYMIN(dist5_gyp40_l).
DEFINE pos5_gyp40_l		LOOKUP(minn5_gyp40_l, dist5_gyp40_l, pos_gyp40_l).
DEFINE dist6_gyp40_l	IF pos_gyp40_l == pos5_gyp40_l THEN dist5_gyp40_l + 1000 ELSE dist5_gyp40_l.
DEFINE minn6_gyp40_l	ARRAYMIN(dist6_gyp40_l).
DEFINE pos6_gyp40_l		LOOKUP(minn6_gyp40_l, dist6_gyp40_l, pos_gyp40_l).
DEFINE dist7_gyp40_l	IF pos_gyp40_l == pos6_gyp40_l THEN dist6_gyp40_l + 1000 ELSE dist6_gyp40_l.
DEFINE minn7_gyp40_l	ARRAYMIN(dist7_gyp40_l).
DEFINE pos7_gyp40_l		LOOKUP(minn7_gyp40_l, dist7_gyp40_l, pos_gyp40_l).
DEFINE dist8_gyp40_l	IF pos_gyp40_l == pos7_gyp40_l THEN dist7_gyp40_l + 1000 ELSE dist7_gyp40_l.
DEFINE minn8_gyp40_l	ARRAYMIN(dist8_gyp40_l).
DEFINE pos8_gyp40_l		LOOKUP(minn8_gyp40_l, dist8_gyp40_l, pos_gyp40_l).
DEFINE dist9_gyp40_l	IF pos_gyp40_l == pos8_gyp40_l THEN dist8_gyp40_l + 1000 ELSE dist8_gyp40_l.
DEFINE minn9_gyp40_l	ARRAYMIN(dist9_gyp40_l).
DEFINE pos9_gyp40_l		LOOKUP(minn9_gyp40_l, dist9_gyp40_l, pos_gyp40_l).
DEFINE dist10_gyp40_l	IF pos_gyp40_l == pos9_gyp40_l THEN dist9_gyp40_l + 1000 ELSE dist9_gyp40_l.
DEFINE minn10_gyp40_l	ARRAYMIN(dist10_gyp40_l).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_gyp40_l		LOOKUP(minn1_gyp40_l, distance11, g_db_13b).
ASSIGN BD1_gyp40_l		ARRAYMIN(BD1_gyp40_l).
DEFINE BD2_gyp40_l		LOOKUP(minn2_gyp40_l, dist2_gyp40_l, g_db_13b).
ASSIGN BD2_gyp40_l		ARRAYMIN(BD2_gyp40_l).
DEFINE BD3_gyp40_l		LOOKUP(minn3_gyp40_l, dist3_gyp40_l, g_db_13b).
ASSIGN BD3_gyp40_l		ARRAYMIN(BD3_gyp40_l).
DEFINE BD4_gyp40_l		LOOKUP(minn4_gyp40_l, dist4_gyp40_l, g_db_13b).
ASSIGN BD4_gyp40_l		ARRAYMIN(BD4_gyp40_l).
DEFINE BD5_gyp40_l		LOOKUP(minn5_gyp40_l, dist5_gyp40_l, g_db_13b).
ASSIGN BD5_gyp40_l		ARRAYMIN(BD5_gyp40_l).
DEFINE BD6_gyp40_l		LOOKUP(minn6_gyp40_l, dist6_gyp40_l, g_db_13b).
ASSIGN BD6_gyp40_l		ARRAYMIN(BD6_gyp40_l).
DEFINE BD7_gyp40_l		LOOKUP(minn7_gyp40_l, dist7_gyp40_l, g_db_13b).
ASSIGN BD7_gyp40_l		ARRAYMIN(BD7_gyp40_l).
DEFINE BD8_gyp40_l		LOOKUP(minn8_gyp40_l, dist8_gyp40_l, g_db_13b).
ASSIGN BD8_gyp40_l		ARRAYMIN(BD8_gyp40_l).
DEFINE BD9_gyp40_l		LOOKUP(minn9_gyp40_l, dist9_gyp40_l, g_db_13b).
ASSIGN BD9_gyp40_l		ARRAYMIN(BD9_gyp40_l).
DEFINE BD10_gyp40_l		LOOKUP(minn10_gyp40_l, dist10_gyp40_l, g_db_13b).
ASSIGN BD10_gyp40_l		ARRAYMIN(BD10_gyp40_l).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_gyp40_l	IF minn1_gyp40_l == 0 THEN 1 ELSE minn1_gyp40_l.
ASSIGN minn2_gyp40_l	IF minn2_gyp40_l == 0 THEN 1 ELSE minn2_gyp40_l.
ASSIGN minn3_gyp40_l	IF minn3_gyp40_l == 0 THEN 1 ELSE minn3_gyp40_l.
ASSIGN minn4_gyp40_l	IF minn4_gyp40_l == 0 THEN 1 ELSE minn4_gyp40_l.
ASSIGN minn5_gyp40_l	IF minn5_gyp40_l == 0 THEN 1 ELSE minn5_gyp40_l.
ASSIGN minn6_gyp40_l	IF minn6_gyp40_l == 0 THEN 1 ELSE minn6_gyp40_l.
ASSIGN minn7_gyp40_l	IF minn7_gyp40_l == 0 THEN 1 ELSE minn7_gyp40_l.
ASSIGN minn8_gyp40_l	IF minn8_gyp40_l == 0 THEN 1 ELSE minn8_gyp40_l.
ASSIGN minn9_gyp40_l	IF minn9_gyp40_l == 0 THEN 1 ELSE minn9_gyp40_l.
ASSIGN minn10_gyp40_l	IF minn10_gyp40_l == 0 THEN 1 ELSE minn10_gyp40_l.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_gyp40_l		minn1_gyp40_l + minn2_gyp40_l + minn3_gyp40_l + minn4_gyp40_l + minn5_gyp40_l + minn6_gyp40_l + minn7_gyp40_l + minn8_gyp40_l + minn9_gyp40_l + minn10_gyp40_l.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_gyp40_l	POW(sum_dist_gyp40_l/minn1_gyp40_l,1).
DEFINE rel_dist2_gyp40_l	POW(sum_dist_gyp40_l/minn2_gyp40_l,1).
DEFINE rel_dist3_gyp40_l	POW(sum_dist_gyp40_l/minn3_gyp40_l,1).
DEFINE rel_dist4_gyp40_l	POW(sum_dist_gyp40_l/minn4_gyp40_l,1).
DEFINE rel_dist5_gyp40_l	POW(sum_dist_gyp40_l/minn5_gyp40_l,1).
DEFINE rel_dist6_gyp40_l	POW(sum_dist_gyp40_l/minn6_gyp40_l,1).
DEFINE rel_dist7_gyp40_l	POW(sum_dist_gyp40_l/minn7_gyp40_l,1).
DEFINE rel_dist8_gyp40_l	POW(sum_dist_gyp40_l/minn8_gyp40_l,1).
DEFINE rel_dist9_gyp40_l	POW(sum_dist_gyp40_l/minn9_gyp40_l,1).
DEFINE rel_dist10_gyp40_l	POW(sum_dist_gyp40_l/minn10_gyp40_l,1).

DEFINE sum_rel_dist_gyp40_l		rel_dist1_gyp40_l + rel_dist2_gyp40_l + rel_dist3_gyp40_l + rel_dist4_gyp40_l + rel_dist5_gyp40_l +
								rel_dist6_gyp40_l + rel_dist7_gyp40_l + rel_dist8_gyp40_l + rel_dist9_gyp40_l + rel_dist10_gyp40_l.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_gyp40_l	rel_dist1_gyp40_l/sum_rel_dist_gyp40_l.
DEFINE wt2_gyp40_l	rel_dist2_gyp40_l/sum_rel_dist_gyp40_l.
DEFINE wt3_gyp40_l	rel_dist3_gyp40_l/sum_rel_dist_gyp40_l.
DEFINE wt4_gyp40_l	rel_dist4_gyp40_l/sum_rel_dist_gyp40_l.
DEFINE wt5_gyp40_l	rel_dist5_gyp40_l/sum_rel_dist_gyp40_l.
DEFINE wt6_gyp40_l	rel_dist6_gyp40_l/sum_rel_dist_gyp40_l.
DEFINE wt7_gyp40_l	rel_dist7_gyp40_l/sum_rel_dist_gyp40_l.
DEFINE wt8_gyp40_l	rel_dist8_gyp40_l/sum_rel_dist_gyp40_l.
DEFINE wt9_gyp40_l	rel_dist9_gyp40_l/sum_rel_dist_gyp40_l.
DEFINE wt10_gyp40_l	rel_dist10_gyp40_l/sum_rel_dist_gyp40_l.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_gyp40_l	ROUND(BD1_gyp40_l*wt1_gyp40_l + BD2_gyp40_l*wt2_gyp40_l + BD3_gyp40_l*wt3_gyp40_l + 
						BD4_gyp40_l*wt4_gyp40_l + BD5_gyp40_l*wt5_gyp40_l + BD6_gyp40_l*wt6_gyp40_l + BD7_gyp40_l*wt7_gyp40_l + BD8_gyp40_l*wt8_gyp40_l + 
						BD9_gyp40_l*wt9_gyp40_l + BD10_gyp40_l*wt10_gyp40_l,2).

#-------------

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_BD_min_sand_gyp	((BD_min_sand)-ave_gsand)/std_gsand.
DEFINE temp_BD_min_silt_gyp	((BD_min_silt)-ave_gsilt)/std_gsilt.
DEFINE temp_BD_min_clay_gyp	((BD_min_clay)-ave_gclay)/std_gclay.
DEFINE temp_oc_h_gyp		((oc_h)-ave_gcarbon)/std_gcarbon.
DEFINE temp_gypsum_h_gyp	((gypsum_h)-ave_ggyp)/std_ggyp.

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_BD_min_sand_gyp	temp_BD_min_sand_gyp*ARRAYMAX(cat_ranges_gyp)/range_gsand.
DEFINE trans_BD_min_silt_gyp	temp_BD_min_silt_gyp*ARRAYMAX(cat_ranges_gyp)/range_gsilt.
DEFINE trans_BD_min_clay_gyp	temp_BD_min_clay_gyp*ARRAYMAX(cat_ranges_gyp)/range_gclay.
DEFINE trans_oc_h_gyp			temp_oc_h_gyp*ARRAYMAX(cat_ranges_gyp)/range_gcarbon.
DEFINE trans_gypsum_h_gyp		temp_gypsum_h_gyp*ARRAYMAX(cat_ranges_gyp)/range_ggyp.

# Determines the 'distance' of each soil from the target soil.
DEFINE distance12	SQRT(POW(trans_BD_min_sand_gyp - trans_gsand,2)+POW(trans_BD_min_silt_gyp - trans_gsilt,2)+
					POW(trans_BD_min_clay_gyp - trans_gclay,2)+POW(trans_oc_h_gyp - trans_gcarbon,2)+POW(trans_gypsum_h_gyp - trans_ggyp,2)).

# Gets the minimum distance to the target soil.
DEFINE minn1_gyp_l	ARRAYMIN(distance12).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_gyp_l 	ARRAYPOSITION(distance12).
DEFINE pos1_gyp_l 	LOOKUP(minn1_gyp_l, distance12, pos_gyp_l).
DEFINE dist2_gyp_l	IF pos_gyp_l == pos1_gyp_l THEN distance12 + 1000 ELSE distance12.
DEFINE minn2_gyp_l	ARRAYMIN(dist2_gyp_l).
DEFINE pos2_gyp_l	LOOKUP(minn2_gyp_l, dist2_gyp_l, pos_gyp_l).
DEFINE dist3_gyp_l	IF pos_gyp_l == pos2_gyp_l THEN dist2_gyp_l + 1000 ELSE dist2_gyp_l.
DEFINE minn3_gyp_l	ARRAYMIN(dist3_gyp_l).
DEFINE pos3_gyp_l	LOOKUP(minn3_gyp_l, dist3_gyp_l, pos_gyp_l).
DEFINE dist4_gyp_l	IF pos_gyp_l == pos3_gyp_l THEN dist3_gyp_l + 1000 ELSE dist3_gyp_l.
DEFINE minn4_gyp_l	ARRAYMIN(dist4_gyp_l).
DEFINE pos4_gyp_l	LOOKUP(minn4_gyp_l, dist4_gyp_l, pos_gyp_l).
DEFINE dist5_gyp_l	IF pos_gyp_l == pos4_gyp_l THEN dist4_gyp_l + 1000 ELSE dist4_gyp_l.
DEFINE minn5_gyp_l	ARRAYMIN(dist5_gyp_l).
DEFINE pos5_gyp_l	LOOKUP(minn5_gyp_l, dist5_gyp_l, pos_gyp_l).
DEFINE dist6_gyp_l	IF pos_gyp_l == pos5_gyp_l THEN dist5_gyp_l + 1000 ELSE dist5_gyp_l.
DEFINE minn6_gyp_l	ARRAYMIN(dist6_gyp_l).
DEFINE pos6_gyp_l	LOOKUP(minn6_gyp_l, dist6_gyp_l, pos_gyp_l).
DEFINE dist7_gyp_l	IF pos_gyp_l == pos6_gyp_l THEN dist6_gyp_l + 1000 ELSE dist6_gyp_l.
DEFINE minn7_gyp_l	ARRAYMIN(dist7_gyp_l).
DEFINE pos7_gyp_l	LOOKUP(minn7_gyp_l, dist7_gyp_l, pos_gyp_l).
DEFINE dist8_gyp_l	IF pos_gyp_l == pos7_gyp_l THEN dist7_gyp_l + 1000 ELSE dist7_gyp_l.
DEFINE minn8_gyp_l	ARRAYMIN(dist8_gyp_l).
DEFINE pos8_gyp_l	LOOKUP(minn8_gyp_l, dist8_gyp_l, pos_gyp_l).
DEFINE dist9_gyp_l	IF pos_gyp_l == pos8_gyp_l THEN dist8_gyp_l + 1000 ELSE dist8_gyp_l.
DEFINE minn9_gyp_l	ARRAYMIN(dist9_gyp_l).
DEFINE pos9_gyp_l	LOOKUP(minn9_gyp_l, dist9_gyp_l, pos_gyp_l).
DEFINE dist10_gyp_l	IF pos_gyp_l == pos9_gyp_l THEN dist9_gyp_l + 1000 ELSE dist9_gyp_l.
DEFINE minn10_gyp_l	ARRAYMIN(dist10_gyp_l).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_gyp_l		LOOKUP(minn1_gyp_l, distance12, g_db_13b).
ASSIGN BD1_gyp_l		ARRAYMIN(BD1_gyp_l).
DEFINE BD2_gyp_l		LOOKUP(minn2_gyp_l, dist2_gyp_l, g_db_13b).
ASSIGN BD2_gyp_l		ARRAYMIN(BD2_gyp_l).
DEFINE BD3_gyp_l		LOOKUP(minn3_gyp_l, dist3_gyp_l, g_db_13b).
ASSIGN BD3_gyp_l		ARRAYMIN(BD3_gyp_l).
DEFINE BD4_gyp_l		LOOKUP(minn4_gyp_l, dist4_gyp_l, g_db_13b).
ASSIGN BD4_gyp_l		ARRAYMIN(BD4_gyp_l).
DEFINE BD5_gyp_l		LOOKUP(minn5_gyp_l, dist5_gyp_l, g_db_13b).
ASSIGN BD5_gyp_l		ARRAYMIN(BD5_gyp_l).
DEFINE BD6_gyp_l		LOOKUP(minn6_gyp_l, dist6_gyp_l, g_db_13b).
ASSIGN BD6_gyp_l		ARRAYMIN(BD6_gyp_l).
DEFINE BD7_gyp_l		LOOKUP(minn7_gyp_l, dist7_gyp_l, g_db_13b).
ASSIGN BD7_gyp_l		ARRAYMIN(BD7_gyp_l).
DEFINE BD8_gyp_l		LOOKUP(minn8_gyp_l, dist8_gyp_l, g_db_13b).
ASSIGN BD8_gyp_l		ARRAYMIN(BD8_gyp_l).
DEFINE BD9_gyp_l		LOOKUP(minn9_gyp_l, dist9_gyp_l, g_db_13b).
ASSIGN BD9_gyp_l		ARRAYMIN(BD9_gyp_l).
DEFINE BD10_gyp_l		LOOKUP(minn10_gyp_l, dist10_gyp_l, g_db_13b).
ASSIGN BD10_gyp_l		ARRAYMIN(BD10_gyp_l).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_gyp_l	IF minn1_gyp_l == 0 THEN 1 ELSE minn1_gyp_l.
ASSIGN minn2_gyp_l	IF minn2_gyp_l == 0 THEN 1 ELSE minn2_gyp_l.
ASSIGN minn3_gyp_l	IF minn3_gyp_l == 0 THEN 1 ELSE minn3_gyp_l.
ASSIGN minn4_gyp_l	IF minn4_gyp_l == 0 THEN 1 ELSE minn4_gyp_l.
ASSIGN minn5_gyp_l	IF minn5_gyp_l == 0 THEN 1 ELSE minn5_gyp_l.
ASSIGN minn6_gyp_l	IF minn6_gyp_l == 0 THEN 1 ELSE minn6_gyp_l.
ASSIGN minn7_gyp_l	IF minn7_gyp_l == 0 THEN 1 ELSE minn7_gyp_l.
ASSIGN minn8_gyp_l	IF minn8_gyp_l == 0 THEN 1 ELSE minn8_gyp_l.
ASSIGN minn9_gyp_l	IF minn9_gyp_l == 0 THEN 1 ELSE minn9_gyp_l.
ASSIGN minn10_gyp_l	IF minn10_gyp_l == 0 THEN 1 ELSE minn10_gyp_l.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_gyp_l		minn1_gyp_l + minn2_gyp_l + minn3_gyp_l + minn4_gyp_l + minn5_gyp_l + minn6_gyp_l + minn7_gyp_l + minn8_gyp_l + minn9_gyp_l + minn10_gyp_l.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_gyp_l	POW(sum_dist_gyp_l/minn1_gyp_l,1).
DEFINE rel_dist2_gyp_l	POW(sum_dist_gyp_l/minn2_gyp_l,1).
DEFINE rel_dist3_gyp_l	POW(sum_dist_gyp_l/minn3_gyp_l,1).
DEFINE rel_dist4_gyp_l	POW(sum_dist_gyp_l/minn4_gyp_l,1).
DEFINE rel_dist5_gyp_l	POW(sum_dist_gyp_l/minn5_gyp_l,1).
DEFINE rel_dist6_gyp_l	POW(sum_dist_gyp_l/minn6_gyp_l,1).
DEFINE rel_dist7_gyp_l	POW(sum_dist_gyp_l/minn7_gyp_l,1).
DEFINE rel_dist8_gyp_l	POW(sum_dist_gyp_l/minn8_gyp_l,1).
DEFINE rel_dist9_gyp_l	POW(sum_dist_gyp_l/minn9_gyp_l,1).
DEFINE rel_dist10_gyp_l	POW(sum_dist_gyp_l/minn10_gyp_l,1).

DEFINE sum_rel_dist_gyp_l	rel_dist1_gyp_l + rel_dist2_gyp_l + rel_dist3_gyp_l + rel_dist4_gyp_l + rel_dist5_gyp_l + rel_dist6_gyp_l + 
							rel_dist7_gyp_l + rel_dist8_gyp_l + rel_dist9_gyp_l + rel_dist10_gyp_l.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_gyp_l	rel_dist1_gyp_l/sum_rel_dist_gyp_l.
DEFINE wt2_gyp_l	rel_dist2_gyp_l/sum_rel_dist_gyp_l.
DEFINE wt3_gyp_l	rel_dist3_gyp_l/sum_rel_dist_gyp_l.
DEFINE wt4_gyp_l	rel_dist4_gyp_l/sum_rel_dist_gyp_l.
DEFINE wt5_gyp_l	rel_dist5_gyp_l/sum_rel_dist_gyp_l.
DEFINE wt6_gyp_l	rel_dist6_gyp_l/sum_rel_dist_gyp_l.
DEFINE wt7_gyp_l  	rel_dist7_gyp_l/sum_rel_dist_gyp_l.
DEFINE wt8_gyp_l	rel_dist8_gyp_l/sum_rel_dist_gyp_l.
DEFINE wt9_gyp_l  	rel_dist9_gyp_l/sum_rel_dist_gyp_l.
DEFINE wt10_gyp_l	rel_dist10_gyp_l/sum_rel_dist_gyp_l.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_gyp_l	ROUND(BD1_gyp_l*wt1_gyp_l + BD2_gyp_l*wt2_gyp_l + BD3_gyp_l*wt3_gyp_l + BD4_gyp_l*wt4_gyp_l + BD5_gyp_l*wt5_gyp_l + 
					BD6_gyp_l*wt6_gyp_l + BD7_gyp_l*wt7_gyp_l + BD8_gyp_l*wt8_gyp_l + BD9_gyp_l*wt9_gyp_l + BD10_gyp_l*wt10_gyp_l,2).			

DEFINE wt_BD_gypsum_l		IF gypsum_r > 40 THEN wt_BD_gyp40_l ELSE wt_BD_gyp_l.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "gypsum BD %s" wt_BD_gypsum_l.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s" BD1_gyp40_l, BD2_gyp40_l, BD3_gyp40_l, BD4_gyp40_l, BD5_gyp40_l.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s, %s, %s, %s" BD1_gyp_l, BD2_gyp_l, BD3_gyp_l, BD4_gyp_l, BD5_gyp_l, BD6_gyp_l, BD7_gyp_l, BD8_gyp_l.

#-----------------------------------------------
# MINERAL SOILS LOW-----------------------------

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_BD_min_sand_min	((BD_min_sand)-ave_msand)/std_msand.
DEFINE temp_BD_min_silt_min	((BD_min_silt)-ave_msilt)/std_msilt.
DEFINE temp_BD_min_clay_min	((BD_min_clay)-ave_mclay)/std_mclay.
DEFINE temp_oc_h_min		((oc_h)-ave_m_oc)/std_m_oc.

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_BD_min_sand_min	temp_BD_min_sand_min*ARRAYMAX(cat_ranges_min)/range_msand.
DEFINE trans_BD_min_silt_min	temp_BD_min_silt_min*ARRAYMAX(cat_ranges_min)/range_msilt.
DEFINE trans_BD_min_clay_min	temp_BD_min_clay_min*ARRAYMAX(cat_ranges_min)/range_mclay.
DEFINE trans_oc_h_min			temp_oc_h_min*ARRAYMAX(cat_ranges_min)/range_m_oc.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance13	SQRT(POW(trans_BD_min_sand_min - trans_msand,2)+POW(trans_BD_min_silt_min - trans_msilt,2)+
					POW(trans_BD_min_clay_min - trans_mclay,2)+POW(trans_oc_h_min - trans_m_oc,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_min_l	ARRAYMIN(distance13).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_min_l 	ARRAYPOSITION(distance13).
DEFINE pos1_min_l 	LOOKUP(minn1_min_l, distance13, pos_min_l).
DEFINE dist2_min_l	IF pos_min_l == pos1_min_l THEN distance13 + 1000 ELSE distance13.
DEFINE minn2_min_l	ARRAYMIN(dist2_min_l).
DEFINE pos2_min_l	LOOKUP(minn2_min_l, dist2_min_l, pos_min_l).
DEFINE dist3_min_l	IF pos_min_l == pos2_min_l THEN dist2_min_l + 1000 ELSE dist2_min_l.
DEFINE minn3_min_l	ARRAYMIN(dist3_min_l).
DEFINE pos3_min_l	LOOKUP(minn3_min_l, dist3_min_l, pos_min_l).
DEFINE dist4_min_l	IF pos_min_l == pos3_min_l THEN dist3_min_l + 1000 ELSE dist3_min_l.
DEFINE minn4_min_l	ARRAYMIN(dist4_min_l).
DEFINE pos4_min_l	LOOKUP(minn4_min_l, dist4_min_l, pos_min_l).
DEFINE dist5_min_l	IF pos_min_l == pos4_min_l THEN dist4_min_l + 1000 ELSE dist4_min_l.
DEFINE minn5_min_l	ARRAYMIN(dist5_min_l).
DEFINE pos5_min_l	LOOKUP(minn5_min_l, dist5_min_l, pos_min_l).
DEFINE dist6_min_l	IF pos_min_l == pos5_min_l THEN dist5_min_l + 1000 ELSE dist5_min_l.
DEFINE minn6_min_l	ARRAYMIN(dist6_min_l).
DEFINE pos6_min_l	LOOKUP(minn6_min_l, dist6_min_l, pos_min_l).
DEFINE dist7_min_l	IF pos_min_l == pos6_min_l THEN dist6_min_l + 1000 ELSE dist6_min_l.
DEFINE minn7_min_l	ARRAYMIN(dist7_min_l).
DEFINE pos7_min_l	LOOKUP(minn7_min_l, dist7_min_l, pos_min_l).
DEFINE dist8_min_l	IF pos_min_l == pos7_min_l THEN dist7_min_l + 1000 ELSE dist7_min_l.
DEFINE minn8_min_l	ARRAYMIN(dist8_min_l).
DEFINE pos8_min_l	LOOKUP(minn8_min_l, dist8_min_l, pos_min_l).
DEFINE dist9_min_l	IF pos_min_l == pos8_min_l THEN dist8_min_l + 1000 ELSE dist8_min_l.
DEFINE minn9_min_l	ARRAYMIN(dist9_min_l).
DEFINE pos9_min_l	LOOKUP(minn9_min_l, dist9_min_l, pos_min_l).
DEFINE dist10_min_l	IF pos_min_l == pos9_min_l THEN dist9_min_l + 1000 ELSE dist9_min_l.
DEFINE minn10_min_l	ARRAYMIN(dist10_min_l).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_min_l		LOOKUP(minn1_min_l, distance13, m_db_13b).
ASSIGN BD1_min_l		ARRAYMIN(BD1_min_l).
DEFINE BD2_min_l		LOOKUP(minn2_min_l, dist2_min_l, m_db_13b).
ASSIGN BD2_min_l		ARRAYMIN(BD2_min_l).
DEFINE BD3_min_l		LOOKUP(minn3_min_l, dist3_min_l, m_db_13b).
ASSIGN BD3_min_l		ARRAYMIN(BD3_min_l).
DEFINE BD4_min_l		LOOKUP(minn4_min_l, dist4_min_l, m_db_13b).
ASSIGN BD4_min_l		ARRAYMIN(BD4_min_l).
DEFINE BD5_min_l		LOOKUP(minn5_min_l, dist5_min_l, m_db_13b).
ASSIGN BD5_min_l		ARRAYMIN(BD5_min_l).
DEFINE BD6_min_l		LOOKUP(minn6_min_l, dist6_min_l, m_db_13b).
ASSIGN BD6_min_l		ARRAYMIN(BD6_min_l).
DEFINE BD7_min_l		LOOKUP(minn7_min_l, dist7_min_l, m_db_13b).
ASSIGN BD7_min_l		ARRAYMIN(BD7_min_l).
DEFINE BD8_min_l		LOOKUP(minn8_min_l, dist8_min_l, m_db_13b).
ASSIGN BD8_min_l		ARRAYMIN(BD8_min_l).
DEFINE BD9_min_l		LOOKUP(minn9_min_l, dist9_min_l, m_db_13b).
ASSIGN BD9_min_l		ARRAYMIN(BD9_min_l).
DEFINE BD10_min_l		LOOKUP(minn10_min_l, dist10_min_l, m_db_13b).
ASSIGN BD10_min_l		ARRAYMIN(BD10_min_l).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_min_l	IF minn1_min_l == 0 THEN 1 ELSE minn1_min_l.
ASSIGN minn2_min_l	IF minn2_min_l == 0 THEN 1 ELSE minn2_min_l.
ASSIGN minn3_min_l	IF minn3_min_l == 0 THEN 1 ELSE minn3_min_l.
ASSIGN minn4_min_l	IF minn4_min_l == 0 THEN 1 ELSE minn4_min_l.
ASSIGN minn5_min_l	IF minn5_min_l == 0 THEN 1 ELSE minn5_min_l.
ASSIGN minn6_min_l	IF minn6_min_l == 0 THEN 1 ELSE minn6_min_l.
ASSIGN minn7_min_l	IF minn7_min_l == 0 THEN 1 ELSE minn7_min_l.
ASSIGN minn8_min_l	IF minn8_min_l == 0 THEN 1 ELSE minn8_min_l.
ASSIGN minn9_min_l	IF minn9_min_l == 0 THEN 1 ELSE minn9_min_l.
ASSIGN minn10_min_l	IF minn10_min_l == 0 THEN 1 ELSE minn10_min_l.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_min_l		minn1_min_l + minn2_min_l + minn3_min_l + minn4_min_l + minn5_min_l + minn6_min_l + minn7_min_l + minn8_min_l + minn9_min_l + minn10_min_l.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_min_l	POW(sum_dist_min_l/minn1_min_l,1).
DEFINE rel_dist2_min_l	POW(sum_dist_min_l/minn2_min_l,1).
DEFINE rel_dist3_min_l	POW(sum_dist_min_l/minn3_min_l,1).
DEFINE rel_dist4_min_l	POW(sum_dist_min_l/minn4_min_l,1).
DEFINE rel_dist5_min_l	POW(sum_dist_min_l/minn5_min_l,1).
DEFINE rel_dist6_min_l	POW(sum_dist_min_l/minn6_min_l,1).
DEFINE rel_dist7_min_l	POW(sum_dist_min_l/minn7_min_l,1).
DEFINE rel_dist8_min_l	POW(sum_dist_min_l/minn8_min_l,1).
DEFINE rel_dist9_min_l	POW(sum_dist_min_l/minn9_min_l,1).
DEFINE rel_dist10_min_l	POW(sum_dist_min_l/minn10_min_l,1).


DEFINE sum_rel_dist_min_l		rel_dist1_min_l + rel_dist2_min_l + rel_dist3_min_l + rel_dist4_min_l + rel_dist5_min_l + 
								rel_dist6_min_l + rel_dist7_min_l + rel_dist8_min_l + rel_dist9_min_l + rel_dist10_min_l.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_min_l	rel_dist1_min_l/sum_rel_dist_min_l.
DEFINE wt2_min_l	rel_dist2_min_l/sum_rel_dist_min_l.
DEFINE wt3_min_l	rel_dist3_min_l/sum_rel_dist_min_l.
DEFINE wt4_min_l	rel_dist4_min_l/sum_rel_dist_min_l.
DEFINE wt5_min_l	rel_dist5_min_l/sum_rel_dist_min_l.
DEFINE wt6_min_l	rel_dist6_min_l/sum_rel_dist_min_l.
DEFINE wt7_min_l  	rel_dist7_min_l/sum_rel_dist_min_l.
DEFINE wt8_min_l	rel_dist8_min_l/sum_rel_dist_min_l.
DEFINE wt9_min_l  	rel_dist9_min_l/sum_rel_dist_min_l.
DEFINE wt10_min_l	rel_dist10_min_l/sum_rel_dist_min_l.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_min_l	ROUND(BD1_min_l*wt1_min_l + BD2_min_l*wt2_min_l + BD3_min_l*wt3_min_l + BD4_min_l*wt4_min_l + 
					BD5_min_l*wt5_min_l + BD6_min_l*wt6_min_l + BD7_min_l*wt7_min_l + BD8_min_l*wt8_min_l
					+ BD9_min_l*wt9_min_l + BD10_min_l*wt10_min_l,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Mineral BD %s" wt_BD_min_l.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s, %s, %s, %s" BD1_min_l, BD2_min_l, BD3_min_l, BD4_min_l, BD5_min_l, BD6_min_l, BD7_min_l, BD8_min_l.

# ORGANIC SOILS-------------------------------------------------------------
# Determines the 'distance' of each soil from the target soil.
DEFINE distance14		SQRT(POW(oc_h - c_tot,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_org_l		ARRAYMIN(distance14).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_org_l 	ARRAYPOSITION(distance14).
DEFINE pos1_org_l 	LOOKUP(minn1_org_l, distance14, pos_org_l).
DEFINE dist2_org_l	IF pos_org_l == pos1_org_l THEN distance14 + 1000 ELSE distance14.
DEFINE minn2_org_l	ARRAYMIN(dist2_org_l).
DEFINE pos2_org_l	LOOKUP(minn2_org_l, dist2_org_l, pos_org_l).
DEFINE dist3_org_l	IF pos_org_l == pos2_org_l THEN dist2_org_l + 1000 ELSE dist2_org_l.
DEFINE minn3_org_l	ARRAYMIN(dist3_org_l).
DEFINE pos3_org_l	LOOKUP(minn3_org_l, dist3_org_l, pos_org_l).
DEFINE dist4_org_l	IF pos_org_l == pos3_org_l THEN dist3_org_l + 1000 ELSE dist3_org_l.
DEFINE minn4_org_l	ARRAYMIN(dist4_org_l).
DEFINE pos4_org_l	LOOKUP(minn4_org_l, dist4_org_l, pos_org_l).
DEFINE dist5_org_l	IF pos_org_l == pos4_org_l THEN dist4_org_l + 1000 ELSE dist4_org_l.
DEFINE minn5_org_l	ARRAYMIN(dist5_org_l).
DEFINE pos5_org_l	LOOKUP(minn5_org_l, dist5_org_l, pos_org_l).
DEFINE dist6_org_l	IF pos_org_l == pos5_org_l THEN dist5_org_l + 1000 ELSE dist5_org_l.
DEFINE minn6_org_l	ARRAYMIN(dist6_org_l).
DEFINE pos6_org_l	LOOKUP(minn6_org_l, dist6_org_l, pos_org_l).
DEFINE dist7_org_l	IF pos_org_l == pos6_org_l THEN dist6_org_l + 1000 ELSE dist6_org_l.
DEFINE minn7_org_l	ARRAYMIN(dist7_org_l).
DEFINE pos7_org_l	LOOKUP(minn7_org_l, dist7_org_l, pos_org_l).
DEFINE dist8_org_l	IF pos_org_l == pos7_org_l THEN dist7_org_l + 1000 ELSE dist7_org_l.
DEFINE minn8_org_l	ARRAYMIN(dist8_org_l).
DEFINE pos8_org_l	LOOKUP(minn8_org_l, dist8_org_l, pos_org_l).
DEFINE dist9_org_l	IF pos_org_l == pos8_org_l THEN dist8_org_l + 1000 ELSE dist8_org_l.
DEFINE minn9_org_l	ARRAYMIN(dist9_org_l).
DEFINE pos9_org_l	LOOKUP(minn9_org_l, dist9_org_l, pos_org_l).
DEFINE dist10_org_l	IF pos_org_l == pos9_org_l THEN dist9_org_l + 1000 ELSE dist9_org_l.
DEFINE minn10_org_l	ARRAYMIN(dist10_org_l).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_org_l		LOOKUP(minn1_org_l, distance14, o_db_13b).
ASSIGN BD1_org_l		ARRAYMIN(BD1_org_l).
DEFINE BD2_org_l		LOOKUP(minn2_org_l, dist2_org_l, o_db_13b).
ASSIGN BD2_org_l		ARRAYMIN(BD2_org_l).
DEFINE BD3_org_l		LOOKUP(minn3_org_l, dist3_org_l, o_db_13b).
ASSIGN BD3_org_l		ARRAYMIN(BD3_org_l).
DEFINE BD4_org_l		LOOKUP(minn4_org_l, dist4_org_l, o_db_13b).
ASSIGN BD4_org_l		ARRAYMIN(BD4_org_l).
DEFINE BD5_org_l		LOOKUP(minn5_org_l, dist5_org_l, o_db_13b).
ASSIGN BD5_org_l		ARRAYMIN(BD5_org_l).
DEFINE BD6_org_l		LOOKUP(minn6_org_l, dist6_org_l, o_db_13b).
ASSIGN BD6_org_l		ARRAYMIN(BD6_org_l).
DEFINE BD7_org_l		LOOKUP(minn7_org_l, dist7_org_l, o_db_13b).
ASSIGN BD7_org_l		ARRAYMIN(BD7_org_l).
DEFINE BD8_org_l		LOOKUP(minn8_org_l, dist8_org_l, o_db_13b).
ASSIGN BD8_org_l		ARRAYMIN(BD8_org_l).
DEFINE BD9_org_l		LOOKUP(minn9_org_l, dist9_org_l, o_db_13b).
ASSIGN BD9_org_l		ARRAYMIN(BD9_org_l).
DEFINE BD10_org_l		LOOKUP(minn10_org_l, dist10_org_l, o_db_13b).
ASSIGN BD10_org_l		ARRAYMIN(BD10_org_l).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_org_l	IF minn1_org_l == 0 THEN 1 ELSE minn1_org_l.
ASSIGN minn2_org_l	IF minn2_org_l == 0 THEN 1 ELSE minn2_org_l.
ASSIGN minn3_org_l	IF minn3_org_l == 0 THEN 1 ELSE minn3_org_l.
ASSIGN minn4_org_l	IF minn4_org_l == 0 THEN 1 ELSE minn4_org_l.
ASSIGN minn5_org_l	IF minn5_org_l == 0 THEN 1 ELSE minn5_org_l.
ASSIGN minn6_org_l	IF minn6_org_l == 0 THEN 1 ELSE minn6_org_l.
ASSIGN minn7_org_l	IF minn7_org_l == 0 THEN 1 ELSE minn7_org_l.
ASSIGN minn8_org_l	IF minn8_org_l == 0 THEN 1 ELSE minn8_org_l.
ASSIGN minn9_org_l	IF minn9_org_l == 0 THEN 1 ELSE minn9_org_l.
ASSIGN minn10_org_l	IF minn10_org_l == 0 THEN 1 ELSE minn10_org_l.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_org_l		minn1_org_l + minn2_org_l + minn3_org_l + minn4_org_l + minn5_org_l + minn6_org_l + minn7_org_l + minn8_org_l + minn9_org_l + minn10_org_l.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship.
DEFINE rel_dist1_org_l	POW(sum_dist_org_l/minn1_org_l,1).
DEFINE rel_dist2_org_l	POW(sum_dist_org_l/minn2_org_l,1).
DEFINE rel_dist3_org_l	POW(sum_dist_org_l/minn3_org_l,1).
DEFINE rel_dist4_org_l	POW(sum_dist_org_l/minn4_org_l,1).
DEFINE rel_dist5_org_l	POW(sum_dist_org_l/minn5_org_l,1).
DEFINE rel_dist6_org_l	POW(sum_dist_org_l/minn6_org_l,1).
DEFINE rel_dist7_org_l	POW(sum_dist_org_l/minn7_org_l,1).
DEFINE rel_dist8_org_l	POW(sum_dist_org_l/minn8_org_l,1).
DEFINE rel_dist9_org_l	POW(sum_dist_org_l/minn9_org_l,1).
DEFINE rel_dist10_org_l	POW(sum_dist_org_l/minn10_org_l,1).

DEFINE sum_rel_dist_org_l		rel_dist1_org_l + rel_dist2_org_l + rel_dist3_org_l + rel_dist4_org_l + rel_dist5_org_l +
								rel_dist6_org_l + rel_dist7_org_l + rel_dist8_org_l + rel_dist9_org_l + rel_dist10_org_l.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_org_l	rel_dist1_org_l/sum_rel_dist_org_l.
DEFINE wt2_org_l	rel_dist2_org_l/sum_rel_dist_org_l.
DEFINE wt3_org_l	rel_dist3_org_l/sum_rel_dist_org_l.
DEFINE wt4_org_l	rel_dist4_org_l/sum_rel_dist_org_l.
DEFINE wt5_org_l	rel_dist5_org_l/sum_rel_dist_org_l.
DEFINE wt6_org_l	rel_dist6_org_l/sum_rel_dist_org_l.
DEFINE wt7_org_l	rel_dist7_org_l/sum_rel_dist_org_l.
DEFINE wt8_org_l	rel_dist8_org_l/sum_rel_dist_org_l.
DEFINE wt9_org_l	rel_dist9_org_l/sum_rel_dist_org_l.
DEFINE wt10_org_l	rel_dist10_org_l/sum_rel_dist_org_l.

# The weighted average bulk density of 5 nearest soils (to the target soil).
DEFINE wt_BD_org_l	ROUND(BD1_org_l*wt1_org_l + BD2_org_l*wt2_org_l + BD3_org_l*wt3_org_l + BD4_org_l*wt4_org_l + 
					BD5_org_l*wt5_org_l + BD6_org_l*wt6_org_l + BD7_org_l*wt7_org_l + BD8_org_l*wt8_org_l + BD9_org_l*wt9_org_l + 
					BD10_org_l*wt10_org_l,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Organic BD %s" wt_BD_org_l.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s" BD1_org_l, BD2_org_l, BD3_org_l, BD4_org_l, BD5_org_l.

# DENSE SOILS-------------------------------------------------------------

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_BD_min_sand_dns	((BD_min_sand)-ave_fsand)/std_fsand.
DEFINE temp_BD_min_silt_dns	((BD_min_silt)-ave_fsilt)/std_fsilt.
DEFINE temp_BD_min_clay_dns	((BD_min_clay)-ave_fclay)/std_fclay.
DEFINE temp_oc_h_dns		((oc_h)-ave_foc)/std_foc.

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_BD_min_sand_dns	temp_BD_min_sand_dns*ARRAYMAX(cat_ranges_dns)/range_fsand.
DEFINE trans_BD_min_silt_dns	temp_BD_min_silt_dns*ARRAYMAX(cat_ranges_dns)/range_fsilt.
DEFINE trans_BD_min_clay_dns	temp_BD_min_clay_dns*ARRAYMAX(cat_ranges_dns)/range_fclay.
DEFINE trans_oc_h_dns			temp_oc_h_dns*ARRAYMAX(cat_ranges_dns)/range_foc.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance15	SQRT(POW(trans_BD_min_sand_dns - trans_fsand,2)+POW(trans_BD_min_silt_dns - trans_fsilt,2)+
					POW(trans_BD_min_clay_dns - trans_fclay,2)+POW(trans_oc_h_dns - trans_foc,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_dns_l	ARRAYMIN(distance15).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_dns_l 	ARRAYPOSITION(distance15).
DEFINE pos1_dns_l 	LOOKUP(minn1_dns_l, distance15, pos_dns_l).
DEFINE dist2_dns_l	IF pos_dns_l == pos1_dns_l THEN distance15 + 1000 ELSE distance15.
DEFINE minn2_dns_l	ARRAYMIN(dist2_dns_l).
DEFINE pos2_dns_l	LOOKUP(minn2_dns_l, dist2_dns_l, pos_dns_l).
DEFINE dist3_dns_l	IF pos_dns_l == pos2_dns_l THEN dist2_dns_l + 1000 ELSE dist2_dns_l.
DEFINE minn3_dns_l	ARRAYMIN(dist3_dns_l).
DEFINE pos3_dns_l	LOOKUP(minn3_dns_l, dist3_dns_l, pos_dns_l).
DEFINE dist4_dns_l	IF pos_dns_l == pos3_dns_l THEN dist3_dns_l + 1000 ELSE dist3_dns_l.
DEFINE minn4_dns_l	ARRAYMIN(dist4_dns_l).
DEFINE pos4_dns_l	LOOKUP(minn4_dns_l, dist4_dns_l, pos_dns_l).
DEFINE dist5_dns_l	IF pos_dns_l == pos4_dns_l THEN dist4_dns_l + 1000 ELSE dist4_dns_l.
DEFINE minn5_dns_l	ARRAYMIN(dist5_dns_l).
DEFINE pos5_dns_l	LOOKUP(minn5_dns_l, dist5_dns_l, pos_dns_l).
DEFINE dist6_dns_l	IF pos_dns_l == pos5_dns_l THEN dist5_dns_l + 1000 ELSE dist5_dns_l.
DEFINE minn6_dns_l	ARRAYMIN(dist6_dns_l).
DEFINE pos6_dns_l	LOOKUP(minn6_dns_l, dist6_dns_l, pos_dns_l).
DEFINE dist7_dns_l	IF pos_dns_l == pos6_dns_l THEN dist6_dns_l + 1000 ELSE dist6_dns_l.
DEFINE minn7_dns_l	ARRAYMIN(dist7_dns_l).
DEFINE pos7_dns_l	LOOKUP(minn7_dns_l, dist7_dns_l, pos_dns_l).
DEFINE dist8_dns_l	IF pos_dns_l == pos7_dns_l THEN dist7_dns_l + 1000 ELSE dist7_dns_l.
DEFINE minn8_dns_l	ARRAYMIN(dist8_dns_l).
DEFINE pos8_dns_l	LOOKUP(minn8_dns_l, dist8_dns_l, pos_dns_l).
DEFINE dist9_dns_l	IF pos_dns_l == pos8_dns_l THEN dist8_dns_l + 1000 ELSE dist8_dns_l.
DEFINE minn9_dns_l	ARRAYMIN(dist9_dns_l).
DEFINE pos9_dns_l	LOOKUP(minn9_dns_l, dist9_dns_l, pos_dns_l).
DEFINE dist10_dns_l	IF pos_dns_l == pos9_dns_l THEN dist9_dns_l + 1000 ELSE dist9_dns_l.
DEFINE minn10_dns_l	ARRAYMIN(dist10_dns_l).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_dns_l		LOOKUP(minn1_dns_l, distance15, f_db_13b).
ASSIGN BD1_dns_l		ARRAYMIN(BD1_dns_l).
DEFINE BD2_dns_l		LOOKUP(minn2_dns_l, dist2_dns_l, f_db_13b).
ASSIGN BD2_dns_l		ARRAYMIN(BD2_dns_l).
DEFINE BD3_dns_l		LOOKUP(minn3_dns_l, dist3_dns_l, f_db_13b).
ASSIGN BD3_dns_l		ARRAYMIN(BD3_dns_l).
DEFINE BD4_dns_l		LOOKUP(minn4_dns_l, dist4_dns_l, f_db_13b).
ASSIGN BD4_dns_l		ARRAYMIN(BD4_dns_l).
DEFINE BD5_dns_l		LOOKUP(minn5_dns_l, dist5_dns_l, f_db_13b).
ASSIGN BD5_dns_l		ARRAYMIN(BD5_dns_l).
DEFINE BD6_dns_l		LOOKUP(minn6_dns_l, dist6_dns_l, f_db_13b).
ASSIGN BD6_dns_l		ARRAYMIN(BD6_dns_l).
DEFINE BD7_dns_l		LOOKUP(minn7_dns_l, dist7_dns_l, f_db_13b).
ASSIGN BD7_dns_l		ARRAYMIN(BD7_dns_l).
DEFINE BD8_dns_l		LOOKUP(minn8_dns_l, dist8_dns_l, f_db_13b).
ASSIGN BD8_dns_l		ARRAYMIN(BD8_dns_l).
DEFINE BD9_dns_l		LOOKUP(minn9_dns_l, dist9_dns_l, f_db_13b).
ASSIGN BD9_dns_l		ARRAYMIN(BD9_dns_l).
DEFINE BD10_dns_l		LOOKUP(minn10_dns_l, dist10_dns_l, f_db_13b).
ASSIGN BD10_dns_l		ARRAYMIN(BD10_dns_l).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_dns_l	IF minn1_dns_l == 0 THEN 1 ELSE minn1_dns_l.
ASSIGN minn2_dns_l	IF minn2_dns_l == 0 THEN 1 ELSE minn2_dns_l.
ASSIGN minn3_dns_l	IF minn3_dns_l == 0 THEN 1 ELSE minn3_dns_l.
ASSIGN minn4_dns_l	IF minn4_dns_l == 0 THEN 1 ELSE minn4_dns_l.
ASSIGN minn5_dns_l	IF minn5_dns_l == 0 THEN 1 ELSE minn5_dns_l.
ASSIGN minn6_dns_l	IF minn6_dns_l == 0 THEN 1 ELSE minn6_dns_l.
ASSIGN minn7_dns_l	IF minn7_dns_l == 0 THEN 1 ELSE minn7_dns_l.
ASSIGN minn8_dns_l	IF minn8_dns_l == 0 THEN 1 ELSE minn8_dns_l.
ASSIGN minn9_dns_l	IF minn9_dns_l == 0 THEN 1 ELSE minn9_dns_l.
ASSIGN minn10_dns_l	IF minn10_dns_l == 0 THEN 1 ELSE minn10_dns_l.


# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 8 nearest neighbors from the target.
DEFINE sum_dist_dns_l		minn1_dns_l + minn2_dns_l + minn3_dns_l + minn4_dns_l + minn5_dns_l + 
							minn6_dns_l + minn7_dns_l + minn8_dns_l + minn9_dns_l + minn10_dns_l.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_dns_l	POW(sum_dist_dns_l/minn1_dns_l,1).
DEFINE rel_dist2_dns_l	POW(sum_dist_dns_l/minn2_dns_l,1).
DEFINE rel_dist3_dns_l	POW(sum_dist_dns_l/minn3_dns_l,1).
DEFINE rel_dist4_dns_l	POW(sum_dist_dns_l/minn4_dns_l,1).
DEFINE rel_dist5_dns_l	POW(sum_dist_dns_l/minn5_dns_l,1).
DEFINE rel_dist6_dns_l	POW(sum_dist_dns_l/minn6_dns_l,1).
DEFINE rel_dist7_dns_l	POW(sum_dist_dns_l/minn7_dns_l,1).
DEFINE rel_dist8_dns_l	POW(sum_dist_dns_l/minn8_dns_l,1).
DEFINE rel_dist9_dns_l	POW(sum_dist_dns_l/minn9_dns_l,1).
DEFINE rel_dist10_dns_l	POW(sum_dist_dns_l/minn10_dns_l,1).

DEFINE sum_rel_dist_dns_l		rel_dist1_dns_l + rel_dist2_dns_l + rel_dist3_dns_l + rel_dist4_dns_l + 
								rel_dist5_dns_l + rel_dist6_dns_l + rel_dist7_dns_l + rel_dist8_dns_l +
								rel_dist9_dns_l + rel_dist10_dns_l.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_dns_l	rel_dist1_dns_l/sum_rel_dist_dns_l.
DEFINE wt2_dns_l	rel_dist2_dns_l/sum_rel_dist_dns_l.
DEFINE wt3_dns_l	rel_dist3_dns_l/sum_rel_dist_dns_l.
DEFINE wt4_dns_l	rel_dist4_dns_l/sum_rel_dist_dns_l.
DEFINE wt5_dns_l	rel_dist5_dns_l/sum_rel_dist_dns_l.
DEFINE wt6_dns_l	rel_dist6_dns_l/sum_rel_dist_dns_l.
DEFINE wt7_dns_l  	rel_dist7_dns_l/sum_rel_dist_dns_l.
DEFINE wt8_dns_l	rel_dist8_dns_l/sum_rel_dist_dns_l.
DEFINE wt9_dns_l  	rel_dist9_dns_l/sum_rel_dist_dns_l.
DEFINE wt10_dns_l	rel_dist10_dns_l/sum_rel_dist_dns_l.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_dns_l	ROUND(BD1_dns_l*wt1_dns_l + BD2_dns_l*wt2_dns_l + BD3_dns_l*wt3_dns_l + BD4_dns_l*wt4_dns_l + BD5_dns_l*wt5_dns_l + BD6_dns_l*wt6_dns_l + BD7_dns_l*wt7_dns_l + BD8_dns_l*wt8_dns_l + BD9_dns_l*wt9_dns_l + BD10_dns_l*wt10_dns_l,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Dense BD %s" wt_BD_dns_l.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s, %s, %s, %s" BD1_dns_l, BD2_dns_l, BD3_dns_l, BD4_dns_l, BD5_dns_l, BD6_dns_l, BD7_dns_l, BD8_dns_l.

# SANDY SOILS-------------------------------------------------------------

DEFINE sands	sandvc_r + sandco_r + sandmed_r + sandfine_r + sandvf_r.

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
# Gets the high sand distribution for total high sand based on the RV sand distribution.
DEFINE temp_sandvc_r_l		(((sandvc_r/sands)*BD_min_sand)-ave_sand_vc)/std_sand_vc.
DEFINE temp_sandco_r_l		(((sandco_r/sands)*BD_min_sand)-ave_sand_c)/std_sand_c.
DEFINE temp_sandmed_r_l		(((sandmed_r/sands)*BD_min_sand)-ave_sand_m)/std_sand_m.
DEFINE temp_sandfine_r_l	(((sandfine_r/sands)*BD_min_sand)-ave_sand_f)/std_sand_f.
DEFINE temp_sandvf_r_l		(((sandvf_r/sands)*BD_min_sand)-ave_sand_vf)/std_sand_vf.
DEFINE temp_BD_min_silt		((BD_min_silt)-ave_ssilt)/std_ssilt.
DEFINE temp_BD_min_clay		((BD_min_clay)-ave_sclay)/std_sclay.
DEFINE temp_oc_h			((oc_h)-ave_s_oc)/std_s_oc.

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_sandvc_r_l		temp_sandvc_r_l*ARRAYMAX(cat_ranges)/range_sand_vc.
DEFINE trans_sandco_r_l		temp_sandco_r_l*ARRAYMAX(cat_ranges)/range_sand_c.
DEFINE trans_sandmed_r_l	temp_sandmed_r_l*ARRAYMAX(cat_ranges)/range_sand_m.
DEFINE trans_sandfine_r_l	temp_sandfine_r_l*ARRAYMAX(cat_ranges)/range_sand_f.
DEFINE trans_sandvf_r_l		temp_sandvf_r_l*ARRAYMAX(cat_ranges)/range_sand_vf.
DEFINE trans_BD_min_silt	temp_BD_min_silt*ARRAYMAX(cat_ranges)/range_ssilt.
DEFINE trans_BD_min_clay	temp_BD_min_clay*ARRAYMAX(cat_ranges)/range_sclay.
DEFINE trans_oc_h			temp_oc_h*ARRAYMAX(cat_ranges)/range_s_oc.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance16	SQRT(POW(trans_sandvc_r_l - trans_sand_vc,2)+POW(trans_sandco_r_l - trans_sand_c,2)+
					POW(trans_sandmed_r_l - trans_sand_m,2)+POW(trans_sandfine_r_l - trans_sand_f,2)+
					POW(trans_sandvf_r_l - trans_sand_vf,2)+POW(trans_BD_min_silt - trans_ssilt,2)+
					POW(trans_BD_min_clay - trans_sclay,2)+POW(trans_oc_h - trans_s_oc,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_l		ARRAYMIN(distance16).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_l 		ARRAYPOSITION(distance16).
DEFINE pos1_l 		LOOKUP(minn1_l, distance16, pos_l).
DEFINE dist2_l		IF pos_l == pos1_l THEN distance16 + 1000 ELSE distance16.
DEFINE minn2_l		ARRAYMIN(dist2_l).
DEFINE pos2_l		LOOKUP(minn2_l, dist2_l, pos_l).
DEFINE dist3_l		IF pos_l == pos2_l THEN dist2_l + 1000 ELSE dist2_l.
DEFINE minn3_l		ARRAYMIN(dist3_l).
DEFINE pos3_l		LOOKUP(minn3, dist3, pos).
DEFINE dist4_l		IF pos_l == pos3_l THEN dist3_l + 1000 ELSE dist3_l.
DEFINE minn4_l		ARRAYMIN(dist4_l).
DEFINE pos4_l		LOOKUP(minn4_l, dist4_l, pos_l).
DEFINE dist5_l		IF pos_l == pos4_l THEN dist4_l + 1000 ELSE dist4_l.
DEFINE minn5_l		ARRAYMIN(dist5_l).
DEFINE pos5_l		LOOKUP(minn5_l, dist5_l, pos_l).
DEFINE dist6_l		IF pos_l == pos5_l THEN dist5_l + 1000 ELSE dist5_l.
DEFINE minn6_l		ARRAYMIN(dist6_l).
DEFINE pos6_l		LOOKUP(minn6_l, dist6_l, pos_l).
DEFINE dist7_l		IF pos_l == pos6_l THEN dist6_l + 1000 ELSE dist6_l.
DEFINE minn7_l		ARRAYMIN(dist7_l).
DEFINE pos7_l		LOOKUP(minn7_l, dist7_l, pos_l).
DEFINE dist8_l		IF pos_l == pos7_l THEN dist7_l + 1000 ELSE dist7_l.
DEFINE minn8_l		ARRAYMIN(dist8_l).
DEFINE pos8_l		LOOKUP(minn8_l, dist8_l, pos_l).
DEFINE dist9_l		IF pos_l == pos8_l THEN dist8_l + 1000 ELSE dist8_l.
DEFINE minn9_l		ARRAYMIN(dist9_l).
DEFINE pos9_l		LOOKUP(minn9_l, dist9_l, pos_l).
DEFINE dist10_l		IF pos_l == pos9_l THEN dist9_l + 1000 ELSE dist9_l.
DEFINE minn10_l		ARRAYMIN(dist10_l).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_l		LOOKUP(minn1_l, distance16, s_db_13b).
ASSIGN BD1_l		ARRAYMIN(BD1_l).
DEFINE BD2_l		LOOKUP(minn2_l, dist2_l, s_db_13b).
ASSIGN BD2_l		ARRAYMIN(BD2_l).
DEFINE BD3_l		LOOKUP(minn3_l, dist3_l, s_db_13b).
ASSIGN BD3_l		ARRAYMIN(BD3_l).
DEFINE BD4_l		LOOKUP(minn4_l, dist4_l, s_db_13b).
ASSIGN BD4_l		ARRAYMIN(BD4_l).
DEFINE BD5_l		LOOKUP(minn5_l, dist5_l, s_db_13b).
ASSIGN BD5_l		ARRAYMIN(BD5_l).
DEFINE BD6_l		LOOKUP(minn6_l, dist6_l, s_db_13b).
ASSIGN BD6_l		ARRAYMIN(BD6_l).
DEFINE BD7_l		LOOKUP(minn7_l, dist7_l, s_db_13b).
ASSIGN BD7_l		ARRAYMIN(BD7_l).
DEFINE BD8_l		LOOKUP(minn8_l, dist8_l, s_db_13b).
ASSIGN BD8_l		ARRAYMIN(BD8_l).
DEFINE BD9_l		LOOKUP(minn9_l, dist9_l, s_db_13b).
ASSIGN BD9_l		ARRAYMIN(BD9_l).
DEFINE BD10_l		LOOKUP(minn10_l, dist10_l, s_db_13b).
ASSIGN BD10_l		ARRAYMIN(BD10_l).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_l	IF minn1_l == 0 THEN 1 ELSE minn1_l.
ASSIGN minn2_l	IF minn2_l == 0 THEN 1 ELSE minn2_l.
ASSIGN minn3_l	IF minn3_l == 0 THEN 1 ELSE minn3_l.
ASSIGN minn4_l	IF minn4_l == 0 THEN 1 ELSE minn4_l.
ASSIGN minn5_l	IF minn5_l == 0 THEN 1 ELSE minn5_l.
ASSIGN minn6_l	IF minn6_l == 0 THEN 1 ELSE minn6_l.
ASSIGN minn7_l	IF minn7_l == 0 THEN 1 ELSE minn7_l.
ASSIGN minn8_l	IF minn8_l == 0 THEN 1 ELSE minn8_l.
ASSIGN minn9_l	IF minn9_l == 0 THEN 1 ELSE minn9_l.
ASSIGN minn10_l	IF minn10_l == 0 THEN 1 ELSE minn10_l.


# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_l		minn1_l + minn2_l + minn3_l + minn4_l + minn5_l + minn6_l + minn7_l + minn8_l + minn9_l + minn10_l.

# Calculates the relative distance of each of the 810 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_l	POW(sum_dist_l/minn1_l,1).
DEFINE rel_dist2_l	POW(sum_dist_l/minn2_l,1).
DEFINE rel_dist3_l	POW(sum_dist_l/minn3_l,1).
DEFINE rel_dist4_l	POW(sum_dist_l/minn4_l,1).
DEFINE rel_dist5_l	POW(sum_dist_l/minn5_l,1).
DEFINE rel_dist6_l	POW(sum_dist_l/minn6_l,1).
DEFINE rel_dist7_l	POW(sum_dist_l/minn7_l,1).
DEFINE rel_dist8_l	POW(sum_dist_l/minn8_l,1).
DEFINE rel_dist9_l	POW(sum_dist_l/minn9_l,1).
DEFINE rel_dist10_l	POW(sum_dist_l/minn10_l,1).

DEFINE sum_rel_dist_l		rel_dist1_l + rel_dist2_l + rel_dist3_l + rel_dist4_l + rel_dist5_l + rel_dist6_l + rel_dist7_l + rel_dist8_l + rel_dist9_l + rel_dist10_l.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_l	rel_dist1_l/sum_rel_dist_l.
DEFINE wt2_l	rel_dist2_l/sum_rel_dist_l.
DEFINE wt3_l	rel_dist3_l/sum_rel_dist_l.
DEFINE wt4_l	rel_dist4_l/sum_rel_dist_l.
DEFINE wt5_l	rel_dist5_l/sum_rel_dist_l.
DEFINE wt6_l	rel_dist6_l/sum_rel_dist_l.
DEFINE wt7_l  	rel_dist7_l/sum_rel_dist_l.
DEFINE wt8_l	rel_dist8_l/sum_rel_dist_l.
DEFINE wt9_l  	rel_dist9_l/sum_rel_dist_l.
DEFINE wt10_l	rel_dist10_l/sum_rel_dist_l.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_l	ROUND(BD1_l*wt1_l + BD2_l*wt2_l + BD3_l*wt3_l + BD4_l*wt4_l + BD5_l*wt5_l + BD6_l*wt6_l + BD7_l*wt7_l + BD8_l*wt8_l + BD9_l*wt9_l + BD10_l*wt10_l,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Sandy BD %s" wt_BD_l.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s, %s, %s, %s, %s, %s" BD1_l, BD2_l, BD3_l, BD4_l, BD5_l, BD6_l, BD7_l, BD8_l, BD9_l, BD10_l.

# 8-20% ORGANIC CARBON SOILS LOW VALUES-------------------------------------------------------------
# Read the table of bulk densities and other properties of soils that have 8 to 20% organic carbon.

# Determines the 'distance' of each soil from the target soil.
DEFINE distance31		SQRT(POW(oc_h - carbon8_20,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_8_20_l		ARRAYMIN(distance31).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_8_20_l 		ARRAYPOSITION(distance31).
DEFINE pos1_8_20_l 		LOOKUP(minn1_8_20_l, distance31, pos_8_20_l).
DEFINE dist2_8_20_l		IF pos_8_20_l == pos1_8_20_l THEN distance31 + 1000 ELSE distance31.
DEFINE minn2_8_20_l		ARRAYMIN(dist2_8_20_l).
DEFINE pos2_8_20_l		LOOKUP(minn2_8_20_l, dist2_8_20_l, pos_8_20_l).
DEFINE dist3_8_20_l		IF pos_8_20_l == pos2_8_20_l THEN dist2_8_20_l + 1000 ELSE dist2_8_20_l.
DEFINE minn3_8_20_l		ARRAYMIN(dist3_8_20_l).
DEFINE pos3_8_20_l		LOOKUP(minn3_8_20_l, dist3_8_20_l, pos_8_20_l).
DEFINE dist4_8_20_l		IF pos_8_20_l == pos3_8_20_l THEN dist3_8_20_l + 1000 ELSE dist3_8_20_l.
DEFINE minn4_8_20_l		ARRAYMIN(dist4_8_20_l).
DEFINE pos4_8_20_l		LOOKUP(minn4_8_20_l, dist4_8_20_l, pos_8_20_l).
DEFINE dist5_8_20_l		IF pos_8_20_l == pos4_8_20_l THEN dist4_8_20_l + 1000 ELSE dist4_8_20_l.
DEFINE minn5_8_20_l		ARRAYMIN(dist5_8_20_l).
DEFINE pos5_8_20_l		LOOKUP(minn5_8_20_l, dist5_8_20_l, pos_8_20_l).
DEFINE dist6_8_20_l		IF pos_8_20_l == pos5_8_20_l THEN dist5_8_20_l + 1000 ELSE dist5_8_20_l.
DEFINE minn6_8_20_l		ARRAYMIN(dist6_8_20_l).
DEFINE pos6_8_20_l		LOOKUP(minn6_8_20_l, dist6_8_20_l, pos_8_20_l).
DEFINE dist7_8_20_l		IF pos_8_20_l == pos6_8_20_l THEN dist6_8_20_l + 1000 ELSE dist6_8_20_l.
DEFINE minn7_8_20_l		ARRAYMIN(dist7_8_20_l).
DEFINE pos7_8_20_l		LOOKUP(minn7_8_20_l, dist7_8_20_l, pos_8_20_l).
DEFINE dist8_8_20_l		IF pos_8_20_l == pos7_8_20_l THEN dist7_8_20_l + 1000 ELSE dist7_8_20_l.
DEFINE minn8_8_20_l		ARRAYMIN(dist8_8_20_l).
DEFINE pos8_8_20_l		LOOKUP(minn8_8_20_l, dist8_8_20_l, pos_8_20_l).
DEFINE dist9_8_20_l		IF pos_8_20_l == pos8_8_20_l THEN dist8_8_20_l + 1000 ELSE dist8_8_20_l.
DEFINE minn9_8_20_l		ARRAYMIN(dist9_8_20_l).
DEFINE pos9_8_20_l		LOOKUP(minn9_8_20_l, dist9_8_20_l, pos_8_20_l).
DEFINE dist10_8_20_l		IF pos_8_20_l == pos9_8_20_l THEN dist9_8_20_l + 1000 ELSE dist9_8_20_l.
DEFINE minn10_8_20_l		ARRAYMIN(dist10_8_20_l).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_8_20_l		LOOKUP(minn1_8_20_l, distance31, db_13b8_20).
ASSIGN BD1_8_20_l		ARRAYMIN(BD1_8_20_l).
DEFINE BD2_8_20_l		LOOKUP(minn2_8_20_l, dist2_8_20_l, db_13b8_20).
ASSIGN BD2_8_20_l		ARRAYMIN(BD2_8_20_l).
DEFINE BD3_8_20_l		LOOKUP(minn3_8_20_l, dist3_8_20_l, db_13b8_20).
ASSIGN BD3_8_20_l		ARRAYMIN(BD3_8_20_l).
DEFINE BD4_8_20_l		LOOKUP(minn4_8_20_l, dist4_8_20_l, db_13b8_20).
ASSIGN BD4_8_20_l		ARRAYMIN(BD4_8_20_l).
DEFINE BD5_8_20_l		LOOKUP(minn5_8_20_l, dist5_8_20_l, db_13b8_20).
ASSIGN BD5_8_20_l		ARRAYMIN(BD5_8_20_l).
DEFINE BD6_8_20_l		LOOKUP(minn6_8_20_l, dist6_8_20_l, db_13b8_20).
ASSIGN BD6_8_20_l		ARRAYMIN(BD6_8_20_l).
DEFINE BD7_8_20_l		LOOKUP(minn7_8_20_l, dist7_8_20_l, db_13b8_20).
ASSIGN BD7_8_20_l		ARRAYMIN(BD7_8_20_l).
DEFINE BD8_8_20_l		LOOKUP(minn8_8_20_l, dist8_8_20_l, db_13b8_20).
ASSIGN BD8_8_20_l		ARRAYMIN(BD8_8_20_l).
DEFINE BD9_8_20_l		LOOKUP(minn9_8_20_l, dist9_8_20_l, db_13b8_20).
ASSIGN BD9_8_20_l		ARRAYMIN(BD9_8_20_l).
DEFINE BD10_8_20_l		LOOKUP(minn10_8_20_l, dist10_8_20_l, db_13b8_20).
ASSIGN BD10_8_20_l		ARRAYMIN(BD10_8_20_l).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_8_20_l		IF minn1_8_20_l == 0 THEN 1 ELSE minn1_8_20_l.
ASSIGN minn2_8_20_l		IF minn2_8_20_l == 0 THEN 1 ELSE minn2_8_20_l.
ASSIGN minn3_8_20_l		IF minn3_8_20_l == 0 THEN 1 ELSE minn3_8_20_l.
ASSIGN minn4_8_20_l		IF minn4_8_20_l == 0 THEN 1 ELSE minn4_8_20_l.
ASSIGN minn5_8_20_l		IF minn5_8_20_l == 0 THEN 1 ELSE minn5_8_20_l.
ASSIGN minn6_8_20_l		IF minn6_8_20_l == 0 THEN 1 ELSE minn6_8_20_l.
ASSIGN minn7_8_20_l		IF minn7_8_20_l == 0 THEN 1 ELSE minn7_8_20_l.
ASSIGN minn8_8_20_l		IF minn8_8_20_l == 0 THEN 1 ELSE minn8_8_20_l.
ASSIGN minn9_8_20_l		IF minn9_8_20_l == 0 THEN 1 ELSE minn9_8_20_l.
ASSIGN minn10_8_20_l	IF minn10_8_20_l == 0 THEN 1 ELSE minn10_8_20_l.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 8 nearest neighbors from the target.
DEFINE sum_dist_8_20_l		minn1_8_20_l + minn2_8_20_l + minn3_8_20_l + minn4_8_20_l + minn5_8_20_l +
							minn6_8_20_l + minn7_8_20_l + minn8_8_20_l + minn9_8_20_l + minn10_8_20_l.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_8_20_l		POW(sum_dist_8_20_l/minn1_8_20_l,1).
DEFINE rel_dist2_8_20_l		POW(sum_dist_8_20_l/minn2_8_20_l,1).
DEFINE rel_dist3_8_20_l		POW(sum_dist_8_20_l/minn3_8_20_l,1).
DEFINE rel_dist4_8_20_l		POW(sum_dist_8_20_l/minn4_8_20_l,1).
DEFINE rel_dist5_8_20_l		POW(sum_dist_8_20_l/minn5_8_20_l,1).
DEFINE rel_dist6_8_20_l		POW(sum_dist_8_20_l/minn6_8_20_l,1).
DEFINE rel_dist7_8_20_l		POW(sum_dist_8_20_l/minn7_8_20_l,1).
DEFINE rel_dist8_8_20_l		POW(sum_dist_8_20_l/minn8_8_20_l,1).
DEFINE rel_dist9_8_20_l		POW(sum_dist_8_20_l/minn9_8_20_l,1).
DEFINE rel_dist10_8_20_l		POW(sum_dist_8_20_l/minn10_8_20_l,1).

DEFINE sum_rel_dist_8_20_l		rel_dist1_8_20_l + rel_dist2_8_20_l + rel_dist3_8_20_l + rel_dist4_8_20_l + rel_dist5_8_20_l +
								rel_dist6_8_20_l + rel_dist7_8_20_l + rel_dist8_8_20_l + rel_dist9_8_20_l + rel_dist10_8_20_l.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_8_20_l		rel_dist1_8_20_l/sum_rel_dist_8_20_l.
DEFINE wt2_8_20_l		rel_dist2_8_20_l/sum_rel_dist_8_20_l.
DEFINE wt3_8_20_l		rel_dist3_8_20_l/sum_rel_dist_8_20_l.
DEFINE wt4_8_20_l		rel_dist4_8_20_l/sum_rel_dist_8_20_l.
DEFINE wt5_8_20_l		rel_dist5_8_20_l/sum_rel_dist_8_20_l.
DEFINE wt6_8_20_l		rel_dist6_8_20_l/sum_rel_dist_8_20_l.
DEFINE wt7_8_20_l		rel_dist7_8_20_l/sum_rel_dist_8_20_l.
DEFINE wt8_8_20_l		rel_dist8_8_20_l/sum_rel_dist_8_20_l.
DEFINE wt9_8_20_l		rel_dist9_8_20_l/sum_rel_dist_8_20_l.
DEFINE wt10_8_20_l		rel_dist10_8_20_l/sum_rel_dist_8_20_l.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_8_20_l	ROUND(BD1_8_20_l*wt1_8_20_l + BD2_8_20_l*wt2_8_20_l + BD3_8_20_l*wt3_8_20_l + BD4_8_20_l*wt4_8_20_l + BD5_8_20_l*wt5_8_20_l +
					BD6_8_20_l*wt6_8_20_l + BD7_8_20_l*wt7_8_20_l + BD8_8_20_l*wt8_8_20_l + BD9_8_20_l*wt9_8_20_l + BD10_8_20_l*wt10_8_20_l,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Organic BD %s" wt_BD_8_20_l.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s" BD1_8_20_l, BD2_8_20_l, BD3_8_20_l, BD4_8_20_l, BD5_8_20_l.

#------------------------------------

DEFINE bulk_density_l	IF oc_l > 20 and not isnull(oc_l) THEN wt_BD_org_l

						ELSE IF texture matches "*MEDL*" or texture matches "*HYDR*" or texture matches "*ASHY*" THEN wt_BD_andic_l

						ELSE IF ((hzname matches "*x*" or (resdept_r == hzdept_r and reskind1 == "fragipan") or 
							(subgrp matches "fragic*" and ksat_r < 1.41)) or
 
							((resdept_r == hzdept_r and (reskind1 == "densic material" or reskind1 == "bedrock, densic")) or
							(hzname matches "*d*" and not hzname matches "*di*")) or

							((resdept_r == hzdept_r and (reskind1 == "cemented horizon" or reskind1 == "duripan" or
							reskind1 == "ortstein" or reskind1 == "petrocalcic" or reskind1 == "petroferric" or 
							reskind1 == "petrogypsic")) or (hzname matches "*m*" and not hzname matches "*ma*")) or

							(hzname matches "*r*" or (resdept_r == hzdept_r and reskind1 == "bedrock, paralithic")) or
 
							hzname matches "*hs*" or hzname matches "*o*" or
							(hzname matches "*s*" and not hzname matches "*ss*" and not hzname matches "*se*") or hzname matches "*h*" or 
							(hzname matches "*v*" or (resdept_r == hzdept_r and reskind1 == "plinthite")) or 
							hzname matches "*q*") 

							AND (gypsum_r <= 5 or isnull(gypsum_r)) THEN wt_BD_dns_l
						
						ELSE IF (oc_l > 8 or oc_r > 20) and not isnull(oc_l) THEN wt_BD_8_20_l

						ELSE IF gypsum_l > 5 and not isnull(gypsum_l) THEN wt_BD_gypsum_l

						ELSE IF sandtotal_l >= 70 and not isnull(sandtotal_l) THEN wt_BD_l
 
						ELSE wt_BD_min_l.

#------------------------------------------
# BULK DENSITY HIGH VALUES-----------------
#------------------------------------------

#-------------------------------------------------
# ANDIC PROPERTIES HIGH VALUES---------------------

# Determines the 'distance' of each soil from the target soil.
DEFINE distance17		SQRT(POW(oc_l - carbon,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_and_h		ARRAYMIN(distance17).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_and_h 	ARRAYPOSITION(distance17).
DEFINE pos1_and_h 	LOOKUP(minn1_and_h, distance17, pos_and_h).
DEFINE dist2_and_h	IF pos_and_h == pos1_and_h THEN distance17 + 1000 ELSE distance17.
DEFINE minn2_and_h	ARRAYMIN(dist2_and_h).
DEFINE pos2_and_h	LOOKUP(minn2_and_h, dist2_and_h, pos_and_h).
DEFINE dist3_and_h	IF pos_and_h == pos2_and_h THEN dist2_and_h + 1000 ELSE dist2_and_h.
DEFINE minn3_and_h	ARRAYMIN(dist3_and_h).
DEFINE pos3_and_h	LOOKUP(minn3_and_h, dist3_and_h, pos_and_h).
DEFINE dist4_and_h	IF pos_and_h == pos3_and_h THEN dist3_and_h + 1000 ELSE dist3_and_h.
DEFINE minn4_and_h	ARRAYMIN(dist4_and_h).
DEFINE pos4_and_h	LOOKUP(minn4_and_h, dist4_and_h, pos_and_h).
DEFINE dist5_and_h	IF pos_and_h == pos4_and_h THEN dist4_and_h + 1000 ELSE dist4_and_h.
DEFINE minn5_and_h	ARRAYMIN(dist5_and_h).
DEFINE pos5_and_h	LOOKUP(minn5_and_h, dist5_and_h, pos_and_h).
DEFINE dist6_and_h	IF pos_and_h == pos5_and_h THEN dist5_and_h + 1000 ELSE dist5_and_h.
DEFINE minn6_and_h	ARRAYMIN(dist6_and_h).
DEFINE pos6_and_h	LOOKUP(minn6_and_h, dist6_and_h, pos_and_h).
DEFINE dist7_and_h	IF pos_and_h == pos6_and_h THEN dist6_and_h + 1000 ELSE dist6_and_h.
DEFINE minn7_and_h	ARRAYMIN(dist7_and_h).
DEFINE pos7_and_h	LOOKUP(minn7_and_h, dist7_and_h, pos_and_h).
DEFINE dist8_and_h	IF pos_and_h == pos7_and_h THEN dist7_and_h + 1000 ELSE dist7_and_h.
DEFINE minn8_and_h	ARRAYMIN(dist8_and_h).
DEFINE pos8_and_h	LOOKUP(minn8_and_h, dist8_and_h, pos_and_h).
DEFINE dist9_and_h	IF pos_and_h == pos8_and_h THEN dist8_and_h + 1000 ELSE dist8_and_h.
DEFINE minn9_and_h	ARRAYMIN(dist9_and_h).
DEFINE pos9_and_h	LOOKUP(minn9_and_h, dist9_and_h, pos_and_h).
DEFINE dist10_and_h	IF pos_and_h == pos9_and_h THEN dist9_and_h + 1000 ELSE dist9_and_h.
DEFINE minn10_and_h	ARRAYMIN(dist10_and_h).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_and_h		LOOKUP(minn1_and_h, distance17, db_13b).
ASSIGN BD1_and_h		ARRAYMIN(BD1_and_h).
DEFINE BD2_and_h		LOOKUP(minn2_and_h, dist2_and_h, db_13b).
ASSIGN BD2_and_h		ARRAYMIN(BD2_and_h).
DEFINE BD3_and_h		LOOKUP(minn3_and_h, dist3_and_h, db_13b).
ASSIGN BD3_and_h		ARRAYMIN(BD3_and_h).
DEFINE BD4_and_h		LOOKUP(minn4_and_h, dist4_and_h, db_13b).
ASSIGN BD4_and_h		ARRAYMIN(BD4_and_h).
DEFINE BD5_and_h		LOOKUP(minn5_and_h, dist5_and_h, db_13b).
ASSIGN BD5_and_h		ARRAYMIN(BD5_and_h).
DEFINE BD6_and_h		LOOKUP(minn6_and_h, dist6_and_h, db_13b).
ASSIGN BD6_and_h		ARRAYMIN(BD6_and_h).
DEFINE BD7_and_h		LOOKUP(minn7_and_h, dist7_and_h, db_13b).
ASSIGN BD7_and_h		ARRAYMIN(BD7_and_h).
DEFINE BD8_and_h		LOOKUP(minn8_and_h, dist8_and_h, db_13b).
ASSIGN BD8_and_h		ARRAYMIN(BD8_and_h).
DEFINE BD9_and_h		LOOKUP(minn9_and_h, dist9_and_h, db_13b).
ASSIGN BD9_and_h		ARRAYMIN(BD9_and_h).
DEFINE BD10_and_h		LOOKUP(minn10_and_h, dist10_and_h, db_13b).
ASSIGN BD10_and_h		ARRAYMIN(BD10_and_h).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_and_h	IF minn1_and_h == 0 THEN 1 ELSE minn1_and_h.
ASSIGN minn2_and_h	IF minn2_and_h == 0 THEN 1 ELSE minn2_and_h.
ASSIGN minn3_and_h	IF minn3_and_h == 0 THEN 1 ELSE minn3_and_h.
ASSIGN minn4_and_h	IF minn4_and_h == 0 THEN 1 ELSE minn4_and_h.
ASSIGN minn5_and_h	IF minn5_and_h == 0 THEN 1 ELSE minn5_and_h.
ASSIGN minn6_and_h	IF minn6_and_h == 0 THEN 1 ELSE minn6_and_h.
ASSIGN minn7_and_h	IF minn7_and_h == 0 THEN 1 ELSE minn7_and_h.
ASSIGN minn8_and_h	IF minn8_and_h == 0 THEN 1 ELSE minn8_and_h.
ASSIGN minn9_and_h	IF minn9_and_h == 0 THEN 1 ELSE minn9_and_h.
ASSIGN minn10_and_h	IF minn10_and_h == 0 THEN 1 ELSE minn10_and_h.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 8 nearest neighbors from the target.
DEFINE sum_dist_and_h		minn1_and_h + minn2_and_h + minn3_and_h + minn4_and_h + minn5_and_h +
							minn6_and_h + minn7_and_h + minn8_and_h + minn9_and_h + minn10_and_h.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_and_h	POW(sum_dist_and_h/minn1_and_h,1).
DEFINE rel_dist2_and_h	POW(sum_dist_and_h/minn2_and_h,1).
DEFINE rel_dist3_and_h	POW(sum_dist_and_h/minn3_and_h,1).
DEFINE rel_dist4_and_h	POW(sum_dist_and_h/minn4_and_h,1).
DEFINE rel_dist5_and_h	POW(sum_dist_and_h/minn5_and_h,1).
DEFINE rel_dist6_and_h	POW(sum_dist_and_h/minn6_and_h,1).
DEFINE rel_dist7_and_h	POW(sum_dist_and_h/minn7_and_h,1).
DEFINE rel_dist8_and_h	POW(sum_dist_and_h/minn8_and_h,1).
DEFINE rel_dist9_and_h	POW(sum_dist_and_h/minn9_and_h,1).
DEFINE rel_dist10_and_h	POW(sum_dist_and_h/minn10_and_h,1).


DEFINE sum_rel_dist_and_h		rel_dist1_and_h + rel_dist2_and_h + rel_dist3_and_h + rel_dist4_and_h + rel_dist5_and_h +
								rel_dist6_and_h + rel_dist7_and_h + rel_dist8_and_h + rel_dist9_and_h + rel_dist10_and_h.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_and_h	rel_dist1_and_h/sum_rel_dist_and_h.
DEFINE wt2_and_h	rel_dist2_and_h/sum_rel_dist_and_h.
DEFINE wt3_and_h	rel_dist3_and_h/sum_rel_dist_and_h.
DEFINE wt4_and_h	rel_dist4_and_h/sum_rel_dist_and_h.
DEFINE wt5_and_h	rel_dist5_and_h/sum_rel_dist_and_h.
DEFINE wt6_and_h	rel_dist6_and_h/sum_rel_dist_and_h.
DEFINE wt7_and_h	rel_dist7_and_h/sum_rel_dist_and_h.
DEFINE wt8_and_h	rel_dist8_and_h/sum_rel_dist_and_h.
DEFINE wt9_and_h	rel_dist9_and_h/sum_rel_dist_and_h.
DEFINE wt10_and_h	rel_dist10_and_h/sum_rel_dist_and_h.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_and_h	ROUND(BD1_and_h*wt1_and_h + BD2_and_h*wt2_and_h + BD3_and_h*wt3_and_h + BD4_and_h*wt4_and_h + 
					BD5_and_h*wt5_and_h + BD6_and_h*wt6_and_h + BD7_and_h*wt7_and_h + BD8_and_h*wt8_and_h + BD9_and_h*wt9_and_h + 
					BD10_and_h*wt10_and_h,2).			

#-------------

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_BD_max_sand_and_h	((BD_max_sand)-ave_sand)/std_sand.
DEFINE temp_BD_max_silt_and_h	((BD_max_silt)-ave_silt)/std_silt.
DEFINE temp_BD_max_clay_and_h	((BD_max_clay)-ave_clay)/std_clay.
DEFINE temp_oc_l_and_h			((oc_l)-ave_carbon)/std_carbon.

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_BD_max_sand_and_h	temp_BD_max_sand_and_h*ARRAYMAX(cat_ranges_and)/range_sand.
DEFINE trans_BD_max_silt_and_h	temp_BD_max_silt_and_h*ARRAYMAX(cat_ranges_and)/range_silt.
DEFINE trans_BD_max_clay_and_h	temp_BD_max_clay_and_h*ARRAYMAX(cat_ranges_and)/range_clay.
DEFINE trans_oc_l_and_h			temp_oc_l_and_h*ARRAYMAX(cat_ranges_and)/range_carbon.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance18	SQRT(POW(trans_BD_max_sand_and_h - trans_sand,2)+POW(trans_BD_max_silt_and_h - trans_silt,2)+
					POW(trans_BD_max_clay_and_h - trans_clay,2)+POW(trans_oc_l_and_h - trans_carbon,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_and2_h	ARRAYMIN(distance18).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_and2_h 	ARRAYPOSITION(distance18).
DEFINE pos1_and2_h 	LOOKUP(minn1_and2_h, distance18, pos_and2_h).
DEFINE dist2_and2_h	IF pos_and2_h == pos1_and2_h THEN distance18 + 1000 ELSE distance18.
DEFINE minn2_and2_h	ARRAYMIN(dist2_and2_h).
DEFINE pos2_and2_h	LOOKUP(minn2_and2_h, dist2_and2_h, pos_and2_h).
DEFINE dist3_and2_h	IF pos_and2_h == pos2_and2_h THEN dist2_and2_h + 1000 ELSE dist2_and2_h.
DEFINE minn3_and2_h	ARRAYMIN(dist3_and2_h).
DEFINE pos3_and2_h	LOOKUP(minn3_and2_h, dist3_and2_h, pos_and2_h).
DEFINE dist4_and2_h	IF pos_and2_h == pos3_and2_h THEN dist3_and2_h + 1000 ELSE dist3_and2_h.
DEFINE minn4_and2_h	ARRAYMIN(dist4_and2_h).
DEFINE pos4_and2_h	LOOKUP(minn4_and2_h, dist4_and2_h, pos_and2_h).
DEFINE dist5_and2_h	IF pos_and2_h == pos4_and2_h THEN dist4_and2_h + 1000 ELSE dist4_and2_h.
DEFINE minn5_and2_h	ARRAYMIN(dist5_and2_h).
DEFINE pos5_and2_h	LOOKUP(minn5_and2_h, dist5_and2_h, pos_and2_h).
DEFINE dist6_and2_h	IF pos_and2_h == pos5_and2_h THEN dist5_and2_h + 1000 ELSE dist5_and2_h.
DEFINE minn6_and2_h	ARRAYMIN(dist6_and2_h).
DEFINE pos6_and2_h	LOOKUP(minn6_and2_h, dist6_and2_h, pos_and2_h).
DEFINE dist7_and2_h	IF pos_and2_h == pos6_and2_h THEN dist6_and2_h + 1000 ELSE dist6_and2_h.
DEFINE minn7_and2_h	ARRAYMIN(dist7_and2_h).
DEFINE pos7_and2_h	LOOKUP(minn7_and2_h, dist7_and2_h, pos_and2_h).
DEFINE dist8_and2_h	IF pos_and2_h == pos7_and2_h THEN dist7_and2_h + 1000 ELSE dist7_and2_h.
DEFINE minn8_and2_h	ARRAYMIN(dist8_and2_h).
DEFINE pos8_and2_h	LOOKUP(minn8_and2_h, dist8_and2_h, pos_and2_h).
DEFINE dist9_and2_h	IF pos_and2_h == pos8_and2_h THEN dist8_and2_h + 1000 ELSE dist8_and2_h.
DEFINE minn9_and2_h	ARRAYMIN(dist9_and2_h).
DEFINE pos9_and2_h	LOOKUP(minn9_and2_h, dist9_and2_h, pos_and2_h).
DEFINE dist10_and2_h	IF pos_and2_h == pos9_and2_h THEN dist9_and2_h + 1000 ELSE dist9_and2_h.
DEFINE minn10_and2_h	ARRAYMIN(dist10_and2_h).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_and2_h		LOOKUP(minn1_and2_h, distance18, db_13b).
ASSIGN BD1_and2_h		ARRAYMIN(BD1_and2_h).
DEFINE BD2_and2_h		LOOKUP(minn2_and2_h, dist2_and2_h, db_13b).
ASSIGN BD2_and2_h		ARRAYMIN(BD2_and2_h).
DEFINE BD3_and2_h		LOOKUP(minn3_and2_h, dist3_and2_h, db_13b).
ASSIGN BD3_and2_h		ARRAYMIN(BD3_and2_h).
DEFINE BD4_and2_h		LOOKUP(minn4_and2_h, dist4_and2_h, db_13b).
ASSIGN BD4_and2_h		ARRAYMIN(BD4_and2_h).
DEFINE BD5_and2_h		LOOKUP(minn5_and2_h, dist5_and2_h, db_13b).
ASSIGN BD5_and2_h		ARRAYMIN(BD5_and2_h).
DEFINE BD6_and2_h		LOOKUP(minn6_and2_h, dist6_and2_h, db_13b).
ASSIGN BD6_and2_h		ARRAYMIN(BD6_and2_h).
DEFINE BD7_and2_h		LOOKUP(minn7_and2_h, dist7_and2_h, db_13b).
ASSIGN BD7_and2_h		ARRAYMIN(BD7_and2_h).
DEFINE BD8_and2_h		LOOKUP(minn8_and2_h, dist8_and2_h, db_13b).
ASSIGN BD8_and2_h		ARRAYMIN(BD8_and2_h).
DEFINE BD9_and2_h		LOOKUP(minn9_and2_h, dist9_and2_h, db_13b).
ASSIGN BD9_and2_h		ARRAYMIN(BD9_and2_h).
DEFINE BD10_and2_h		LOOKUP(minn10_and2_h, dist10_and2_h, db_13b).
ASSIGN BD10_and2_h		ARRAYMIN(BD10_and2_h).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_and2_h	IF minn1_and2_h == 0 THEN 1 ELSE minn1_and2_h.
ASSIGN minn2_and2_h	IF minn2_and2_h == 0 THEN 1 ELSE minn2_and2_h.
ASSIGN minn3_and2_h	IF minn3_and2_h == 0 THEN 1 ELSE minn3_and2_h.
ASSIGN minn4_and2_h	IF minn4_and2_h == 0 THEN 1 ELSE minn4_and2_h.
ASSIGN minn5_and2_h	IF minn5_and2_h == 0 THEN 1 ELSE minn5_and2_h.
ASSIGN minn6_and2_h	IF minn6_and2_h == 0 THEN 1 ELSE minn6_and2_h.
ASSIGN minn7_and2_h	IF minn7_and2_h == 0 THEN 1 ELSE minn7_and2_h.
ASSIGN minn8_and2_h	IF minn8_and2_h == 0 THEN 1 ELSE minn8_and2_h.
ASSIGN minn9_and2_h	IF minn9_and2_h == 0 THEN 1 ELSE minn9_and2_h.
ASSIGN minn10_and2_h	IF minn10_and2_h == 0 THEN 1 ELSE minn10_and2_h.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 8 nearest neighbors from the target.
DEFINE sum_dist_and2_h		minn1_and2_h + minn2_and2_h + minn3_and2_h + minn4_and2_h + minn5_and2_h + minn6_and2_h + 
							minn7_and2_h + minn8_and2_h + minn9_and2_h + minn10_and2_h.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_and2_h	POW(sum_dist_and2_h/minn1_and2_h,1).
DEFINE rel_dist2_and2_h	POW(sum_dist_and2_h/minn2_and2_h,1).
DEFINE rel_dist3_and2_h	POW(sum_dist_and2_h/minn3_and2_h,1).
DEFINE rel_dist4_and2_h	POW(sum_dist_and2_h/minn4_and2_h,1).
DEFINE rel_dist5_and2_h	POW(sum_dist_and2_h/minn5_and2_h,1).
DEFINE rel_dist6_and2_h	POW(sum_dist_and2_h/minn6_and2_h,1).
DEFINE rel_dist7_and2_h	POW(sum_dist_and2_h/minn7_and2_h,1).
DEFINE rel_dist8_and2_h	POW(sum_dist_and2_h/minn8_and2_h,1).
DEFINE rel_dist9_and2_h	POW(sum_dist_and2_h/minn9_and2_h,1).
DEFINE rel_dist10_and2_h	POW(sum_dist_and2_h/minn10_and2_h,1).

DEFINE sum_rel_dist_and2_h		rel_dist1_and2_h + rel_dist2_and2_h + rel_dist3_and2_h + rel_dist4_and2_h + rel_dist5_and2_h + 
								rel_dist6_and2_h + rel_dist7_and2_h + rel_dist8_and2_h + rel_dist9_and2_h + rel_dist10_and2_h.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_and2_h	rel_dist1_and2_h/sum_rel_dist_and2_h.
DEFINE wt2_and2_h	rel_dist2_and2_h/sum_rel_dist_and2_h.
DEFINE wt3_and2_h	rel_dist3_and2_h/sum_rel_dist_and2_h.
DEFINE wt4_and2_h	rel_dist4_and2_h/sum_rel_dist_and2_h.
DEFINE wt5_and2_h	rel_dist5_and2_h/sum_rel_dist_and2_h.
DEFINE wt6_and2_h	rel_dist6_and2_h/sum_rel_dist_and2_h.
DEFINE wt7_and2_h  	rel_dist7_and2_h/sum_rel_dist_and2_h.
DEFINE wt8_and2_h	rel_dist8_and2_h/sum_rel_dist_and2_h.
DEFINE wt9_and2_h  	rel_dist9_and2_h/sum_rel_dist_and2_h.
DEFINE wt10_and2_h	rel_dist10_and2_h/sum_rel_dist_and2_h.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_and2_h		ROUND(BD1_and2_h*wt1_and2_h + BD2_and2_h*wt2_and2_h + BD3_and2_h*wt3_and2_h + BD4_and2_h*wt4_and2_h + 
						BD5_and2_h*wt5_and2_h + BD6_and2_h*wt6_and2_h + BD7_and2_h*wt7_and2_h + BD8_and2_h*wt8_and2_h
						+ BD9_and2_h*wt9_and2_h + BD10_and2_h*wt10_and2_h,2).			

DEFINE wt_BD_andic_h	IF isnull(claytotal_r) or isnull(silttotal_r) or isnull(sandtotal_r) THEN wt_BD_and_h ELSE wt_BD_and2_h.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Andic BD %s" wt_BD_andic_h.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s" BD1_and_h, BD2_and_h, BD3_and_h, BD4_and_h, BD5_and_h.

# GYPSUM SOILS HIGH VALUES-------------------------------------------------------------

# Determines the 'distance' of each soil from the target soil.
DEFINE distance19		SQRT(POW(gypsum_l - c_gypl2,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_gyp40_h	ARRAYMIN(distance19).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_gyp40_h 		ARRAYPOSITION(distance19).
DEFINE pos1_gyp40_h 	LOOKUP(minn1_gyp40_h, distance19, pos_gyp40_h).
DEFINE dist2_gyp40_h	IF pos_gyp40_h == pos1_gyp40_h THEN distance19 + 1000 ELSE distance19.
DEFINE minn2_gyp40_h	ARRAYMIN(dist2_gyp40_h).
DEFINE pos2_gyp40_h		LOOKUP(minn2_gyp40_h, dist2_gyp40_h, pos_gyp40_h).
DEFINE dist3_gyp40_h	IF pos_gyp40_h == pos2_gyp40_h THEN dist2_gyp40_h + 1000 ELSE dist2_gyp40_h.
DEFINE minn3_gyp40_h	ARRAYMIN(dist3_gyp40_h).
DEFINE pos3_gyp40_h		LOOKUP(minn3_gyp40_h, dist3_gyp40_h, pos_gyp40_h).
DEFINE dist4_gyp40_h	IF pos_gyp40_h == pos3_gyp40_h THEN dist3_gyp40_h + 1000 ELSE dist3_gyp40_h.
DEFINE minn4_gyp40_h	ARRAYMIN(dist4_gyp40_h).
DEFINE pos4_gyp40_h		LOOKUP(minn4_gyp40_h, dist4_gyp40_h, pos_gyp40_h).
DEFINE dist5_gyp40_h	IF pos_gyp40_h == pos4_gyp40_h THEN dist4_gyp40_h + 1000 ELSE dist4_gyp40_h.
DEFINE minn5_gyp40_h	ARRAYMIN(dist5_gyp40_h).
DEFINE pos5_gyp40_h		LOOKUP(minn5_gyp40_h, dist5_gyp40_h, pos_gyp40_h).
DEFINE dist6_gyp40_h	IF pos_gyp40_h == pos5_gyp40_h THEN dist5_gyp40_h + 1000 ELSE dist5_gyp40_h.
DEFINE minn6_gyp40_h	ARRAYMIN(dist6_gyp40_h).
DEFINE pos6_gyp40_h		LOOKUP(minn6_gyp40_h, dist6_gyp40_h, pos_gyp40_h).
DEFINE dist7_gyp40_h	IF pos_gyp40_h == pos6_gyp40_h THEN dist6_gyp40_h + 1000 ELSE dist6_gyp40_h.
DEFINE minn7_gyp40_h	ARRAYMIN(dist7_gyp40_h).
DEFINE pos7_gyp40_h		LOOKUP(minn7_gyp40_h, dist7_gyp40_h, pos_gyp40_h).
DEFINE dist8_gyp40_h	IF pos_gyp40_h == pos7_gyp40_h THEN dist7_gyp40_h + 1000 ELSE dist7_gyp40_h.
DEFINE minn8_gyp40_h	ARRAYMIN(dist8_gyp40_h).
DEFINE pos8_gyp40_h		LOOKUP(minn8_gyp40_h, dist8_gyp40_h, pos_gyp40_h).
DEFINE dist9_gyp40_h	IF pos_gyp40_h == pos8_gyp40_h THEN dist8_gyp40_h + 1000 ELSE dist8_gyp40_h.
DEFINE minn9_gyp40_h	ARRAYMIN(dist9_gyp40_h).
DEFINE pos9_gyp40_h		LOOKUP(minn9_gyp40_h, dist9_gyp40_h, pos_gyp40_h).
DEFINE dist10_gyp40_h	IF pos_gyp40_h == pos9_gyp40_h THEN dist9_gyp40_h + 1000 ELSE dist9_gyp40_h.
DEFINE minn10_gyp40_h	ARRAYMIN(dist10_gyp40_h).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_gyp40_h		LOOKUP(minn1_gyp40_h, distance19, g_db_13b).
ASSIGN BD1_gyp40_h		ARRAYMIN(BD1_gyp40_h).
DEFINE BD2_gyp40_h		LOOKUP(minn2_gyp40_h, dist2_gyp40_h, g_db_13b).
ASSIGN BD2_gyp40_h		ARRAYMIN(BD2_gyp40_h).
DEFINE BD3_gyp40_h		LOOKUP(minn3_gyp40_h, dist3_gyp40_h, g_db_13b).
ASSIGN BD3_gyp40_h		ARRAYMIN(BD3_gyp40_h).
DEFINE BD4_gyp40_h		LOOKUP(minn4_gyp40_h, dist4_gyp40_h, g_db_13b).
ASSIGN BD4_gyp40_h		ARRAYMIN(BD4_gyp40_h).
DEFINE BD5_gyp40_h		LOOKUP(minn5_gyp40_h, dist5_gyp40_h, g_db_13b).
ASSIGN BD5_gyp40_h		ARRAYMIN(BD5_gyp40_h).
DEFINE BD6_gyp40_h		LOOKUP(minn6_gyp40_h, dist6_gyp40_h, g_db_13b).
ASSIGN BD6_gyp40_h		ARRAYMIN(BD6_gyp40_h).
DEFINE BD7_gyp40_h		LOOKUP(minn7_gyp40_h, dist7_gyp40_h, g_db_13b).
ASSIGN BD7_gyp40_h		ARRAYMIN(BD7_gyp40_h).
DEFINE BD8_gyp40_h		LOOKUP(minn8_gyp40_h, dist8_gyp40_h, g_db_13b).
ASSIGN BD8_gyp40_h		ARRAYMIN(BD8_gyp40_h).
DEFINE BD9_gyp40_h		LOOKUP(minn9_gyp40_h, dist9_gyp40_h, g_db_13b).
ASSIGN BD9_gyp40_h		ARRAYMIN(BD9_gyp40_h).
DEFINE BD10_gyp40_h		LOOKUP(minn10_gyp40_h, dist10_gyp40_h, g_db_13b).
ASSIGN BD10_gyp40_h		ARRAYMIN(BD10_gyp40_h).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_gyp40_h	IF minn1_gyp40_h == 0 THEN 1 ELSE minn1_gyp40_h.
ASSIGN minn2_gyp40_h	IF minn2_gyp40_h == 0 THEN 1 ELSE minn2_gyp40_h.
ASSIGN minn3_gyp40_h	IF minn3_gyp40_h == 0 THEN 1 ELSE minn3_gyp40_h.
ASSIGN minn4_gyp40_h	IF minn4_gyp40_h == 0 THEN 1 ELSE minn4_gyp40_h.
ASSIGN minn5_gyp40_h	IF minn5_gyp40_h == 0 THEN 1 ELSE minn5_gyp40_h.
ASSIGN minn6_gyp40_h	IF minn6_gyp40_h == 0 THEN 1 ELSE minn6_gyp40_h.
ASSIGN minn7_gyp40_h	IF minn7_gyp40_h == 0 THEN 1 ELSE minn7_gyp40_h.
ASSIGN minn8_gyp40_h	IF minn8_gyp40_h == 0 THEN 1 ELSE minn8_gyp40_h.
ASSIGN minn9_gyp40_h	IF minn9_gyp40_h == 0 THEN 1 ELSE minn9_gyp40_h.
ASSIGN minn10_gyp40_h	IF minn10_gyp40_h == 0 THEN 1 ELSE minn10_gyp40_h.


# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_gyp40_h		minn1_gyp40_h + minn2_gyp40_h + minn3_gyp40_h + minn4_gyp40_h + minn5_gyp40_h +
							minn6_gyp40_h + minn7_gyp40_h + minn8_gyp40_h + minn9_gyp40_h + minn10_gyp40_h.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_gyp40_h	POW(sum_dist_gyp40_h/minn1_gyp40_h,1).
DEFINE rel_dist2_gyp40_h	POW(sum_dist_gyp40_h/minn2_gyp40_h,1).
DEFINE rel_dist3_gyp40_h	POW(sum_dist_gyp40_h/minn3_gyp40_h,1).
DEFINE rel_dist4_gyp40_h	POW(sum_dist_gyp40_h/minn4_gyp40_h,1).
DEFINE rel_dist5_gyp40_h	POW(sum_dist_gyp40_h/minn5_gyp40_h,1).
DEFINE rel_dist6_gyp40_h	POW(sum_dist_gyp40_h/minn6_gyp40_h,1).
DEFINE rel_dist7_gyp40_h	POW(sum_dist_gyp40_h/minn7_gyp40_h,1).
DEFINE rel_dist8_gyp40_h	POW(sum_dist_gyp40_h/minn8_gyp40_h,1).
DEFINE rel_dist9_gyp40_h	POW(sum_dist_gyp40_h/minn9_gyp40_h,1).
DEFINE rel_dist10_gyp40_h	POW(sum_dist_gyp40_h/minn10_gyp40_h,1).

DEFINE sum_rel_dist_gyp40_h		rel_dist1_gyp40_h + rel_dist2_gyp40_h + rel_dist3_gyp40_h + rel_dist4_gyp40_h + rel_dist5_gyp40_h +
								rel_dist6_gyp40_h + rel_dist7_gyp40_h + rel_dist8_gyp40_h + rel_dist9_gyp40_h + rel_dist10_gyp40_h.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_gyp40_h	rel_dist1_gyp40_h/sum_rel_dist_gyp40_h.
DEFINE wt2_gyp40_h	rel_dist2_gyp40_h/sum_rel_dist_gyp40_h.
DEFINE wt3_gyp40_h	rel_dist3_gyp40_h/sum_rel_dist_gyp40_h.
DEFINE wt4_gyp40_h	rel_dist4_gyp40_h/sum_rel_dist_gyp40_h.
DEFINE wt5_gyp40_h	rel_dist5_gyp40_h/sum_rel_dist_gyp40_h.
DEFINE wt6_gyp40_h	rel_dist6_gyp40_h/sum_rel_dist_gyp40_h.
DEFINE wt7_gyp40_h	rel_dist7_gyp40_h/sum_rel_dist_gyp40_h.
DEFINE wt8_gyp40_h	rel_dist8_gyp40_h/sum_rel_dist_gyp40_h.
DEFINE wt9_gyp40_h	rel_dist9_gyp40_h/sum_rel_dist_gyp40_h.
DEFINE wt10_gyp40_h	rel_dist10_gyp40_h/sum_rel_dist_gyp40_h.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_gyp40_h	ROUND(BD1_gyp40_h*wt1_gyp40_h + BD2_gyp40_h*wt2_gyp40_h + BD3_gyp40_h*wt3_gyp40_h + 
						BD4_gyp40_h*wt4_gyp40_h + BD5_gyp40_h*wt5_gyp40_h + BD6_gyp40_h*wt6_gyp40_h + BD7_gyp40_h*wt7_gyp40_h + BD8_gyp40_h*wt8_gyp40_h + 
						BD9_gyp40_h*wt9_gyp40_h + BD10_gyp40_h*wt10_gyp40_h,2).

#-------------

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_BD_max_sand_gyp	((BD_max_sand)-ave_gsand)/std_gsand.
DEFINE temp_BD_max_silt_gyp	((BD_max_silt)-ave_gsilt)/std_gsilt.
DEFINE temp_BD_max_clay_gyp	((BD_max_clay)-ave_gclay)/std_gclay.
DEFINE temp_oc_l_gyp		((oc_l)-ave_gcarbon)/std_gcarbon.
DEFINE temp_gypsum_l_gyp	((gypsum_l)-ave_ggyp)/std_ggyp.

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_BD_max_sand_gyp	temp_BD_max_sand_gyp*ARRAYMAX(cat_ranges_gyp)/range_gsand.
DEFINE trans_BD_max_silt_gyp	temp_BD_max_silt_gyp*ARRAYMAX(cat_ranges_gyp)/range_gsilt.
DEFINE trans_BD_max_clay_gyp	temp_BD_max_clay_gyp*ARRAYMAX(cat_ranges_gyp)/range_gclay.
DEFINE trans_oc_l_gyp			temp_oc_l_gyp*ARRAYMAX(cat_ranges_gyp)/range_gcarbon.
DEFINE trans_gypsum_l_gyp		temp_gypsum_l_gyp*ARRAYMAX(cat_ranges_gyp)/range_ggyp.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance20	SQRT(POW(trans_BD_max_sand_gyp - trans_gsand,2)+POW(trans_BD_max_silt_gyp - trans_gsilt,2)+
					POW(trans_BD_max_clay_gyp - trans_gclay,2)+POW(trans_oc_l_gyp - trans_gcarbon,2)+POW(trans_gypsum_l_gyp - trans_ggyp,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_gyp_h	ARRAYMIN(distance20).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_gyp_h 	ARRAYPOSITION(distance20).
DEFINE pos1_gyp_h 	LOOKUP(minn1_gyp_h, distance20, pos_gyp_h).
DEFINE dist2_gyp_h	IF pos_gyp_h == pos1_gyp_h THEN distance20 + 1000 ELSE distance20.
DEFINE minn2_gyp_h	ARRAYMIN(dist2_gyp_h).
DEFINE pos2_gyp_h	LOOKUP(minn2_gyp_h, dist2_gyp_h, pos_gyp_h).
DEFINE dist3_gyp_h	IF pos_gyp_h == pos2_gyp_h THEN dist2_gyp_h + 1000 ELSE dist2_gyp_h.
DEFINE minn3_gyp_h	ARRAYMIN(dist3_gyp_h).
DEFINE pos3_gyp_h	LOOKUP(minn3_gyp_h, dist3_gyp_h, pos_gyp_h).
DEFINE dist4_gyp_h	IF pos_gyp_h == pos3_gyp_h THEN dist3_gyp_h + 1000 ELSE dist3_gyp_h.
DEFINE minn4_gyp_h	ARRAYMIN(dist4_gyp_h).
DEFINE pos4_gyp_h	LOOKUP(minn4_gyp_h, dist4_gyp_h, pos_gyp_h).
DEFINE dist5_gyp_h	IF pos_gyp_h == pos4_gyp_h THEN dist4_gyp_h + 1000 ELSE dist4_gyp_h.
DEFINE minn5_gyp_h	ARRAYMIN(dist5_gyp_h).
DEFINE pos5_gyp_h	LOOKUP(minn5_gyp_h, dist5_gyp_h, pos_gyp_h).
DEFINE dist6_gyp_h	IF pos_gyp_h == pos5_gyp_h THEN dist5_gyp_h + 1000 ELSE dist5_gyp_h.
DEFINE minn6_gyp_h	ARRAYMIN(dist6_gyp_h).
DEFINE pos6_gyp_h	LOOKUP(minn6_gyp_h, dist6_gyp_h, pos_gyp_h).
DEFINE dist7_gyp_h	IF pos_gyp_h == pos6_gyp_h THEN dist6_gyp_h + 1000 ELSE dist6_gyp_h.
DEFINE minn7_gyp_h	ARRAYMIN(dist7_gyp_h).
DEFINE pos7_gyp_h	LOOKUP(minn7_gyp_h, dist7_gyp_h, pos_gyp_h).
DEFINE dist8_gyp_h	IF pos_gyp_h == pos7_gyp_h THEN dist7_gyp_h + 1000 ELSE dist7_gyp_h.
DEFINE minn8_gyp_h	ARRAYMIN(dist8_gyp_h).
DEFINE pos8_gyp_h	LOOKUP(minn8_gyp_h, dist8_gyp_h, pos_gyp_h).
DEFINE dist9_gyp_h	IF pos_gyp_h == pos8_gyp_h THEN dist8_gyp_h + 1000 ELSE dist8_gyp_h.
DEFINE minn9_gyp_h	ARRAYMIN(dist9_gyp_h).
DEFINE pos9_gyp_h	LOOKUP(minn9_gyp_h, dist9_gyp_h, pos_gyp_h).
DEFINE dist10_gyp_h	IF pos_gyp_h == pos9_gyp_h THEN dist9_gyp_h + 1000 ELSE dist9_gyp_h.
DEFINE minn10_gyp_h	ARRAYMIN(dist10_gyp_h).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_gyp_h		LOOKUP(minn1_gyp_h, distance20, g_db_13b).
ASSIGN BD1_gyp_h		ARRAYMIN(BD1_gyp_h).
DEFINE BD2_gyp_h		LOOKUP(minn2_gyp_h, dist2_gyp_h, g_db_13b).
ASSIGN BD2_gyp_h		ARRAYMIN(BD2_gyp_h).
DEFINE BD3_gyp_h		LOOKUP(minn3_gyp_h, dist3_gyp_h, g_db_13b).
ASSIGN BD3_gyp_h		ARRAYMIN(BD3_gyp_h).
DEFINE BD4_gyp_h		LOOKUP(minn4_gyp_h, dist4_gyp_h, g_db_13b).
ASSIGN BD4_gyp_h		ARRAYMIN(BD4_gyp_h).
DEFINE BD5_gyp_h		LOOKUP(minn5_gyp_h, dist5_gyp_h, g_db_13b).
ASSIGN BD5_gyp_h		ARRAYMIN(BD5_gyp_h).
DEFINE BD6_gyp_h		LOOKUP(minn6_gyp_h, dist6_gyp_h, g_db_13b).
ASSIGN BD6_gyp_h		ARRAYMIN(BD6_gyp_h).
DEFINE BD7_gyp_h		LOOKUP(minn7_gyp_h, dist7_gyp_h, g_db_13b).
ASSIGN BD7_gyp_h		ARRAYMIN(BD7_gyp_h).
DEFINE BD8_gyp_h		LOOKUP(minn8_gyp_h, dist8_gyp_h, g_db_13b).
ASSIGN BD8_gyp_h		ARRAYMIN(BD8_gyp_h).
DEFINE BD9_gyp_h		LOOKUP(minn9_gyp_h, dist9_gyp_h, g_db_13b).
ASSIGN BD9_gyp_h		ARRAYMIN(BD9_gyp_h).
DEFINE BD10_gyp_h		LOOKUP(minn10_gyp_h, dist10_gyp_h, g_db_13b).
ASSIGN BD10_gyp_h		ARRAYMIN(BD10_gyp_h).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_gyp_h	IF minn1_gyp_h == 0 THEN 1 ELSE minn1_gyp_h.
ASSIGN minn2_gyp_h	IF minn2_gyp_h == 0 THEN 1 ELSE minn2_gyp_h.
ASSIGN minn3_gyp_h	IF minn3_gyp_h == 0 THEN 1 ELSE minn3_gyp_h.
ASSIGN minn4_gyp_h	IF minn4_gyp_h == 0 THEN 1 ELSE minn4_gyp_h.
ASSIGN minn5_gyp_h	IF minn5_gyp_h == 0 THEN 1 ELSE minn5_gyp_h.
ASSIGN minn6_gyp_h	IF minn6_gyp_h == 0 THEN 1 ELSE minn6_gyp_h.
ASSIGN minn7_gyp_h	IF minn7_gyp_h == 0 THEN 1 ELSE minn7_gyp_h.
ASSIGN minn8_gyp_h	IF minn8_gyp_h == 0 THEN 1 ELSE minn8_gyp_h.
ASSIGN minn9_gyp_h	IF minn9_gyp_h == 0 THEN 1 ELSE minn9_gyp_h.
ASSIGN minn10_gyp_h	IF minn10_gyp_h == 0 THEN 1 ELSE minn10_gyp_h.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_gyp_h		minn1_gyp_h + minn2_gyp_h + minn3_gyp_h + minn4_gyp_h + minn5_gyp_h + minn6_gyp_h + minn7_gyp_h + minn8_gyp_h +
							minn9_gyp_h + minn10_gyp_h.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_gyp_h	POW(sum_dist_gyp_h/minn1_gyp_h,1).
DEFINE rel_dist2_gyp_h	POW(sum_dist_gyp_h/minn2_gyp_h,1).
DEFINE rel_dist3_gyp_h	POW(sum_dist_gyp_h/minn3_gyp_h,1).
DEFINE rel_dist4_gyp_h	POW(sum_dist_gyp_h/minn4_gyp_h,1).
DEFINE rel_dist5_gyp_h	POW(sum_dist_gyp_h/minn5_gyp_h,1).
DEFINE rel_dist6_gyp_h	POW(sum_dist_gyp_h/minn6_gyp_h,1).
DEFINE rel_dist7_gyp_h	POW(sum_dist_gyp_h/minn7_gyp_h,1).
DEFINE rel_dist8_gyp_h	POW(sum_dist_gyp_h/minn8_gyp_h,1).
DEFINE rel_dist9_gyp_h	POW(sum_dist_gyp_h/minn9_gyp_h,1).
DEFINE rel_dist10_gyp_h	POW(sum_dist_gyp_h/minn10_gyp_h,1).

DEFINE sum_rel_dist_gyp_h	rel_dist1_gyp_h + rel_dist2_gyp_h + rel_dist3_gyp_h + rel_dist4_gyp_h + rel_dist5_gyp_h + rel_dist6_gyp_h + 
							rel_dist7_gyp_h + rel_dist8_gyp_h + rel_dist9_gyp_h + rel_dist10_gyp_h.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_gyp_h	rel_dist1_gyp_h/sum_rel_dist_gyp_h.
DEFINE wt2_gyp_h	rel_dist2_gyp_h/sum_rel_dist_gyp_h.
DEFINE wt3_gyp_h	rel_dist3_gyp_h/sum_rel_dist_gyp_h.
DEFINE wt4_gyp_h	rel_dist4_gyp_h/sum_rel_dist_gyp_h.
DEFINE wt5_gyp_h	rel_dist5_gyp_h/sum_rel_dist_gyp_h.
DEFINE wt6_gyp_h	rel_dist6_gyp_h/sum_rel_dist_gyp_h.
DEFINE wt7_gyp_h  	rel_dist7_gyp_h/sum_rel_dist_gyp_h.
DEFINE wt8_gyp_h	rel_dist8_gyp_h/sum_rel_dist_gyp_h.
DEFINE wt9_gyp_h  	rel_dist9_gyp_h/sum_rel_dist_gyp_h.
DEFINE wt10_gyp_h	rel_dist10_gyp_h/sum_rel_dist_gyp_h.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_gyp_h	ROUND(BD1_gyp_h*wt1_gyp_h + BD2_gyp_h*wt2_gyp_h + BD3_gyp_h*wt3_gyp_h + BD4_gyp_h*wt4_gyp_h + BD5_gyp_h*wt5_gyp_h + 
					BD6_gyp_h*wt6_gyp_h + BD7_gyp_h*wt7_gyp_h + BD8_gyp_h*wt8_gyp_h + BD9_gyp_h*wt9_gyp_h + BD10_gyp_h*wt10_gyp_h,2).			

DEFINE wt_BD_gypsum_h		IF gypsum_r > 40 THEN wt_BD_gyp40_h ELSE wt_BD_gyp_h.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "gypsum BD %s" wt_BD_gypsum_h.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s" BD1_gyp40_h, BD2_gyp40_h, BD3_gyp40_h, BD4_gyp40_h, BD5_gyp40_h.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s, %s, %s, %s" BD1_gyp_h, BD2_gyp_h, BD3_gyp_h, BD4_gyp_h, BD5_gyp_h, BD6_gyp_h, BD7_gyp_h, BD8_gyp_h.

#-----------------------------------------------
# MINERAL SOILS HIGH-----------------------------

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_BD_max_sand_min	((BD_max_sand)-ave_msand)/std_msand.
DEFINE temp_BD_max_silt_min	((BD_max_silt)-ave_msilt)/std_msilt.
DEFINE temp_BD_max_clay_min	((BD_max_clay)-ave_mclay)/std_mclay.
DEFINE temp_oc_l_min		((oc_l)-ave_m_oc)/std_m_oc.

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_BD_max_sand_min	temp_BD_max_sand_min*ARRAYMAX(cat_ranges_min)/range_msand.
DEFINE trans_BD_max_silt_min	temp_BD_max_silt_min*ARRAYMAX(cat_ranges_min)/range_msilt.
DEFINE trans_BD_max_clay_min	temp_BD_max_clay_min*ARRAYMAX(cat_ranges_min)/range_mclay.
DEFINE trans_oc_l_min			temp_oc_l_min*ARRAYMAX(cat_ranges_min)/range_m_oc.

# Determines the 'distance' the each soil from the target soil.
DEFINE distance21	SQRT(POW(trans_BD_max_sand_min - trans_msand,2)+POW(trans_BD_max_silt_min - trans_msilt,2)+
					POW(trans_BD_max_clay_min - trans_mclay,2)+POW(trans_oc_l_min - trans_m_oc,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_min_h	ARRAYMIN(distance21).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_min_h 	ARRAYPOSITION(distance21).
DEFINE pos1_min_h 	LOOKUP(minn1_min_h, distance21, pos_min_h).
DEFINE dist2_min_h	IF pos_min_h == pos1_min_h THEN distance21 + 1000 ELSE distance21.
DEFINE minn2_min_h	ARRAYMIN(dist2_min_h).
DEFINE pos2_min_h	LOOKUP(minn2_min_h, dist2_min_h, pos_min_h).
DEFINE dist3_min_h	IF pos_min_h == pos2_min_h THEN dist2_min_h + 1000 ELSE dist2_min_h.
DEFINE minn3_min_h	ARRAYMIN(dist3_min_h).
DEFINE pos3_min_h	LOOKUP(minn3_min_h, dist3_min_h, pos_min_h).
DEFINE dist4_min_h	IF pos_min_h == pos3_min_h THEN dist3_min_h + 1000 ELSE dist3_min_h.
DEFINE minn4_min_h	ARRAYMIN(dist4_min_h).
DEFINE pos4_min_h	LOOKUP(minn4_min_h, dist4_min_h, pos_min_h).
DEFINE dist5_min_h	IF pos_min_h == pos4_min_h THEN dist4_min_h + 1000 ELSE dist4_min_h.
DEFINE minn5_min_h	ARRAYMIN(dist5_min_h).
DEFINE pos5_min_h	LOOKUP(minn5_min_h, dist5_min_h, pos_min_h).
DEFINE dist6_min_h	IF pos_min_h == pos5_min_h THEN dist5_min_h + 1000 ELSE dist5_min_h.
DEFINE minn6_min_h	ARRAYMIN(dist6_min_h).
DEFINE pos6_min_h	LOOKUP(minn6_min_h, dist6_min_h, pos_min_h).
DEFINE dist7_min_h	IF pos_min_h == pos6_min_h THEN dist6_min_h + 1000 ELSE dist6_min_h.
DEFINE minn7_min_h	ARRAYMIN(dist7_min_h).
DEFINE pos7_min_h	LOOKUP(minn7_min_h, dist7_min_h, pos_min_h).
DEFINE dist8_min_h	IF pos_min_h == pos7_min_h THEN dist7_min_h + 1000 ELSE dist7_min_h.
DEFINE minn8_min_h	ARRAYMIN(dist8_min_h).
DEFINE pos8_min_h	LOOKUP(minn8_min_h, dist8_min_h, pos_min_h).
DEFINE dist9_min_h	IF pos_min_h == pos8_min_h THEN dist8_min_h + 1000 ELSE dist8_min_h.
DEFINE minn9_min_h	ARRAYMIN(dist9_min_h).
DEFINE pos9_min_h	LOOKUP(minn9_min_h, dist9_min_h, pos_min_h).
DEFINE dist10_min_h	IF pos_min_h == pos9_min_h THEN dist9_min_h + 1000 ELSE dist9_min_h.
DEFINE minn10_min_h	ARRAYMIN(dist10_min_h).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_min_h		LOOKUP(minn1_min_h, distance21, m_db_13b).
ASSIGN BD1_min_h		ARRAYMIN(BD1_min_h).
DEFINE BD2_min_h		LOOKUP(minn2_min_h, dist2_min_h, m_db_13b).
ASSIGN BD2_min_h		ARRAYMIN(BD2_min_h).
DEFINE BD3_min_h		LOOKUP(minn3_min_h, dist3_min_h, m_db_13b).
ASSIGN BD3_min_h		ARRAYMIN(BD3_min_h).
DEFINE BD4_min_h		LOOKUP(minn4_min_h, dist4_min_h, m_db_13b).
ASSIGN BD4_min_h		ARRAYMIN(BD4_min_h).
DEFINE BD5_min_h		LOOKUP(minn5_min_h, dist5_min_h, m_db_13b).
ASSIGN BD5_min_h		ARRAYMIN(BD5_min_h).
DEFINE BD6_min_h		LOOKUP(minn6_min_h, dist6_min_h, m_db_13b).
ASSIGN BD6_min_h		ARRAYMIN(BD6_min_h).
DEFINE BD7_min_h		LOOKUP(minn7_min_h, dist7_min_h, m_db_13b).
ASSIGN BD7_min_h		ARRAYMIN(BD7_min_h).
DEFINE BD8_min_h		LOOKUP(minn8_min_h, dist8_min_h, m_db_13b).
ASSIGN BD8_min_h		ARRAYMIN(BD8_min_h).
DEFINE BD9_min_h		LOOKUP(minn9_min_h, dist9_min_h, m_db_13b).
ASSIGN BD9_min_h		ARRAYMIN(BD9_min_h).
DEFINE BD10_min_h		LOOKUP(minn10_min_h, dist10_min_h, m_db_13b).
ASSIGN BD10_min_h		ARRAYMIN(BD10_min_h).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_min_h	IF minn1_min_h == 0 THEN 1 ELSE minn1_min_h.
ASSIGN minn2_min_h	IF minn2_min_h == 0 THEN 1 ELSE minn2_min_h.
ASSIGN minn3_min_h	IF minn3_min_h == 0 THEN 1 ELSE minn3_min_h.
ASSIGN minn4_min_h	IF minn4_min_h == 0 THEN 1 ELSE minn4_min_h.
ASSIGN minn5_min_h	IF minn5_min_h == 0 THEN 1 ELSE minn5_min_h.
ASSIGN minn6_min_h	IF minn6_min_h == 0 THEN 1 ELSE minn6_min_h.
ASSIGN minn7_min_h	IF minn7_min_h == 0 THEN 1 ELSE minn7_min_h.
ASSIGN minn8_min_h	IF minn8_min_h == 0 THEN 1 ELSE minn8_min_h.
ASSIGN minn9_min_h	IF minn9_min_h == 0 THEN 1 ELSE minn9_min_h.
ASSIGN minn10_min_h	IF minn10_min_h == 0 THEN 1 ELSE minn10_min_h.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_min_h		minn1_min_h + minn2_min_h + minn3_min_h + minn4_min_h + minn5_min_h + minn6_min_h + minn7_min_h + minn8_min_h
							+ minn9_min_h + minn10_min_h.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_min_h	POW(sum_dist_min_h/minn1_min_h,1).
DEFINE rel_dist2_min_h	POW(sum_dist_min_h/minn2_min_h,1).
DEFINE rel_dist3_min_h	POW(sum_dist_min_h/minn3_min_h,1).
DEFINE rel_dist4_min_h	POW(sum_dist_min_h/minn4_min_h,1).
DEFINE rel_dist5_min_h	POW(sum_dist_min_h/minn5_min_h,1).
DEFINE rel_dist6_min_h	POW(sum_dist_min_h/minn6_min_h,1).
DEFINE rel_dist7_min_h	POW(sum_dist_min_h/minn7_min_h,1).
DEFINE rel_dist8_min_h	POW(sum_dist_min_h/minn8_min_h,1).
DEFINE rel_dist9_min_h	POW(sum_dist_min_h/minn9_min_h,1).
DEFINE rel_dist10_min_h	POW(sum_dist_min_h/minn10_min_h,1).


DEFINE sum_rel_dist_min_h		rel_dist1_min_h + rel_dist2_min_h + rel_dist3_min_h + rel_dist4_min_h + rel_dist5_min_h + 
								rel_dist6_min_h + rel_dist7_min_h + rel_dist8_min_h + rel_dist9_min_h + rel_dist10_min_h.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_min_h	rel_dist1_min_h/sum_rel_dist_min_h.
DEFINE wt2_min_h	rel_dist2_min_h/sum_rel_dist_min_h.
DEFINE wt3_min_h	rel_dist3_min_h/sum_rel_dist_min_h.
DEFINE wt4_min_h	rel_dist4_min_h/sum_rel_dist_min_h.
DEFINE wt5_min_h	rel_dist5_min_h/sum_rel_dist_min_h.
DEFINE wt6_min_h	rel_dist6_min_h/sum_rel_dist_min_h.
DEFINE wt7_min_h  	rel_dist7_min_h/sum_rel_dist_min_h.
DEFINE wt8_min_h	rel_dist8_min_h/sum_rel_dist_min_h.
DEFINE wt9_min_h  	rel_dist9_min_h/sum_rel_dist_min_h.
DEFINE wt10_min_h	rel_dist10_min_h/sum_rel_dist_min_h.

# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_min_h	ROUND(BD1_min_h*wt1_min_h + BD2_min_h*wt2_min_h + BD3_min_h*wt3_min_h + BD4_min_h*wt4_min_h + 
					BD5_min_h*wt5_min_h + BD6_min_h*wt6_min_h + BD7_min_h*wt7_min_h + BD8_min_h*wt8_min_h
					+ BD9_min_h*wt9_min_h + BD10_min_h*wt10_min_h, 2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Mineral BD %s, %s"  wt_BD_min_h.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s, %s, %s, %s" BD1_min_h, BD2_min_h, BD3_min_h, BD4_min_h, BD5_min_h, BD6_min_h, BD7_min_h, BD8_min_h.

# ORGANIC SOILS HIGH VALUES-------------------------------------------------------------
# Determines the 'distance' of each soil from the target soil.
DEFINE distance24		SQRT(POW(oc_l - c_tot,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_org_h		ARRAYMIN(distance24).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_org_h 	ARRAYPOSITION(distance24).
DEFINE pos1_org_h 	LOOKUP(minn1_org_h, distance24, pos_org_h).
DEFINE dist2_org_h	IF pos_org_h == pos1_org_h THEN distance24 + 1000 ELSE distance24.
DEFINE minn2_org_h	ARRAYMIN(dist2_org_h).
DEFINE pos2_org_h	LOOKUP(minn2_org_h, dist2_org_h, pos_org_h).
DEFINE dist3_org_h	IF pos_org_h == pos2_org_h THEN dist2_org_h + 1000 ELSE dist2_org_h.
DEFINE minn3_org_h	ARRAYMIN(dist3_org_h).
DEFINE pos3_org_h	LOOKUP(minn3_org_h, dist3_org_h, pos_org_h).
DEFINE dist4_org_h	IF pos_org_h == pos3_org_h THEN dist3_org_h + 1000 ELSE dist3_org_h.
DEFINE minn4_org_h	ARRAYMIN(dist4_org_h).
DEFINE pos4_org_h	LOOKUP(minn4_org_h, dist4_org_h, pos_org_h).
DEFINE dist5_org_h	IF pos_org_h == pos4_org_h THEN dist4_org_h + 1000 ELSE dist4_org_h.
DEFINE minn5_org_h	ARRAYMIN(dist5_org_h).
DEFINE pos5_org_h	LOOKUP(minn5_org_h, dist5_org_h, pos_org_h).
DEFINE dist6_org_h	IF pos_org_h == pos5_org_h THEN dist5_org_h + 1000 ELSE dist5_org_h.
DEFINE minn6_org_h	ARRAYMIN(dist6_org_h).
DEFINE pos6_org_h	LOOKUP(minn6_org_h, dist6_org_h, pos_org_h).
DEFINE dist7_org_h	IF pos_org_h == pos6_org_h THEN dist6_org_h + 1000 ELSE dist6_org_h.
DEFINE minn7_org_h	ARRAYMIN(dist7_org_h).
DEFINE pos7_org_h	LOOKUP(minn7_org_h, dist7_org_h, pos_org_h).
DEFINE dist8_org_h	IF pos_org_h == pos7_org_h THEN dist7_org_h + 1000 ELSE dist7_org_h.
DEFINE minn8_org_h	ARRAYMIN(dist8_org_h).
DEFINE pos8_org_h	LOOKUP(minn8_org_h, dist8_org_h, pos_org_h).
DEFINE dist9_org_h	IF pos_org_h == pos8_org_h THEN dist8_org_h + 1000 ELSE dist8_org_h.
DEFINE minn9_org_h	ARRAYMIN(dist9_org_h).
DEFINE pos9_org_h	LOOKUP(minn9_org_h, dist9_org_h, pos_org_h).
DEFINE dist10_org_h	IF pos_org_h == pos9_org_h THEN dist9_org_h + 1000 ELSE dist9_org_h.
DEFINE minn10_org_h	ARRAYMIN(dist10_org_h).


# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_org_h		LOOKUP(minn1_org_h, distance24, o_db_13b).
ASSIGN BD1_org_h		ARRAYMIN(BD1_org_h).
DEFINE BD2_org_h		LOOKUP(minn2_org_h, dist2_org_h, o_db_13b).
ASSIGN BD2_org_h		ARRAYMIN(BD2_org_h).
DEFINE BD3_org_h		LOOKUP(minn3_org_h, dist3_org_h, o_db_13b).
ASSIGN BD3_org_h		ARRAYMIN(BD3_org_h).
DEFINE BD4_org_h		LOOKUP(minn4_org_h, dist4_org_h, o_db_13b).
ASSIGN BD4_org_h		ARRAYMIN(BD4_org_h).
DEFINE BD5_org_h		LOOKUP(minn5_org_h, dist5_org_h, o_db_13b).
ASSIGN BD5_org_h		ARRAYMIN(BD5_org_h).
DEFINE BD6_org_h		LOOKUP(minn6_org_h, dist6_org_h, o_db_13b).
ASSIGN BD6_org_h		ARRAYMIN(BD6_org_h).
DEFINE BD7_org_h		LOOKUP(minn7_org_h, dist7_org_h, o_db_13b).
ASSIGN BD7_org_h		ARRAYMIN(BD7_org_h).
DEFINE BD8_org_h		LOOKUP(minn8_org_h, dist8_org_h, o_db_13b).
ASSIGN BD8_org_h		ARRAYMIN(BD8_org_h).
DEFINE BD9_org_h		LOOKUP(minn9_org_h, dist9_org_h, o_db_13b).
ASSIGN BD9_org_h		ARRAYMIN(BD9_org_h).
DEFINE BD10_org_h		LOOKUP(minn10_org_h, dist10_org_h, o_db_13b).
ASSIGN BD10_org_h		ARRAYMIN(BD10_org_h).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_org_h	IF minn1_org_h == 0 THEN 1 ELSE minn1_org_h.
ASSIGN minn2_org_h	IF minn2_org_h == 0 THEN 1 ELSE minn2_org_h.
ASSIGN minn3_org_h	IF minn3_org_h == 0 THEN 1 ELSE minn3_org_h.
ASSIGN minn4_org_h	IF minn4_org_h == 0 THEN 1 ELSE minn4_org_h.
ASSIGN minn5_org_h	IF minn5_org_h == 0 THEN 1 ELSE minn5_org_h.
ASSIGN minn6_org_h	IF minn6_org_h == 0 THEN 1 ELSE minn6_org_h.
ASSIGN minn7_org_h	IF minn7_org_h == 0 THEN 1 ELSE minn7_org_h.
ASSIGN minn8_org_h	IF minn8_org_h == 0 THEN 1 ELSE minn8_org_h.
ASSIGN minn9_org_h	IF minn9_org_h == 0 THEN 1 ELSE minn9_org_h.
ASSIGN minn10_org_h	IF minn10_org_h == 0 THEN 1 ELSE minn10_org_h.


# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 8 nearest neighbors from the target.
DEFINE sum_dist_org_h		minn1_org_h + minn2_org_h + minn3_org_h + minn4_org_h + minn5_org_h +
							minn6_org_h + minn7_org_h + minn8_org_h + minn9_org_h + minn10_org_h.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_org_h	POW(sum_dist_org_h/minn1_org_h,1).
DEFINE rel_dist2_org_h	POW(sum_dist_org_h/minn2_org_h,1).
DEFINE rel_dist3_org_h	POW(sum_dist_org_h/minn3_org_h,1).
DEFINE rel_dist4_org_h	POW(sum_dist_org_h/minn4_org_h,1).
DEFINE rel_dist5_org_h	POW(sum_dist_org_h/minn5_org_h,1).
DEFINE rel_dist6_org_h	POW(sum_dist_org_h/minn6_org_h,1).
DEFINE rel_dist7_org_h	POW(sum_dist_org_h/minn7_org_h,1).
DEFINE rel_dist8_org_h	POW(sum_dist_org_h/minn8_org_h,1).
DEFINE rel_dist9_org_h	POW(sum_dist_org_h/minn9_org_h,1).
DEFINE rel_dist10_org_h	POW(sum_dist_org_h/minn10_org_h,1).

DEFINE sum_rel_dist_org_h		rel_dist1_org_h + rel_dist2_org_h + rel_dist3_org_h + rel_dist4_org_h + rel_dist5_org_h +
								rel_dist6_org_h + rel_dist7_org_h + rel_dist8_org_h + rel_dist9_org_h + rel_dist10_org_h.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_org_h	rel_dist1_org_h/sum_rel_dist_org_h.
DEFINE wt2_org_h	rel_dist2_org_h/sum_rel_dist_org_h.
DEFINE wt3_org_h	rel_dist3_org_h/sum_rel_dist_org_h.
DEFINE wt4_org_h	rel_dist4_org_h/sum_rel_dist_org_h.
DEFINE wt5_org_h	rel_dist5_org_h/sum_rel_dist_org_h.
DEFINE wt6_org_h	rel_dist6_org_h/sum_rel_dist_org_h.
DEFINE wt7_org_h	rel_dist7_org_h/sum_rel_dist_org_h.
DEFINE wt8_org_h	rel_dist8_org_h/sum_rel_dist_org_h.
DEFINE wt9_org_h	rel_dist9_org_h/sum_rel_dist_org_h.
DEFINE wt10_org_h	rel_dist10_org_h/sum_rel_dist_org_h.


# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_org_h	ROUND(BD1_org_h*wt1_org_h + BD2_org_h*wt2_org_h + BD3_org_h*wt3_org_h + BD4_org_h*wt4_org_h + BD5_org_h*wt5_org_h +
					BD6_org_h*wt6_org_h + BD7_org_h*wt7_org_h + BD8_org_h*wt8_org_h + BD9_org_h*wt9_org_h + BD10_org_h*wt10_org_h,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Organic BD %s" wt_BD_org_h.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s" BD1_org_h, BD2_org_h, BD3_org_h, BD4_org_h, BD5_org_h.

# DENSE SOILS HIGH SOILS-------------------------------------------------------------

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
DEFINE temp_BD_max_sand_dns	((BD_max_sand)-ave_fsand)/std_fsand.
DEFINE temp_BD_max_silt_dns	((BD_max_silt)-ave_fsilt)/std_fsilt.
DEFINE temp_BD_max_clay_dns	((BD_max_clay)-ave_fclay)/std_fclay.
DEFINE temp_oc_l_dns		((oc_l)-ave_foc)/std_foc.

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_BD_max_sand_dns	temp_BD_max_sand_dns*ARRAYMAX(cat_ranges_dns)/range_fsand.
DEFINE trans_BD_max_silt_dns	temp_BD_max_silt_dns*ARRAYMAX(cat_ranges_dns)/range_fsilt.
DEFINE trans_BD_max_clay_dns	temp_BD_max_clay_dns*ARRAYMAX(cat_ranges_dns)/range_fclay.
DEFINE trans_oc_l_dns			temp_oc_l_dns*ARRAYMAX(cat_ranges_dns)/range_foc.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance22	SQRT(POW(trans_BD_max_sand_dns - trans_fsand,2)+POW(trans_BD_max_silt_dns - trans_fsilt,2)+
					POW(trans_BD_max_clay_dns - trans_fclay,2)+POW(trans_oc_l_dns - trans_foc,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_dns_h	ARRAYMIN(distance22).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_dns_h 	ARRAYPOSITION(distance22).
DEFINE pos1_dns_h 	LOOKUP(minn1_dns_h, distance22, pos_dns_h).
DEFINE dist2_dns_h	IF pos_dns_h == pos1_dns_h THEN distance22 + 1000 ELSE distance22.
DEFINE minn2_dns_h	ARRAYMIN(dist2_dns_h).
DEFINE pos2_dns_h	LOOKUP(minn2_dns_h, dist2_dns_h, pos_dns_h).
DEFINE dist3_dns_h	IF pos_dns_h == pos2_dns_h THEN dist2_dns_h + 1000 ELSE dist2_dns_h.
DEFINE minn3_dns_h	ARRAYMIN(dist3_dns_h).
DEFINE pos3_dns_h	LOOKUP(minn3_dns_h, dist3_dns_h, pos_dns_h).
DEFINE dist4_dns_h	IF pos_dns_h == pos3_dns_h THEN dist3_dns_h + 1000 ELSE dist3_dns_h.
DEFINE minn4_dns_h	ARRAYMIN(dist4_dns_h).
DEFINE pos4_dns_h	LOOKUP(minn4_dns_h, dist4_dns_h, pos_dns_h).
DEFINE dist5_dns_h	IF pos_dns_h == pos4_dns_h THEN dist4_dns_h + 1000 ELSE dist4_dns_h.
DEFINE minn5_dns_h	ARRAYMIN(dist5_dns_h).
DEFINE pos5_dns_h	LOOKUP(minn5_dns_h, dist5_dns_h, pos_dns_h).
DEFINE dist6_dns_h	IF pos_dns_h == pos5_dns_h THEN dist5_dns_h + 1000 ELSE dist5_dns_h.
DEFINE minn6_dns_h	ARRAYMIN(dist6_dns_h).
DEFINE pos6_dns_h	LOOKUP(minn6_dns_h, dist6_dns_h, pos_dns_h).
DEFINE dist7_dns_h	IF pos_dns_h == pos6_dns_h THEN dist6_dns_h + 1000 ELSE dist6_dns_h.
DEFINE minn7_dns_h	ARRAYMIN(dist7_dns_h).
DEFINE pos7_dns_h	LOOKUP(minn7_dns_h, dist7_dns_h, pos_dns_h).
DEFINE dist8_dns_h	IF pos_dns_h == pos7_dns_h THEN dist7_dns_h + 1000 ELSE dist7_dns_h.
DEFINE minn8_dns_h	ARRAYMIN(dist8_dns_h).
DEFINE pos8_dns_h	LOOKUP(minn8_dns_h, dist8_dns_h, pos_dns_h).
DEFINE dist9_dns_h	IF pos_dns_h == pos8_dns_h THEN dist8_dns_h + 1000 ELSE dist8_dns_h.
DEFINE minn9_dns_h	ARRAYMIN(dist9_dns_h).
DEFINE pos9_dns_h	LOOKUP(minn9_dns_h, dist9_dns_h, pos_dns_h).
DEFINE dist10_dns_h	IF pos_dns_h == pos9_dns_h THEN dist9_dns_h + 1000 ELSE dist9_dns_h.
DEFINE minn10_dns_h	ARRAYMIN(dist10_dns_h).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_dns_h		LOOKUP(minn1_dns_h, distance22, f_db_13b).
ASSIGN BD1_dns_h		ARRAYMIN(BD1_dns_h).
DEFINE BD2_dns_h		LOOKUP(minn2_dns_h, dist2_dns_h, f_db_13b).
ASSIGN BD2_dns_h		ARRAYMIN(BD2_dns_h).
DEFINE BD3_dns_h		LOOKUP(minn3_dns_h, dist3_dns_h, f_db_13b).
ASSIGN BD3_dns_h		ARRAYMIN(BD3_dns_h).
DEFINE BD4_dns_h		LOOKUP(minn4_dns_h, dist4_dns_h, f_db_13b).
ASSIGN BD4_dns_h		ARRAYMIN(BD4_dns_h).
DEFINE BD5_dns_h		LOOKUP(minn5_dns_h, dist5_dns_h, f_db_13b).
ASSIGN BD5_dns_h		ARRAYMIN(BD5_dns_h).
DEFINE BD6_dns_h		LOOKUP(minn6_dns_h, dist6_dns_h, f_db_13b).
ASSIGN BD6_dns_h		ARRAYMIN(BD6_dns_h).
DEFINE BD7_dns_h		LOOKUP(minn7_dns_h, dist7_dns_h, f_db_13b).
ASSIGN BD7_dns_h		ARRAYMIN(BD7_dns_h).
DEFINE BD8_dns_h		LOOKUP(minn8_dns_h, dist8_dns_h, f_db_13b).
ASSIGN BD8_dns_h		ARRAYMIN(BD8_dns_h).
DEFINE BD9_dns_h		LOOKUP(minn9_dns_h, dist9_dns_h, f_db_13b).
ASSIGN BD9_dns_h		ARRAYMIN(BD9_dns_h).
DEFINE BD10_dns_h		LOOKUP(minn10_dns_h, dist10_dns_h, f_db_13b).
ASSIGN BD10_dns_h		ARRAYMIN(BD10_dns_h).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_dns_h	IF minn1_dns_h == 0 THEN 1 ELSE minn1_dns_h.
ASSIGN minn2_dns_h	IF minn2_dns_h == 0 THEN 1 ELSE minn2_dns_h.
ASSIGN minn3_dns_h	IF minn3_dns_h == 0 THEN 1 ELSE minn3_dns_h.
ASSIGN minn4_dns_h	IF minn4_dns_h == 0 THEN 1 ELSE minn4_dns_h.
ASSIGN minn5_dns_h	IF minn5_dns_h == 0 THEN 1 ELSE minn5_dns_h.
ASSIGN minn6_dns_h	IF minn6_dns_h == 0 THEN 1 ELSE minn6_dns_h.
ASSIGN minn7_dns_h	IF minn7_dns_h == 0 THEN 1 ELSE minn7_dns_h.
ASSIGN minn8_dns_h	IF minn8_dns_h == 0 THEN 1 ELSE minn8_dns_h.
ASSIGN minn9_dns_h	IF minn9_dns_h == 0 THEN 1 ELSE minn9_dns_h.
ASSIGN minn10_dns_h	IF minn10_dns_h == 0 THEN 1 ELSE minn10_dns_h.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 8 nearest neighbors from the target.
DEFINE sum_dist_dns_h		minn1_dns_h + minn2_dns_h + minn3_dns_h + minn4_dns_h + minn5_dns_h + 
							minn6_dns_h + minn7_dns_h + minn8_dns_h + minn9_dns_h + minn10_dns_h.

# Calculates the relative distance of each of the 8 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_dns_h	POW(sum_dist_dns_h/minn1_dns_h,1).
DEFINE rel_dist2_dns_h	POW(sum_dist_dns_h/minn2_dns_h,1).
DEFINE rel_dist3_dns_h	POW(sum_dist_dns_h/minn3_dns_h,1).
DEFINE rel_dist4_dns_h	POW(sum_dist_dns_h/minn4_dns_h,1).
DEFINE rel_dist5_dns_h	POW(sum_dist_dns_h/minn5_dns_h,1).
DEFINE rel_dist6_dns_h	POW(sum_dist_dns_h/minn6_dns_h,1).
DEFINE rel_dist7_dns_h	POW(sum_dist_dns_h/minn7_dns_h,1).
DEFINE rel_dist8_dns_h	POW(sum_dist_dns_h/minn8_dns_h,1).
DEFINE rel_dist9_dns_h	POW(sum_dist_dns_h/minn9_dns_h,1).
DEFINE rel_dist10_dns_h	POW(sum_dist_dns_h/minn10_dns_h,1).


DEFINE sum_rel_dist_dns_h		rel_dist1_dns_h + rel_dist2_dns_h + rel_dist3_dns_h + rel_dist4_dns_h + 
								rel_dist5_dns_h + rel_dist6_dns_h + rel_dist7_dns_h + rel_dist8_dns_h + rel_dist9_dns_h + rel_dist10_dns_h.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_dns_h	rel_dist1_dns_h/sum_rel_dist_dns_h.
DEFINE wt2_dns_h	rel_dist2_dns_h/sum_rel_dist_dns_h.
DEFINE wt3_dns_h	rel_dist3_dns_h/sum_rel_dist_dns_h.
DEFINE wt4_dns_h	rel_dist4_dns_h/sum_rel_dist_dns_h.
DEFINE wt5_dns_h	rel_dist5_dns_h/sum_rel_dist_dns_h.
DEFINE wt6_dns_h	rel_dist6_dns_h/sum_rel_dist_dns_h.
DEFINE wt7_dns_h  	rel_dist7_dns_h/sum_rel_dist_dns_h.
DEFINE wt8_dns_h	rel_dist8_dns_h/sum_rel_dist_dns_h.
DEFINE wt9_dns_h  	rel_dist9_dns_h/sum_rel_dist_dns_h.
DEFINE wt10_dns_h	rel_dist10_dns_h/sum_rel_dist_dns_h.


# The weighted average bulk density of 8 nearest soils (to the target soil).
DEFINE wt_BD_dns_h	ROUND(BD1_dns_h*wt1_dns_h + BD2_dns_h*wt2_dns_h + BD3_dns_h*wt3_dns_h + BD4_dns_h*wt4_dns_h + 
					BD5_dns_h*wt5_dns_h + BD6_dns_h*wt6_dns_h + BD7_dns_h*wt7_dns_h + BD8_dns_h*wt8_dns_h
					+ BD9_dns_h*wt9_dns_h + BD10_dns_h*wt10_dns_h,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Dense BD %s" wt_BD_dns_h.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s, %s, %s, %s" BD1_dns_h, BD2_dns_h, BD3_dns_h, BD4_dns_h, BD5_dns_h, BD6_dns_h, BD7_dns_h, BD8_dns_h.

# SANDY SOILS HIGH SOILS-------------------------------------------------------------

# Transforms all input variables into temporary variables with distribution having zero mean and standard deviation of one.
# Gets the high sand distribution for total high sand based on the RV sand distribution.
DEFINE temp_sandvc_r_h		(((sandvc_r/sands)*BD_max_sand)-ave_sand_vc)/std_sand_vc.
DEFINE temp_sandco_r_h		(((sandco_r/sands)*BD_max_sand)-ave_sand_c)/std_sand_c.
DEFINE temp_sandmed_r_h		(((sandmed_r/sands)*BD_max_sand)-ave_sand_m)/std_sand_m.
DEFINE temp_sandfine_r_h	(((sandfine_r/sands)*BD_max_sand)-ave_sand_f)/std_sand_f.
DEFINE temp_sandvf_r_h		(((sandvf_r/sands)*BD_max_sand)-ave_sand_vf)/std_sand_vf.
DEFINE temp_BD_max_silt		((BD_max_silt)-ave_ssilt)/std_ssilt.
DEFINE temp_BD_max_clay		((BD_max_clay)-ave_sclay)/std_sclay.
DEFINE temp_oc_l			((oc_l)-ave_s_oc)/std_s_oc.

# Scales the temporary variables to obtain zero mean and the same minimum-maximum range in the data of all attributes.
DEFINE trans_sandvc_r_h		temp_sandvc_r_h*ARRAYMAX(cat_ranges)/range_sand_vc.
DEFINE trans_sandco_r_h		temp_sandco_r_h*ARRAYMAX(cat_ranges)/range_sand_c.
DEFINE trans_sandmed_r_h	temp_sandmed_r_h*ARRAYMAX(cat_ranges)/range_sand_m.
DEFINE trans_sandfine_r_h	temp_sandfine_r_h*ARRAYMAX(cat_ranges)/range_sand_f.
DEFINE trans_sandvf_r_h		temp_sandvf_r_h*ARRAYMAX(cat_ranges)/range_sand_vf.
DEFINE trans_BD_max_silt	temp_BD_max_silt*ARRAYMAX(cat_ranges)/range_ssilt.
DEFINE trans_BD_max_clay	temp_BD_max_clay*ARRAYMAX(cat_ranges)/range_sclay.
DEFINE trans_oc_l			temp_oc_l*ARRAYMAX(cat_ranges)/range_s_oc.

# Determines the 'distance' of the each soil from the target soil.
DEFINE distance23	SQRT(POW(trans_sandvc_r_h - trans_sand_vc,2)+POW(trans_sandco_r_h - trans_sand_c,2)+
					POW(trans_sandmed_r_h - trans_sand_m,2)+POW(trans_sandfine_r_h - trans_sand_f,2)+
					POW(trans_sandvf_r_h - trans_sand_vf,2)+POW(trans_BD_max_silt - trans_ssilt,2)+
					POW(trans_BD_max_clay - trans_sclay,2)+POW(trans_oc_l - trans_s_oc,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_h		ARRAYMIN(distance23).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_h 		ARRAYPOSITION(distance23).
DEFINE pos1_h 		LOOKUP(minn1_h, distance23, pos_h).
DEFINE dist2_h		IF pos_h == pos1_h THEN distance23 + 1000 ELSE distance23.
DEFINE minn2_h		ARRAYMIN(dist2_h).
DEFINE pos2_h		LOOKUP(minn2_h, dist2_h, pos_h).
DEFINE dist3_h		IF pos_h == pos2_h THEN dist2_h + 1000 ELSE dist2_h.
DEFINE minn3_h		ARRAYMIN(dist3_h).
DEFINE pos3_h		LOOKUP(minn3, dist3, pos).
DEFINE dist4_h		IF pos_h == pos3_h THEN dist3_h + 1000 ELSE dist3_h.
DEFINE minn4_h		ARRAYMIN(dist4_h).
DEFINE pos4_h		LOOKUP(minn4_h, dist4_h, pos_h).
DEFINE dist5_h		IF pos_h == pos4_h THEN dist4_h + 1000 ELSE dist4_h.
DEFINE minn5_h		ARRAYMIN(dist5_h).
DEFINE pos5_h		LOOKUP(minn5_h, dist5_h, pos_h).
DEFINE dist6_h		IF pos_h == pos5_h THEN dist5_h + 1000 ELSE dist5_h.
DEFINE minn6_h		ARRAYMIN(dist6_h).
DEFINE pos6_h		LOOKUP(minn6_h, dist6_h, pos_h).
DEFINE dist7_h		IF pos_h == pos6_h THEN dist6_h + 1000 ELSE dist6_h.
DEFINE minn7_h		ARRAYMIN(dist7_h).
DEFINE pos7_h		LOOKUP(minn7_h, dist7_h, pos_h).
DEFINE dist8_h		IF pos_h == pos7_h THEN dist7_h + 1000 ELSE dist7_h.
DEFINE minn8_h		ARRAYMIN(dist8_h).
DEFINE pos8_h		LOOKUP(minn8_h, dist8_h, pos_h).
DEFINE dist9_h		IF pos_h == pos8_h THEN dist8_h + 1000 ELSE dist8_h.
DEFINE minn9_h		ARRAYMIN(dist9_h).
DEFINE pos9_h		LOOKUP(minn9_h, dist9_h, pos_h).
DEFINE dist10_h		IF pos_h == pos9_h THEN dist9_h + 1000 ELSE dist9_h.
DEFINE minn10_h		ARRAYMIN(dist10_h).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_h		LOOKUP(minn1_h, distance23, s_db_13b).
ASSIGN BD1_h		ARRAYMIN(BD1_h).
DEFINE BD2_h		LOOKUP(minn2_h, dist2_h, s_db_13b).
ASSIGN BD2_h		ARRAYMIN(BD2_h).
DEFINE BD3_h		LOOKUP(minn3_h, dist3_h, s_db_13b).
ASSIGN BD3_h		ARRAYMIN(BD3_h).
DEFINE BD4_h		LOOKUP(minn4_h, dist4_h, s_db_13b).
ASSIGN BD4_h		ARRAYMIN(BD4_h).
DEFINE BD5_h		LOOKUP(minn5_h, dist5_h, s_db_13b).
ASSIGN BD5_h		ARRAYMIN(BD5_h).
DEFINE BD6_h		LOOKUP(minn6_h, dist6_h, s_db_13b).
ASSIGN BD6_h		ARRAYMIN(BD6_h).
DEFINE BD7_h		LOOKUP(minn7_h, dist7_h, s_db_13b).
ASSIGN BD7_h		ARRAYMIN(BD7_h).
DEFINE BD8_h		LOOKUP(minn8_h, dist8_h, s_db_13b).
ASSIGN BD8_h		ARRAYMIN(BD8_h).
DEFINE BD9_h		LOOKUP(minn9_h, dist9_h, s_db_13b).
ASSIGN BD9_h		ARRAYMIN(BD9_h).
DEFINE BD10_h		LOOKUP(minn10_h, dist10_h, s_db_13b).
ASSIGN BD10_h		ARRAYMIN(BD10_h).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_h	IF minn1_h == 0 THEN 1 ELSE minn1_h.
ASSIGN minn2_h	IF minn2_h == 0 THEN 1 ELSE minn2_h.
ASSIGN minn3_h	IF minn3_h == 0 THEN 1 ELSE minn3_h.
ASSIGN minn4_h	IF minn4_h == 0 THEN 1 ELSE minn4_h.
ASSIGN minn5_h	IF minn5_h == 0 THEN 1 ELSE minn5_h.
ASSIGN minn6_h	IF minn6_h == 0 THEN 1 ELSE minn6_h.
ASSIGN minn7_h	IF minn7_h == 0 THEN 1 ELSE minn7_h.
ASSIGN minn8_h	IF minn8_h == 0 THEN 1 ELSE minn8_h.
ASSIGN minn9_h	IF minn9_h == 0 THEN 1 ELSE minn9_h.
ASSIGN minn10_h	IF minn10_h == 0 THEN 1 ELSE minn10_h.

# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_h		minn1_h + minn2_h + minn3_h + minn4_h + minn5_h + minn6_h + minn7_h + minn8_h + minn8_h + minn9_h.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_h	POW(sum_dist_h/minn1_h,1).
DEFINE rel_dist2_h	POW(sum_dist_h/minn2_h,1).
DEFINE rel_dist3_h	POW(sum_dist_h/minn3_h,1).
DEFINE rel_dist4_h	POW(sum_dist_h/minn4_h,1).
DEFINE rel_dist5_h	POW(sum_dist_h/minn5_h,1).
DEFINE rel_dist6_h	POW(sum_dist_h/minn6_h,1).
DEFINE rel_dist7_h	POW(sum_dist_h/minn7_h,1).
DEFINE rel_dist8_h	POW(sum_dist_h/minn8_h,1).
DEFINE rel_dist9_h	POW(sum_dist_h/minn9_h,1).
DEFINE rel_dist10_h	POW(sum_dist_h/minn10_h,1).

DEFINE sum_rel_dist_h		rel_dist1_h + rel_dist2_h + rel_dist3_h + rel_dist4_h + rel_dist5_h + rel_dist6_h + rel_dist7_h + rel_dist8_h + rel_dist9_h + rel_dist10_h.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_h	rel_dist1_h/sum_rel_dist_h.
DEFINE wt2_h	rel_dist2_h/sum_rel_dist_h.
DEFINE wt3_h	rel_dist3_h/sum_rel_dist_h.
DEFINE wt4_h	rel_dist4_h/sum_rel_dist_h.
DEFINE wt5_h	rel_dist5_h/sum_rel_dist_h.
DEFINE wt6_h	rel_dist6_h/sum_rel_dist_h.
DEFINE wt7_h  	rel_dist7_h/sum_rel_dist_h.
DEFINE wt8_h	rel_dist8_h/sum_rel_dist_h.
DEFINE wt9_h  	rel_dist9_h/sum_rel_dist_h.
DEFINE wt10_h	rel_dist10_h/sum_rel_dist_h.

# The weighted average bulk density of 8 nearest soils (to the target soil).
DEFINE wt_BD_h	ROUND(BD1_h*wt1_h + BD2_h*wt2_h + BD3_h*wt3_h + BD4_h*wt4_h + BD5_h*wt5_h + BD6_h*wt6_h + BD7_h*wt7_h + BD8_h*wt8_h + BD9_h*wt9_h + BD10_h*wt10_h,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Sandy BD %s" wt_BD_h.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s, %s, %s, %s" BD1_h, BD2_h, BD3_h, BD4_h, BD5_h, BD6_h, BD7_h, BD8_h.

# 8-20% ORGANIC CARBON SOILS HIGH VALUES-------------------------------------------------------------
# Read the table of bulk densities and other properties of soils that have 8 to 20% organic carbon.

# Determines the 'distance' of each soil from the target soil.
DEFINE distance32		SQRT(POW(oc_l - carbon8_20,2)).
# Gets the minimum distance to the target soil.
DEFINE minn1_8_20_h		ARRAYMIN(distance32).

# Gets the next 9 minimum distances to the target soil.
DEFINE pos_8_20_h 		ARRAYPOSITION(distance32).
DEFINE pos1_8_20_h 		LOOKUP(minn1_8_20_h, distance32, pos_8_20_h).
DEFINE dist2_8_20_h		IF pos_8_20_h == pos1_8_20_h THEN distance32 + 1000 ELSE distance32.
DEFINE minn2_8_20_h		ARRAYMIN(dist2_8_20_h).
DEFINE pos2_8_20_h		LOOKUP(minn2_8_20_h, dist2_8_20_h, pos_8_20_h).
DEFINE dist3_8_20_h		IF pos_8_20_h == pos2_8_20_h THEN dist2_8_20_h + 1000 ELSE dist2_8_20_h.
DEFINE minn3_8_20_h		ARRAYMIN(dist3_8_20_h).
DEFINE pos3_8_20_h		LOOKUP(minn3_8_20_h, dist3_8_20_h, pos_8_20_h).
DEFINE dist4_8_20_h		IF pos_8_20_h == pos3_8_20_h THEN dist3_8_20_h + 1000 ELSE dist3_8_20_h.
DEFINE minn4_8_20_h		ARRAYMIN(dist4_8_20_h).
DEFINE pos4_8_20_h		LOOKUP(minn4_8_20_h, dist4_8_20_h, pos_8_20_h).
DEFINE dist5_8_20_h		IF pos_8_20_h == pos4_8_20_h THEN dist4_8_20_h + 1000 ELSE dist4_8_20_h.
DEFINE minn5_8_20_h		ARRAYMIN(dist5_8_20_h).
DEFINE pos5_8_20_h		LOOKUP(minn5_8_20_h, dist5_8_20_h, pos_8_20_h).
DEFINE dist6_8_20_h		IF pos_8_20_h == pos5_8_20_h THEN dist5_8_20_h + 1000 ELSE dist5_8_20_h.
DEFINE minn6_8_20_h		ARRAYMIN(dist6_8_20_h).
DEFINE pos6_8_20_h		LOOKUP(minn6_8_20_h, dist6_8_20_h, pos_8_20_h).
DEFINE dist7_8_20_h		IF pos_8_20_h == pos6_8_20_h THEN dist6_8_20_h + 1000 ELSE dist6_8_20_h.
DEFINE minn7_8_20_h		ARRAYMIN(dist7_8_20_h).
DEFINE pos7_8_20_h		LOOKUP(minn7_8_20_h, dist7_8_20_h, pos_8_20_h).
DEFINE dist8_8_20_h		IF pos_8_20_h == pos7_8_20_h THEN dist7_8_20_h + 1000 ELSE dist7_8_20_h.
DEFINE minn8_8_20_h		ARRAYMIN(dist8_8_20_h).
DEFINE pos8_8_20_h		LOOKUP(minn8_8_20_h, dist8_8_20_h, pos_8_20_h).
DEFINE dist9_8_20_h		IF pos_8_20_h == pos8_8_20_h THEN dist8_8_20_h + 1000 ELSE dist8_8_20_h.
DEFINE minn9_8_20_h		ARRAYMIN(dist9_8_20_h).
DEFINE pos9_8_20_h		LOOKUP(minn9_8_20_h, dist9_8_20_h, pos_8_20_h).
DEFINE dist10_8_20_h		IF pos_8_20_h == pos9_8_20_h THEN dist9_8_20_h + 1000 ELSE dist9_8_20_h.
DEFINE minn10_8_20_h		ARRAYMIN(dist10_8_20_h).

# Gets the 10 nearest neighbor bulk densities to the target soil.
DEFINE BD1_8_20_h		LOOKUP(minn1_8_20_h, distance32, db_13b8_20).
ASSIGN BD1_8_20_h		ARRAYMIN(BD1_8_20_h).
DEFINE BD2_8_20_h		LOOKUP(minn2_8_20_h, dist2_8_20_h, db_13b8_20).
ASSIGN BD2_8_20_h		ARRAYMIN(BD2_8_20_h).
DEFINE BD3_8_20_h		LOOKUP(minn3_8_20_h, dist3_8_20_h, db_13b8_20).
ASSIGN BD3_8_20_h		ARRAYMIN(BD3_8_20_h).
DEFINE BD4_8_20_h		LOOKUP(minn4_8_20_h, dist4_8_20_h, db_13b8_20).
ASSIGN BD4_8_20_h		ARRAYMIN(BD4_8_20_h).
DEFINE BD5_8_20_h		LOOKUP(minn5_8_20_h, dist5_8_20_h, db_13b8_20).
ASSIGN BD5_8_20_h		ARRAYMIN(BD5_8_20_h).
DEFINE BD6_8_20_h		LOOKUP(minn6_8_20_h, dist6_8_20_h, db_13b8_20).
ASSIGN BD6_8_20_h		ARRAYMIN(BD6_8_20_h).
DEFINE BD7_8_20_h		LOOKUP(minn7_8_20_h, dist7_8_20_h, db_13b8_20).
ASSIGN BD7_8_20_h		ARRAYMIN(BD7_8_20_h).
DEFINE BD8_8_20_h		LOOKUP(minn8_8_20_h, dist8_8_20_h, db_13b8_20).
ASSIGN BD8_8_20_h		ARRAYMIN(BD8_8_20_h).
DEFINE BD9_8_20_h		LOOKUP(minn9_8_20_h, dist9_8_20_h, db_13b8_20).
ASSIGN BD9_8_20_h		ARRAYMIN(BD9_8_20_h).
DEFINE BD10_8_20_h		LOOKUP(minn10_8_20_h, dist10_8_20_h, db_13b8_20).
ASSIGN BD10_8_20_h		ARRAYMIN(BD10_8_20_h).

# Sets the minimum distance to 1 when equal to zero; avoids dividing by zero in the following equations.
ASSIGN minn1_8_20_h		IF minn1_8_20_h == 0 THEN 1 ELSE minn1_8_20_h.
ASSIGN minn2_8_20_h		IF minn2_8_20_h == 0 THEN 1 ELSE minn2_8_20_h.
ASSIGN minn3_8_20_h		IF minn3_8_20_h == 0 THEN 1 ELSE minn3_8_20_h.
ASSIGN minn4_8_20_h		IF minn4_8_20_h == 0 THEN 1 ELSE minn4_8_20_h.
ASSIGN minn5_8_20_h		IF minn5_8_20_h == 0 THEN 1 ELSE minn5_8_20_h.
ASSIGN minn6_8_20_h		IF minn6_8_20_h == 0 THEN 1 ELSE minn6_8_20_h.
ASSIGN minn7_8_20_h		IF minn7_8_20_h == 0 THEN 1 ELSE minn7_8_20_h.
ASSIGN minn8_8_20_h		IF minn8_8_20_h == 0 THEN 1 ELSE minn8_8_20_h.
ASSIGN minn9_8_20_h		IF minn9_8_20_h == 0 THEN 1 ELSE minn9_8_20_h.
ASSIGN minn10_8_20_h	IF minn10_8_20_h == 0 THEN 1 ELSE minn10_8_20_h.


# The calculated distance of each soil from the target soil will be different and a soil closer to the target soil
# is given more weight in calculating the estimated bulk density.
# A weighting system is used that accounts for the distribution of the distances of 10 nearest neighbors from the target.
DEFINE sum_dist_8_20_h		minn1_8_20_h + minn2_8_20_h + minn3_8_20_h + minn4_8_20_h + minn5_8_20_h +
							minn1_8_20_h + minn2_8_20_h + minn3_8_20_h + minn4_8_20_h + minn5_8_20_h.

# Calculates the relative distance of each of the 10 nearest neighbors. 
# A power term of 1 is used, which assumes a simple inverse relationship
DEFINE rel_dist1_8_20_h		POW(sum_dist_8_20_h/minn1_8_20_h,1).
DEFINE rel_dist2_8_20_h		POW(sum_dist_8_20_h/minn2_8_20_h,1).
DEFINE rel_dist3_8_20_h		POW(sum_dist_8_20_h/minn3_8_20_h,1).
DEFINE rel_dist4_8_20_h		POW(sum_dist_8_20_h/minn4_8_20_h,1).
DEFINE rel_dist5_8_20_h		POW(sum_dist_8_20_h/minn5_8_20_h,1).
DEFINE rel_dist6_8_20_h		POW(sum_dist_8_20_h/minn6_8_20_h,1).
DEFINE rel_dist7_8_20_h		POW(sum_dist_8_20_h/minn7_8_20_h,1).
DEFINE rel_dist8_8_20_h		POW(sum_dist_8_20_h/minn8_8_20_h,1).
DEFINE rel_dist9_8_20_h		POW(sum_dist_8_20_h/minn9_8_20_h,1).
DEFINE rel_dist10_8_20_h	POW(sum_dist_8_20_h/minn10_8_20_h,1).

DEFINE sum_rel_dist_8_20_h		rel_dist1_8_20_h + rel_dist2_8_20_h + rel_dist3_8_20_h + rel_dist4_8_20_h + rel_dist5_8_20_h +
								rel_dist6_8_20_h + rel_dist7_8_20_h + rel_dist8_8_20_h + rel_dist9_8_20_h + rel_dist10_8_20_h.

# Weights for each of the 10 nearest neighbors are calculated.
DEFINE wt1_8_20_h		rel_dist1_8_20_h/sum_rel_dist_8_20_h.
DEFINE wt2_8_20_h		rel_dist2_8_20_h/sum_rel_dist_8_20_h.
DEFINE wt3_8_20_h		rel_dist3_8_20_h/sum_rel_dist_8_20_h.
DEFINE wt4_8_20_h		rel_dist4_8_20_h/sum_rel_dist_8_20_h.
DEFINE wt5_8_20_h		rel_dist5_8_20_h/sum_rel_dist_8_20_h.
DEFINE wt6_8_20_h		rel_dist6_8_20_h/sum_rel_dist_8_20_h.
DEFINE wt7_8_20_h		rel_dist7_8_20_h/sum_rel_dist_8_20_h.
DEFINE wt8_8_20_h		rel_dist8_8_20_h/sum_rel_dist_8_20_h.
DEFINE wt9_8_20_h		rel_dist9_8_20_h/sum_rel_dist_8_20_h.
DEFINE wt10_8_20_h		rel_dist10_8_20_h/sum_rel_dist_8_20_h.


# The weighted average bulk density of 10 nearest soils (to the target soil).
DEFINE wt_BD_8_20_h		ROUND(BD1_8_20_h*wt1_8_20_h + BD2_8_20_h*wt2_8_20_h + BD3_8_20_h*wt3_8_20_h + BD4_8_20_h*wt4_8_20_h + BD5_8_20_h*wt5_8_20_h +
						BD6_8_20_h*wt6_8_20_h + BD7_8_20_h*wt7_8_20_h + BD8_8_20_h*wt8_8_20_h + BD9_8_20_h*wt9_8_20_h + BD10_8_20_h*wt10_8_20_h,2).			

#WHEN not ISNULL(hzdept_r)
#DISPLAY "Organic BD %s" wt_BD_8_20_h.

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s, %s, %s" BD1_8_20_h, BD2_8_20_h, BD3_8_20_h, BD4_8_20_h, BD5_8_20_h.

#------------------------------------

DEFINE bulk_density_h	IF oc_h > 20 and not isnull(oc_h) THEN wt_BD_org_h

						ELSE IF texture matches "*MEDL*" or texture matches "*HYDR*" or texture matches "*ASHY*" THEN wt_BD_andic_h

						ELSE IF ((hzname matches "*x*" or (resdept_r == hzdept_r and reskind1 == "fragipan") or 
							(subgrp matches "fragic*" and ksat_r < 1.41)) or
 
							((resdept_r == hzdept_r and (reskind1 == "densic material" or reskind1 == "bedrock, densic")) or
							(hzname matches "*d*" and not hzname matches "*di*")) or

							((resdept_r == hzdept_r and (reskind1 == "cemented horizon" or reskind1 == "duripan" or
							reskind1 == "ortstein" or reskind1 == "petrocalcic" or reskind1 == "petroferric" or 
							reskind1 == "petrogypsic")) or (hzname matches "*m*" and not hzname matches "*ma*")) or

							(hzname matches "*r*" or (resdept_r == hzdept_r and reskind1 == "bedrock, paralithic")) or
 
							hzname matches "*hs*" or hzname matches "*o*" or 
							(hzname matches "*s*" and not hzname matches "*ss*" and not hzname matches "*se*") or hzname matches "*h*" or 
							(hzname matches "*v*" or (resdept_r == hzdept_r and reskind1 == "plinthite")) or 
							hzname matches "*q*") 

							AND (gypsum_r <= 5 or isnull(gypsum_r)) THEN wt_BD_dns_h

						ELSE IF oc_h > 8 and not isnull(oc_h) THEN wt_BD_8_20_h

						ELSE IF gypsum_h > 5 and not isnull(gypsum_h) THEN wt_BD_gypsum_h

						ELSE IF sandtotal_h >= 70 and not isnull(sandtotal_h) THEN wt_BD_h
 
						ELSE wt_BD_min_h.



#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s FE" bulk_density_l, bulk_density, bulk_density_h.

#WHEN not ISNULL(hzdept_r)
#DISPLAY " BD %s" wt_BD_min_h.

#---------------------------------------------
# Checks for NULL data.
ASSIGN bulk_density_l	IF (isnull(sandtotal_l) or isnull(sandtotal_h) or isnull(silttotal_l) or isnull(silttotal_h) or
						isnull(claytotal_l) or isnull(claytotal_h) or isnull(om_l) or isnull(om_h) or
						(sandtotal_r==0 and silttotal_r==0 and claytotal_r==0)) and oc_r < 8 and gypsum_r <= 40 and not isnull(gypsum_r) and
						(not texture matches "*ASHY*" OR not texture matches "*MEDL*" OR not texture matches "*HYDR*") THEN 1/0 
						ELSE IF (isnull(gypsum_l) or isnull(gypsum_h)) and gypsum_r > 40 and not isnull(gypsum_r) THEN 1/0 
						ELSE IF (isnull(om_l) or isnull(om_h)) THEN 1/0 ELSE bulk_density_l.
ASSIGN bulk_density_h	IF (isnull(sandtotal_l) or isnull(sandtotal_h) or isnull(silttotal_l) or isnull(silttotal_h) or
						isnull(claytotal_l) or isnull(claytotal_h) or isnull(om_l) or isnull(om_h) or
						(sandtotal_r==0 and silttotal_r==0 and claytotal_r==0)) and oc_r < 8 and gypsum_r <= 40 and not isnull(gypsum_r) and
						(not texture matches "*ASHY*" OR not texture matches "*MEDL*" OR not texture matches "*HYDR*") THEN 1/0 
						ELSE IF (isnull(gypsum_l) or isnull(gypsum_h)) and gypsum_r > 40 and not isnull(gypsum_r) THEN 1/0 
						ELSE IF (isnull(om_l) or isnull(om_h)) THEN 1/0 ELSE bulk_density_h.
ASSIGN bulk_density		IF (isnull(sandtotal_r) or isnull(silttotal_r) or isnull(claytotal_r) or
						(sandtotal_r==0 and silttotal_r==0 and claytotal_r==0)) and oc_r < 8 and gypsum_r <= 40 and not isnull(gypsum_r) and
						(not texture matches "*ASHY*" OR not texture matches "*MEDL*" OR not texture matches "*HYDR*") THEN 1/0 
						ELSE IF (not isnull(claytotal_r) and (sandtotal_r + silttotal_r + claytotal_r > 0) and isnull(om_r)) THEN 1/0
						ELSE bulk_density.

#---------------------------------------------
# Ensures that low values are lower than the high values and vise versa.
DEFINE bdarray	APPEND(bulk_density_l,APPEND(bulk_density_h, bulk_density)).
DEFINE bdlow	IF isnull(bulk_density_l) THEN bulk_density_l ELSE ARRAYMIN(bdarray).
DEFINE bdhigh	IF isnull(bulk_density_h) THEN bulk_density_h ELSE ARRAYMAX(bdarray).

DEFINE findbd		ARRAYPOSITION(bdarray).
DEFINE lowpos 		LOOKUP(bdlow, bdarray, findbd).
ASSIGN lowpos		ARRAYMIN(lowpos).
DEFINE highpos 		LOOKUP(bdhigh, bdarray, findbd).
ASSIGN highpos		ARRAYMIN(highpos).
DEFINE rvpos		IF lowpos == findbd or highpos == findbd THEN 999 ELSE bdarray.

# Scales the RV bulk density between the low and high BD based on the OM range (between the low and high BD).		
DEFINE rvbd_adj		(((bdhigh - bdlow)/(om_h - om_l))*(om_r - om_l)) * 0.98.

DEFINE bdrv		IF isnull(bulk_density) THEN bulk_density 
				ELSE IF isnull(bulk_density_l) or isnull(bulk_density_h) THEN ARRAYMIN(rvpos)
				ELSE IF (round(om_l,2)==round(om_r,2) and round(om_r,2)==round(om_h,2)) then bulk_density  #new 5/15/2019
				ELSE ROUND((bdhigh - rvbd_adj),2). #new 11/13/2018
				#ELSE ROUND((bdlow + bdhigh)/2,2).

#------------------------------------------------- 

WHEN (isnull(sandtotal_l) or isnull(sandtotal_h)) and oc_r < 8 and gypsum_r <= 40 and not isnull(gypsum_r) 
and (not texture matches "*ASHY*" OR not texture matches "*MEDL*" OR not texture matches "*HYDR*")
DISPLAY "Low or high total sand is NULL, can't calculate a low or high bulk density.".

WHEN (isnull(silttotal_l) or isnull(silttotal_h)) and oc_r < 8 and gypsum_r <= 40 and not isnull(gypsum_r) 
and (not texture matches "*ASHY*" OR not texture matches "*MEDL*" OR not texture matches "*HYDR*")
DISPLAY "Low or high total silt is NULL, can't calculate a low or high bulk density.".

WHEN (isnull(claytotal_l) or isnull(claytotal_h)) and oc_r < 8 and gypsum_r <= 40 and not isnull(gypsum_r) 
and (not texture matches "*ASHY*" OR not texture matches "*MEDL*" OR not texture matches "*HYDR*")
DISPLAY "Low or high total clay is NULL, can't calculate a low or high bulk density.".

WHEN (((isnull(om_l) or isnull(om_h)) and oc_r < 8 and gypsum_r <= 40) or
	 ((isnull(om_l) or isnull(om_h)) and om_r >= 20)) and not isnull(claytotal_r)
DISPLAY "Low or high ogranic matter is NULL, can't calculate a low or high bulk density.".

WHEN ((isnull(gypsum_l) or isnull(gypsum_h)) and gypsum_r > 40)
DISPLAY "Low or high gypsum is NULL, can't calculate a low or high bulk density.".

WHEN (isnull(sandtotal_r) or isnull(silttotal_r) or isnull(claytotal_r)) and oc_r < 8 and gypsum_r <= 40 and not isnull(gypsum_r)  
and (not texture matches "*ASHY*" OR not texture matches "*MEDL*" OR not texture matches "*HYDR*")
DISPLAY "RV total sand or silt or clay is NULL, can't calculate an RV bulk density.".

WHEN not isnull(claytotal_r) and (sandtotal_r + silttotal_r + claytotal_r > 0) and isnull(om_r)
DISPLAY "RV organic matter is NULL, can't calculate an RV bulk density.".

WHEN (isnull(sandvc_r) or isnull(sandco_r) or isnull(sandmed_r) or isnull(sandfine_r) or isnull(sandvf_r)) and oc_r < 8 and gypsum_r <= 40 and not isnull(gypsum_r)  
and (not texture matches "*ASHY*" OR not texture matches "*MEDL*" OR not texture matches "*HYDR*")
DISPLAY "One or more sand separates is NULL, can't calculate an RV bulk density.".

#--------------------------------------------

#WHEN not ISNULL(hzdept_r)
#DISPLAY "BD %s, %s, %s end" bdlow, bdrv, bdhigh.

SET dbthirdbar_r from bdrv.
SET dbthirdbar_l from bdlow. 
SET dbthirdbar_h from bdhigh.